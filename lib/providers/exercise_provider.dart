import 'package:flutter/foundation.dart';
import '../models/exercise.dart';
import '../models/exercise_entry.dart';
import '../services/exercise_service.dart';
import '../services/exercise_firebase_service.dart';
import 'package:intl/intl.dart';
import '../services/api_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';

class ExerciseProvider with ChangeNotifier {
  Map<String, List<Exercise>> _exercisesByDate = {};
  String _selectedDate = DateTime.now().toIso8601String().split('T')[0];
  bool _isLoading = false;
  final FirebaseAuth _authService;
  final ExerciseFirebaseService _exerciseFirebaseService = ExerciseFirebaseService();

  // Constructor
  ExerciseProvider({FirebaseAuth? authService}) 
      : _authService = authService ?? FirebaseAuth.instance {
    _loadExercisesFromPrefs();
    
    // Listen for auth state changes
    _authService.authStateChanges().listen((User? user) {
      if (user != null) {
        // User logged in, sync data from Firebase
        syncFromFirebase();
      } else {
        // User logged out, clear data
        clearDataOnLogout();
      }
    });
  }

  // Getter cho ng√†y ƒë√£ ch·ªçn
  String get selectedDate => _selectedDate;
  
  // Getter cho danh s√°ch Exercise c·ªßa ng√†y ƒë√£ ch·ªçn
  List<Exercise> get selectedDateExercises {
    return _exercisesByDate[_selectedDate] ?? [];
  }
  
  // Getter cho t·∫•t c·∫£ Exercise
  Map<String, List<Exercise>> get allExercises => _exercisesByDate;

  // Getter for loading state
  bool get isLoading => _isLoading;
  
  // C·∫≠p nh·∫≠t ng√†y ƒë√£ ch·ªçn
  void setSelectedDate(String date) {
    if (_selectedDate != date) {
      _selectedDate = date;
      debugPrint('ExerciseProvider: ƒê√£ ƒë·∫∑t ng√†y th√†nh $date');
      notifyListeners();
      
      // T·∫£i d·ªØ li·ªáu cho ng√†y m·ªõi
      loadData();
    } else {
      debugPrint('ExerciseProvider: Ng√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√† $date, kh√¥ng c·∫ßn thay ƒë·ªïi');
    }
  }
  
  // T√≠nh t·ªïng calories cho ng√†y ƒë√£ ch·ªçn
  int get totalCalories {
    return selectedDateExercises.fold(0, (sum, exercise) => sum + exercise.calories);
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ nh√≥m c√°c b√†i t·∫≠p theo ng√†y
  Map<String, List<Exercise>> getExercisesByDay() {
    Map<String, List<Exercise>> grouped = {};
    
    // Duy·ªát qua t·∫•t c·∫£ c√°c b√†i t·∫≠p ƒë√£ l∆∞u
    _exercisesByDate.forEach((date, exercises) {
      for (var exercise in exercises) {
        // X√°c ƒë·ªãnh key ng√†y cho b√†i t·∫≠p
        final exerciseDate = DateTime.parse(exercise.date);
        final key = _getDateKey(exerciseDate);
        
        if (!grouped.containsKey(key)) {
          grouped[key] = [];
        }
        
        grouped[key]!.add(exercise);
      }
    });
    
    // S·∫Øp x·∫øp c√°c b√†i t·∫≠p trong m·ªói ng√†y theo th·ªùi gian
    grouped.forEach((day, exercises) {
      exercises.sort((a, b) {
        final aDate = DateTime.parse(a.date);
        final bDate = DateTime.parse(b.date);
        return bDate.compareTo(aDate); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
      });
    });
    
    return grouped;
  }
  
  // Helper method ƒë·ªÉ t·∫°o key cho nh√≥m ng√†y
  String _getDateKey(DateTime date) {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final yesterday = today.subtract(Duration(days: 1));
    
    if (date.year == today.year && date.month == today.month && date.day == today.day) {
      return 'H√¥m nay';
    } else if (date.year == yesterday.year && date.month == yesterday.month && date.day == yesterday.day) {
      return 'H√¥m qua';
    } else {
      return 'Ng√†y ${date.day} th√°ng ${date.month}';
    }
  }

  // T·∫£i d·ªØ li·ªáu
  Future<void> loadData() async {
    if (_selectedDate.isEmpty) return;
    
    setState(_isLoading, true);
    debugPrint('üîÑ ƒêang t·∫£i d·ªØ li·ªáu b√†i t·∫≠p cho ng√†y $_selectedDate...');
    
    // T·∫£i d·ªØ li·ªáu t·ª´ SharedPreferences tr∆∞·ªõc
    await _loadExercisesFromPrefs();
    
    // ƒê·∫£m b·∫£o c√≥ danh s√°ch tr·ªëng cho ng√†y ƒë√£ ch·ªçn n·∫øu ch∆∞a c√≥
    if (!_exercisesByDate.containsKey(_selectedDate)) {
      _exercisesByDate[_selectedDate] = [];
    }
    
    // T·∫£i d·ªØ li·ªáu t·ª´ Firestore n·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
    final currentUser = _authService.currentUser;
    if (currentUser != null) {
      try {
        debugPrint('üîÑ Truy v·∫•n tr·ª±c ti·∫øp v√†o Firestore cho ng√†y $_selectedDate...');
        
        // Truy v·∫•n tr·ª±c ti·∫øp v√†o collection exercises trong Firestore
        final querySnapshot = await FirebaseFirestore.instance
          .collection('exercises')
          .where('user_id', isEqualTo: currentUser.uid)
          .get();
        
        if (querySnapshot.docs.isNotEmpty) {
          debugPrint('‚úÖ T√¨m th·∫•y ${querySnapshot.docs.length} b√†i t·∫≠p trong Firestore, ƒëang l·ªçc theo ng√†y $_selectedDate');
          
          // L·ªçc k·∫øt qu·∫£ theo ng√†y ƒë√£ ch·ªçn
          final selectedDateExercises = <Exercise>[];
          
          for (var doc in querySnapshot.docs) {
            try {
              final data = doc.data();
              
              // Tr√≠ch xu·∫•t ng√†y t·ª´ d·ªØ li·ªáu
              String? dateStr = data['date'];
              if (dateStr == null || dateStr.isEmpty) {
                // N·∫øu kh√¥ng c√≥ tr∆∞·ªùng date, th·ª≠ t√¨m trong c√°c tr∆∞·ªùng kh√°c
                dateStr = data['timestamp'] ?? data['created_at'] ?? data['updated_at'];
              }
              
              if (dateStr != null && dateStr.isNotEmpty) {
                // L·ªçc theo ng√†y ƒë√£ ch·ªçn
                String docDate = '';
                if (dateStr.contains('T')) {
                  docDate = dateStr.split('T')[0];
                } else {
                  docDate = dateStr;
                }
                
                if (docDate == _selectedDate) {
                  // T·∫°o ƒë·ªëi t∆∞·ª£ng Exercise t·ª´ d·ªØ li·ªáu Firestore
                  final exercise = Exercise(
                    id: data['id'] ?? doc.id,
                    name: data['name'] ?? 'Kh√¥ng x√°c ƒë·ªãnh',
                    icon: data['icon'] ?? 'fitness_center',
                    minutes: data['minutes'] ?? data['duration'] ?? 30,
                    calories: data['calories'] ?? 0,
                    date: dateStr,
                    intensity: data['intensity'] ?? data['type'] ?? 'V·ª´a ph·∫£i',
                  );
                  
                  selectedDateExercises.add(exercise);
                  debugPrint('  ‚úÖ T√¨m th·∫•y b√†i t·∫≠p cho ng√†y $_selectedDate: ${exercise.name}');
                }
              }
            } catch (e) {
              debugPrint('‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω document ${doc.id}: $e');
            }
          }
          
          if (selectedDateExercises.isNotEmpty) {
            // C·∫≠p nh·∫≠t danh s√°ch b√†i t·∫≠p cho ng√†y ƒë√£ ch·ªçn
            _exercisesByDate[_selectedDate] = selectedDateExercises;
            debugPrint('‚úÖ ƒê√£ t·∫£i ${selectedDateExercises.length} b√†i t·∫≠p cho ng√†y $_selectedDate');
            
            // L∆∞u v√†o SharedPreferences
            await _saveExercisesToPrefs();
          } else {
            debugPrint('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p n√†o cho ng√†y $_selectedDate');
          }
        } else {
          debugPrint('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p n√†o trong Firestore');
        }
      } catch (e) {
        debugPrint('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu b√†i t·∫≠p t·ª´ Firestore: $e');
      }
    } else {
      debugPrint('‚ÑπÔ∏è Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, s·ª≠ d·ª•ng d·ªØ li·ªáu local');
    }
    
    // K·∫øt th√∫c tr·∫°ng th√°i loading v√† th√¥ng b√°o UI c·∫≠p nh·∫≠t
    setState(_isLoading, false);
    notifyListeners();
  }
        
  // T·∫£i t·∫•t c·∫£ exercises t·ª´ t·∫•t c·∫£ c√°c ng√†y
  Future<void> loadAllExercises() async {
    setState(_isLoading, true);
    
    // T·∫£i t·ª´ SharedPreferences tr∆∞·ªõc
    await _loadExercisesFromPrefs();
    
    // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, th·ª≠ t·∫£i t·ª´ Firebase
    final user = _authService.currentUser;
    if (user != null) {
      try {
        // ∆Øu ti√™n l·∫•y d·ªØ li·ªáu t·ª´ Firebase
        final allFirebaseExercises = await ApiService.getAllExercisesFromFirebase(user.uid);
        
        if (allFirebaseExercises != null && allFirebaseExercises.isNotEmpty) {
          _exercisesByDate = allFirebaseExercises;
          debugPrint('‚úÖ ƒê√£ t·∫£i t·∫•t c·∫£ b√†i t·∫≠p t·ª´ Firebase');
          
          // L∆∞u l·∫°i v√†o SharedPreferences
          await _saveExercisesToPrefs();
          notifyListeners();
          setState(_isLoading, false);
          return;
        }
        
        // L·∫•y t·∫•t c·∫£ b√†i t·∫≠p tr·ª±c ti·∫øp t·ª´ Firestore
        try {
          final exercisesSnapshot = await FirebaseFirestore.instance
              .collection('exercises')
              .where('user_id', isEqualTo: user.uid)
              .get();
          
          if (exercisesSnapshot.docs.isNotEmpty) {
            Map<String, List<Exercise>> exercisesByDate = {};
            
            for (var doc in exercisesSnapshot.docs) {
              final exerciseData = doc.data();
              final exercise = Exercise.fromJson(exerciseData);
              final date = exercise.date.split('T')[0];
              
              if (!exercisesByDate.containsKey(date)) {
                exercisesByDate[date] = [];
              }
              
              exercisesByDate[date]!.add(exercise);
            }
            
            _exercisesByDate = exercisesByDate;
            debugPrint('‚úÖ ƒê√£ t·∫£i t·∫•t c·∫£ b√†i t·∫≠p t·ª´ Firestore');
            
            // L∆∞u l·∫°i v√†o SharedPreferences
            await _saveExercisesToPrefs();
            notifyListeners();
          } else {
            debugPrint('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu b√†i t·∫≠p tr·ª±c tuy·∫øn, s·ª≠ d·ª•ng d·ªØ li·ªáu c·ª•c b·ªô');
          }
        } catch (e) {
          debugPrint('‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu b√†i t·∫≠p t·ª´ Firestore: $e');
        }
      } catch (e) {
        debugPrint('‚ùå L·ªói khi t·∫£i t·∫•t c·∫£ b√†i t·∫≠p t·ª´ Firebase/API: $e');
        debugPrint('‚ÑπÔ∏è S·ª≠ d·ª•ng d·ªØ li·ªáu c·ª•c b·ªô t·ª´ SharedPreferences');
      }
    } else {
      debugPrint('‚ÑπÔ∏è Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p, s·ª≠ d·ª•ng d·ªØ li·ªáu c·ª•c b·ªô t·ª´ SharedPreferences');
    }
    
    setState(_isLoading, false);
  }

  // Helper to update loading state
  void setState(bool currentState, bool newState) {
    if (currentState != newState) {
      _isLoading = newState;
      notifyListeners();
    }
  }

  // Th√™m m·ªôt b√†i t·∫≠p m·ªõi
  Future<bool> addExercise(Exercise exercise) async {
    try {
      // ƒê·∫£m b·∫£o exercise c√≥ ID
      if (exercise.id == null || exercise.id!.isEmpty) {
        exercise = exercise.copyWith(
          id: FirebaseFirestore.instance.collection('exercises').doc().id
        );
      }
      
      // ƒê·∫£m b·∫£o date c√≥ ƒë·ªãnh d·∫°ng ISO 8601
      if (!exercise.date.contains('T')) {
        exercise = exercise.copyWith(
          date: '${exercise.date}T00:00:00.000Z'
        );
      }
      
      // L·∫•y ng√†y ƒë·ªÉ ph√¢n lo·∫°i trong b·ªô nh·ªõ
      final dateKey = exercise.date.split('T')[0];
      debugPrint('üî• Th√™m b√†i t·∫≠p m·ªõi: ${exercise.name} v√†o ng√†y $dateKey');
      
      // Th√™m v√†o danh s√°ch local
      if (!_exercisesByDate.containsKey(dateKey)) {
        _exercisesByDate[dateKey] = [];
      }
      
      // Th√™m v√†o danh s√°ch c·ªßa ng√†y t∆∞∆°ng ·ª©ng
      _exercisesByDate[dateKey]!.add(exercise);
      
      // L∆∞u v√†o SharedPreferences
      await _saveExercisesToPrefs();
      
      // L∆∞u v√†o Firestore n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
      final userId = _authService.currentUser?.uid;
      if (userId != null) {
        try {
          // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ l∆∞u v√†o Firestore
          final exerciseData = {
            ...exercise.toJson(),
            'user_id': userId,
            'created_at': DateTime.now().toIso8601String(),
            'updated_at': DateTime.now().toIso8601String(),
          };
          
          // L∆∞u tr·ª±c ti·∫øp v√†o Firestore
          await FirebaseFirestore.instance
            .collection('exercises')
            .doc(exercise.id)
            .set(exerciseData);
          
          debugPrint('‚úÖ ƒê√£ l∆∞u b√†i t·∫≠p tr·ª±c ti·∫øp v√†o Firestore th√†nh c√¥ng');
        } catch (firestoreError) {
          debugPrint('‚ùå L·ªói khi l∆∞u tr·ª±c ti·∫øp v√†o Firestore: $firestoreError');
          
          // Th·ª≠ ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng ApiService
          try {
            final success = await ApiService.sendExercise(exercise, userId);
            if (success) {
              debugPrint('‚úÖ ƒê√£ l∆∞u b√†i t·∫≠p v√†o Firestore th√†nh c√¥ng qua ApiService');
            } else {
              debugPrint('‚ùå Kh√¥ng th·ªÉ l∆∞u b√†i t·∫≠p v√†o Firestore qua ApiService');
            }
          } catch (apiError) {
            debugPrint('‚ùå L·ªói khi g·ªçi ApiService.sendExercise: $apiError');
          }
        }
      }
      
      // Th√¥ng b√°o UI c·∫≠p nh·∫≠t
      notifyListeners();
      return true;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi th√™m b√†i t·∫≠p: $e');
      return false;
    }
  }

  // C·∫≠p nh·∫≠t m·ªôt Exercise
  Future<bool> updateExercise(Exercise oldExercise, Exercise newExercise) async {
    try {
      // X√°c ƒë·ªãnh ng√†y c·ªßa Exercise
      final date = oldExercise.date.split('T')[0];
      
      // C·∫≠p nh·∫≠t Exercise trong danh s√°ch c·ªßa Provider
      if (_exercisesByDate.containsKey(date)) {
        final index = _exercisesByDate[date]!.indexWhere((e) => 
          e.id == oldExercise.id || 
          (e.name == oldExercise.name && 
          e.minutes == oldExercise.minutes && 
          e.intensity == oldExercise.intensity)
        );
        
        if (index != -1) {
          _exercisesByDate[date]![index] = newExercise;
          notifyListeners();
          
          // L∆∞u v√†o SharedPreferences
          await _saveExercisesToPrefs();
          
          // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o Firebase
          final userId = _authService.currentUser?.uid;
          if (userId != null) {
            try {
              // C·∫≠p nh·∫≠t v√†o Firestore tr·ª±c ti·∫øp
              await FirebaseFirestore.instance
                  .collection('exercise_entries')
                  .doc(newExercise.id)
                  .update({
                    ...newExercise.toJson(),
                    'user_id': userId,
                  });
              
              debugPrint('‚úÖ ƒê√£ c·∫≠p nh·∫≠t b√†i t·∫≠p tr√™n Firebase th√†nh c√¥ng');
              
              // Ch·ªâ g·ª≠i ƒë·∫øn API cho c√°c ch·ª©c nƒÉng ph·ª©c t·∫°p (n·∫øu c·∫ßn)
              if (newExercise.needsAdvancedAnalysis) {
                final result = await ApiService.updateExercise(newExercise, userId);
                if (result) {
                  debugPrint('‚úÖ ƒê√£ g·ª≠i b√†i t·∫≠p c·∫≠p nh·∫≠t ƒë·∫øn API ƒë·ªÉ ph√¢n t√≠ch n√¢ng cao');
                } else {
                  debugPrint('‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i b√†i t·∫≠p c·∫≠p nh·∫≠t ƒë·∫øn API ƒë·ªÉ ph√¢n t√≠ch');
                }
              }
              
              return true;
            } catch (e) {
              debugPrint('‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i t·∫≠p tr√™n Firebase: $e');
              return false;
            }
          }
          
          return true;
        }
      }
      return false;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi c·∫≠p nh·∫≠t b√†i t·∫≠p: $e');
      return false;
    }
  }

  // X√≥a m·ªôt b√†i t·∫≠p
  Future<bool> deleteExercise(String id) async {
    try {
      // T√¨m b√†i t·∫≠p trong danh s√°ch local
      Exercise? exerciseToDelete;
      String? dateKey;
      
      for (final date in _exercisesByDate.keys) {
        final exercises = _exercisesByDate[date]!;
        final index = exercises.indexWhere((e) => e.id == id);
        
        if (index != -1) {
          exerciseToDelete = exercises[index];
          dateKey = date;
          break;
        }
      }
      
      if (exerciseToDelete == null || dateKey == null) {
        debugPrint('‚ùå Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p v·ªõi id: $id');
        return false;
      }
      
      // X√≥a kh·ªèi danh s√°ch local
      _exercisesByDate[dateKey]!.removeWhere((e) => e.id == id);
      
      // N·∫øu danh s√°ch tr·ªëng, x√≥a lu√¥n key
      if (_exercisesByDate[dateKey]!.isEmpty) {
        _exercisesByDate.remove(dateKey);
      }
      
      // L∆∞u v√†o SharedPreferences
      await _saveExercisesToPrefs();
      
      // Th√¥ng b√°o UI c·∫≠p nh·∫≠t
      notifyListeners();
      
      // X√≥a tr·ª±c ti·∫øp tr√™n Firebase n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
      final userId = _authService.currentUser?.uid;
      if (userId != null) {
        try {
          // Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng ApiService.deleteExercise ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng Firestore tr·ª±c ti·∫øp
          final success = await ApiService.deleteExercise(id, userId);
          
          if (success) {
            debugPrint('‚úÖ ƒê√£ x√≥a b√†i t·∫≠p v√†o Firestore th√†nh c√¥ng qua ApiService');
          } else {
            debugPrint('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a b√†i t·∫≠p v√†o Firestore qua ApiService, th·ª≠ ph∆∞∆°ng ph√°p 2');
            
            // Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng ExerciseFirebaseService
            final backupSuccess = await _exerciseFirebaseService.deleteExerciseEntry(id);
            
            if (backupSuccess) {
              debugPrint('‚úÖ ƒê√£ x√≥a b√†i t·∫≠p tr√™n Firebase th√†nh c√¥ng qua ExerciseFirebaseService');
            } else {
              debugPrint('‚ùå Kh√¥ng th·ªÉ x√≥a b√†i t·∫≠p tr√™n Firebase qua ExerciseFirebaseService');
              
              // Ph∆∞∆°ng ph√°p 3: Th·ª≠ x√≥a tr·ª±c ti·∫øp t·ª´ Firestore
              try {
                // Th·ª≠ c·∫£ hai collection kh√°c nhau ƒë·ªÉ ƒë·∫£m b·∫£o x√≥a ƒë∆∞·ª£c
                await FirebaseFirestore.instance.collection('exercises').doc(id).delete();
                debugPrint('‚úÖ ƒê√£ x√≥a b√†i t·∫≠p tr·ª±c ti·∫øp t·ª´ collection "exercises"');
                
                // Th·ª≠ x√≥a th√™m t·ª´ collection exercise_entries n·∫øu c√≥
                try {
                  await FirebaseFirestore.instance.collection('exercise_entries').doc(id).delete();
                  debugPrint('‚úÖ ƒê√£ x√≥a b√†i t·∫≠p tr·ª±c ti·∫øp t·ª´ collection "exercise_entries"');
                } catch (e) {
                  // Kh√¥ng g√¢y l·ªói n·∫øu kh√¥ng t√¨m th·∫•y trong collection n√†y
                }
                
                return true;
              } catch (firestoreError) {
                debugPrint('‚ùå L·ªói khi x√≥a tr·ª±c ti·∫øp t·ª´ Firestore: $firestoreError');
              }
            }
          }
          
          return true;
        } catch (e) {
          debugPrint('‚ùå L·ªói khi x√≥a b√†i t·∫≠p tr√™n Firestore: $e');
          return false;
        }
      }
      
      return true;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi x√≥a b√†i t·∫≠p: $e');
      return false;
    }
  }

  // Tr·∫£ v·ªÅ to√†n b·ªô exercise entries d∆∞·ªõi d·∫°ng List<Map<String, dynamic>> ƒë·ªÉ ƒë·ªìng b·ªô
  List<Map<String, dynamic>> getAllExercisesAsJson() {
    return _exercisesByDate.values.expand((e) => e).map((e) => e.toJson()).toList();
  }
  
  // L∆∞u d·ªØ li·ªáu b√†i t·∫≠p v√†o SharedPreferences
  Future<void> _saveExercisesToPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final Map<String, dynamic> exercisesMap = {};
      
      _exercisesByDate.forEach((date, exercises) {
        exercisesMap[date] = exercises.map((e) => e.toJson()).toList();
      });
      
      await prefs.setString('exercises_data', jsonEncode(exercisesMap));
      debugPrint('‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu b√†i t·∫≠p v√†o SharedPreferences');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu b√†i t·∫≠p v√†o SharedPreferences: $e');
    }
  }
  
  // T·∫£i d·ªØ li·ªáu b√†i t·∫≠p t·ª´ SharedPreferences
  Future<void> _loadExercisesFromPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? exercisesJson = prefs.getString('exercises_data');
      if (exercisesJson != null) {
        final Map<String, dynamic> exercisesMap = jsonDecode(exercisesJson);
        final Map<String, List<Exercise>> loadedExercises = {};
        
        exercisesMap.forEach((date, exercises) {
          loadedExercises[date] = (exercises as List)
              .map((e) => Exercise.fromJson(e))
              .toList();
        });
        
        _exercisesByDate = loadedExercises;
        debugPrint('‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu b√†i t·∫≠p t·ª´ SharedPreferences');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu b√†i t·∫≠p t·ª´ SharedPreferences: $e');
    }
  }

  // Ph∆∞∆°ng th·ª©c loadExercises ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
  Future<void> loadExercises() async {
    // G·ªçi ƒë·∫øn ph∆∞∆°ng th·ª©c loadData m·ªõi
    await loadData();
  }
  
  // ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase khi ƒëƒÉng nh·∫≠p l·∫°i
  Future<void> syncFromFirebase() async {
    final currentUser = _authService.currentUser;
    if (currentUser == null) return;
    
    try {
      debugPrint('üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu b√†i t·∫≠p t·ª´ Firestore...');
      
      // L·∫•y d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ Firestore cho ng√†y hi·ªán t·∫°i
      final today = DateTime.now();
      final todayString = today.toIso8601String().split('T')[0];
      
      try {
        debugPrint('üîÑ Truy v·∫•n tr·ª±c ti·∫øp v√†o Firestore cho ng√†y $todayString...');
        
        // L·∫•y t·∫•t c·∫£ b√†i t·∫≠p c·ªßa ng∆∞·ªùi d√πng tr∆∞·ªõc
        final querySnapshot = await FirebaseFirestore.instance
            .collection('exercises')
            .where('user_id', isEqualTo: currentUser.uid)
            .get();
            
        debugPrint('‚úÖ T√¨m th·∫•y ${querySnapshot.docs.length} b√†i t·∫≠p trong Firestore, ƒëang l·ªçc theo ng√†y $todayString');
        
        // L·ªçc b√†i t·∫≠p theo ng√†y sau khi ƒë√£ l·∫•y t·ª´ Firestore
        final filteredExercises = querySnapshot.docs
            .map((doc) => Exercise.fromJson(doc.data()))
            .where((exercise) {
              // Ki·ªÉm tra xem b√†i t·∫≠p c√≥ thu·ªôc ng√†y ƒëang ch·ªçn kh√¥ng
              String exerciseDate = '';
              if (exercise.date.contains('T')) {
                exerciseDate = exercise.date.split('T')[0];
              } else {
                exerciseDate = exercise.date;
              }
              
              debugPrint('  üîç Ki·ªÉm tra b√†i t·∫≠p: ${exercise.name}, ng√†y: $exerciseDate, c·∫ßn t√¨m: $todayString');
              return exerciseDate == todayString;
            })
            .toList();
        
        if (filteredExercises.isNotEmpty) {
          // C·∫≠p nh·∫≠t d·ªØ li·ªáu local cho ng√†y hi·ªán t·∫°i
          _exercisesByDate[todayString] = filteredExercises;
          
          // C·∫≠p nh·∫≠t SharedPreferences
          await _saveExercisesToPrefs();
          
          // Th√¥ng b√°o UI c·∫≠p nh·∫≠t
          notifyListeners();
          
          debugPrint('‚úÖ ƒê√£ ƒë·ªìng b·ªô ${filteredExercises.length} b√†i t·∫≠p t·ª´ Firestore cho ng√†y $todayString');
        } else {
          debugPrint('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p n√†o cho ng√†y $todayString');
          
          // ƒê·ªìng b·ªô d·ªØ li·ªáu local l√™n Firestore n·∫øu c√≥
          final localExercises = _exercisesByDate[todayString] ?? [];
          
          if (localExercises.isNotEmpty) {
            for (var exercise in localExercises) {
              final success = await ApiService.sendExercise(exercise, currentUser.uid);
              if (success) {
                debugPrint('‚úÖ ƒê√£ ƒë·ªìng b·ªô b√†i t·∫≠p "${exercise.name}" l√™n Firestore');
              } else {
                debugPrint('‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô b√†i t·∫≠p "${exercise.name}" l√™n Firestore');
              }
            }
          }
        }
      } catch (e) {
        debugPrint('‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu b√†i t·∫≠p t·ª´ Firestore: $e');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu b√†i t·∫≠p t·ª´ Firestore: $e');
    }
  }

  // Method to clear data when user logs out
  Future<void> clearDataOnLogout() async {
    try {
      debugPrint('üßπ ExerciseProvider: Clearing data on logout...');
      
      // Clear all exercise entries
      _exercisesByDate = {};
      
      // Update SharedPreferences
      await _saveExercisesToPrefs();
      
      // Notify UI to update
      notifyListeners();
      
      debugPrint('‚úÖ ExerciseProvider: Data cleared successfully on logout');
    } catch (e) {
      debugPrint('‚ùå ExerciseProvider: Error clearing data on logout: $e');
    }
  }
}