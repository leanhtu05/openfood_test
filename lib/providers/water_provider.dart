import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../models/water_entry.dart';
import '../services/water_service.dart';
import '../services/water_firebase_service.dart';
import 'package:intl/intl.dart';
import '../utils/constants.dart';
import '../services/api_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/user_service.dart';

class WaterProvider with ChangeNotifier {
  final WaterService _waterService = WaterService();
  final WaterFirebaseService _waterFirebaseService = WaterFirebaseService();
  
  List<WaterEntry> _entries = [];
  int _totalWaterToday = 0;
  DateTime? _lastWaterTime;
  bool _isLoading = false;
  String _selectedDate = DateFormat('yyyy-MM-dd').format(DateTime.now());
  final FirebaseAuth _authService;
  
  // Getters
  List<WaterEntry> get entries => _entries;
  int get totalWaterToday => _totalWaterToday;
  DateTime? get lastWaterTime => _lastWaterTime;
  bool get isLoading => _isLoading;
  bool get hasWaterEntriesForToday => _totalWaterToday > 0;
  String get selectedDate => _selectedDate;
  
  // M·ª•c ti√™u n∆∞·ªõc ƒë·ªông d·ª±a tr√™n profile ng∆∞·ªùi d√πng
  int _waterGoal = 2500; // mL - gi√° tr·ªã m·∫∑c ƒë·ªãnh

  // Getter cho m·ª•c ti√™u n∆∞·ªõc
  int get waterGoal => _waterGoal;
  
  // Constructor kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu sync
  WaterProvider({FirebaseAuth? authService})
      : _authService = authService ?? FirebaseAuth.instance {
    _loadInitialData();
    
    // Listen for auth state changes
    _authService.authStateChanges().listen((User? user) {
      if (user != null) {
        // User logged in, sync data from Firebase
        syncFromFirebase();
      } else {
        // User logged out, clear data
        clearDataOnLogout();
      }
    });
  }
  
  // Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o d·ªØ li·ªáu
  Future<void> _loadInitialData() async {
    // T·∫£i d·ªØ li·ªáu t·ª´ SharedPreferences tr∆∞·ªõc
    await _loadWaterEntriesFromPrefs();

    // C·∫≠p nh·∫≠t m·ª•c ti√™u n∆∞·ªõc d·ª±a tr√™n profile ng∆∞·ªùi d√πng
    await _updateWaterGoal();

    // C·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc cho ng√†y ƒë√£ ch·ªçn
    _updateTotalWaterForSelectedDate();

    // L·∫•y th·ªùi gian l·∫ßn cu·ªëi u·ªëng n∆∞·ªõc
    _lastWaterTime = _getLastWaterTimeFromEntries(_entries);

    // T·∫£i d·ªØ li·ªáu t·ª´ API n·∫øu c√≥ ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
    loadData();
  }
  
  // C·∫≠p nh·∫≠t m·ª•c ti√™u n∆∞·ªõc d·ª±a tr√™n profile ng∆∞·ªùi d√πng
  Future<void> _updateWaterGoal() async {
    try {
      final user = _authService.currentUser;
      if (user != null) {
        // T·∫°o instance UserService v√† l·∫•y profile ng∆∞·ªùi d√πng
        final userService = UserService();
        final userProfile = await userService.getUserProfile();

        if (userProfile != null) {
          // T√≠nh to√°n m·ª•c ti√™u n∆∞·ªõc d·ª±a tr√™n profile
          _waterGoal = _calculateWaterGoal(userProfile);
          debugPrint('‚úÖ ƒê√£ c·∫≠p nh·∫≠t m·ª•c ti√™u n∆∞·ªõc: $_waterGoal ml d·ª±a tr√™n profile ng∆∞·ªùi d√πng');
        } else {
          // S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ profile
          _waterGoal = 2500;
          debugPrint('‚ÑπÔ∏è S·ª≠ d·ª•ng m·ª•c ti√™u n∆∞·ªõc m·∫∑c ƒë·ªãnh: $_waterGoal ml');
        }
      } else {
        // Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
        _waterGoal = 2500;
        debugPrint('‚ÑπÔ∏è Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, s·ª≠ d·ª•ng m·ª•c ti√™u n∆∞·ªõc m·∫∑c ƒë·ªãnh: $_waterGoal ml');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi c·∫≠p nh·∫≠t m·ª•c ti√™u n∆∞·ªõc: $e');
      _waterGoal = 2500; // Fallback
    }
  }

  // T√≠nh to√°n m·ª•c ti√™u n∆∞·ªõc d·ª±a tr√™n th√¥ng tin c√° nh√¢n
  int _calculateWaterGoal(Map<String, dynamic> userProfile) {
    try {
      // L·∫•y th√¥ng tin c∆° b·∫£n v·ªõi c√°c field names c√≥ th·ªÉ c√≥ trong Firebase
      final double weight = (userProfile['weightKg'] ?? userProfile['weight'] ?? 70.0).toDouble();
      final double height = (userProfile['heightCm'] ?? userProfile['height'] ?? 170.0).toDouble();
      final int age = userProfile['age'] ?? 25;
      final String gender = userProfile['gender'] ?? 'male';
      final String activityLevel = userProfile['activityLevel'] ?? 'moderate';

      // C√¥ng th·ª©c t√≠nh m·ª•c ti√™u n∆∞·ªõc c∆° b·∫£n: 35ml/kg c√¢n n·∫∑ng
      double baseWater = weight * 35;

      // ƒêi·ªÅu ch·ªânh theo gi·ªõi t√≠nh
      if (gender.toLowerCase() == 'female') {
        baseWater *= 0.9; // Ph·ª• n·ªØ c·∫ßn √≠t n∆∞·ªõc h∆°n 10%
      }

      // ƒêi·ªÅu ch·ªânh theo tu·ªïi
      if (age > 65) {
        baseWater *= 0.85; // Ng∆∞·ªùi cao tu·ªïi c·∫ßn √≠t n∆∞·ªõc h∆°n
      } else if (age < 18) {
        baseWater *= 1.1; // Tr·∫ª em/thanh thi·∫øu ni√™n c·∫ßn nhi·ªÅu n∆∞·ªõc h∆°n
      }

      // ƒêi·ªÅu ch·ªânh theo m·ª©c ƒë·ªô ho·∫°t ƒë·ªông
      switch (activityLevel.toLowerCase()) {
        case 'sedentary':
        case 'low':
          baseWater *= 1.0; // Kh√¥ng thay ƒë·ªïi
          break;
        case 'moderate':
        case 'medium':
          baseWater *= 1.15; // TƒÉng 15%
          break;
        case 'active':
        case 'high':
          baseWater *= 1.3; // TƒÉng 30%
          break;
        case 'very_active':
        case 'very high':
          baseWater *= 1.5; // TƒÉng 50%
          break;
      }

      // ƒêi·ªÅu ch·ªânh theo BMI (n·∫øu c√≥ th√¥ng tin chi·ªÅu cao)
      if (height > 0) {
        final double bmi = weight / ((height / 100) * (height / 100));
        if (bmi > 30) {
          baseWater *= 1.1; // Ng∆∞·ªùi b√©o ph√¨ c·∫ßn nhi·ªÅu n∆∞·ªõc h∆°n
        } else if (bmi < 18.5) {
          baseWater *= 0.95; // Ng∆∞·ªùi g·∫ßy c·∫ßn √≠t n∆∞·ªõc h∆°n
        }
      }

      // L√†m tr√≤n v√† ƒë·∫£m b·∫£o trong kho·∫£ng h·ª£p l√Ω (1500-5000ml)
      int finalGoal = baseWater.round();
      finalGoal = finalGoal.clamp(1500, 5000);

      debugPrint('üíß T√≠nh to√°n m·ª•c ti√™u n∆∞·ªõc:');
      debugPrint('   C√¢n n·∫∑ng: ${weight}kg');
      debugPrint('   Chi·ªÅu cao: ${height}cm');
      debugPrint('   Tu·ªïi: $age');
      debugPrint('   Gi·ªõi t√≠nh: $gender');
      debugPrint('   M·ª©c ƒë·ªô ho·∫°t ƒë·ªông: $activityLevel');
      debugPrint('   M·ª•c ti√™u n∆∞·ªõc: ${finalGoal}ml');

      return finalGoal;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t√≠nh to√°n m·ª•c ti√™u n∆∞·ªõc: $e');
      return 2500; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    }
  }

  // C·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc cho ng√†y ƒë√£ ch·ªçn
  void _updateTotalWaterForSelectedDate() {
    try {
      final selectedDateTime = DateTime.parse(_selectedDate);
      _totalWaterToday = getWaterAmountForDate(selectedDateTime);
    } catch (e) {
      debugPrint('‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc: $e');
      _totalWaterToday = 0;
    }
  }
  
  // Thay ƒë·ªïi ng√†y ƒë√£ ch·ªçn
  void setSelectedDate(String date) {
    if (_selectedDate != date) {
      _selectedDate = date;
      _updateTotalWaterForSelectedDate();
      notifyListeners();
      
      // T·∫£i d·ªØ li·ªáu cho ng√†y m·ªõi
      loadData();
    } else {
      debugPrint('WaterProvider: Ng√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√† $date, kh√¥ng c·∫ßn thay ƒë·ªïi');
    }
  }
  
  // T·∫£i d·ªØ li·ªáu
  Future<void> loadData() async {
    if (_selectedDate.isEmpty) return;
    
    // ƒê·∫∑t c·ªù ƒëang t·∫£i d·ªØ li·ªáu
    _isLoading = true;
    // S·ª≠ d·ª•ng Future.microtask ƒë·ªÉ tr√°nh g·ªçi notifyListeners trong qu√° tr√¨nh build
    Future.microtask(() => notifyListeners());
    
    try {
      // T·∫£i d·ªØ li·ªáu t·ª´ SharedPreferences tr∆∞·ªõc
      await _loadWaterEntriesFromPrefs();
      
      // N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, ∆∞u ti√™n l·∫•y d·ªØ li·ªáu t·ª´ Firebase
      final user = _authService.currentUser;
      if (user != null) {
        // C·∫≠p nh·∫≠t m·ª•c ti√™u n∆∞·ªõc d·ª±a tr√™n profile
        await _updateWaterGoal();

        debugPrint('üîÑ ƒêang t·∫£i d·ªØ li·ªáu n∆∞·ªõc t·ª´ Firebase cho ng√†y $_selectedDate');
        try {
          // Chuy·ªÉn ƒë·ªïi selectedDate th√†nh ƒë·ªëi t∆∞·ª£ng DateTime
          final selectedDateTime = DateTime.parse(_selectedDate);
          
          // S·ª≠ d·ª•ng WaterFirebaseService ƒë·ªÉ t·∫£i d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c ch·ªçn
          final firebaseEntries = await _waterFirebaseService.getWaterEntriesForDate(selectedDateTime);
          
          if (firebaseEntries.isNotEmpty) {
            debugPrint('‚úÖ ƒê√£ t·∫£i ${firebaseEntries.length} b·∫£n ghi n∆∞·ªõc t·ª´ Firebase');
            
            // L·ªçc c√°c b·∫£n ghi hi·ªán c√≥ cho ng√†y ƒë∆∞·ª£c ch·ªçn
            _entries.removeWhere((entry) => 
              DateFormat('yyyy-MM-dd').format(entry.timestamp) == _selectedDate);
            
            // Th√™m c√°c b·∫£n ghi m·ªõi t·ª´ Firebase
            _entries.addAll(firebaseEntries);
            
            // S·∫Øp x·∫øp l·∫°i danh s√°ch theo th·ªùi gian g·∫ßn nh·∫•t tr∆∞·ªõc
            _entries.sort((a, b) => b.timestamp.compareTo(a.timestamp));
          } else {
            debugPrint('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y b·∫£n ghi n∆∞·ªõc n√†o tr√™n Firebase cho ng√†y $_selectedDate');
          }
        } catch (e) {
          debugPrint('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu n∆∞·ªõc t·ª´ Firebase: $e');
        }
      } else {
        debugPrint('‚ÑπÔ∏è Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu local');
      }
      
      // C·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc v√† th·ªùi gian l·∫ßn cu·ªëi
      _updateTotalWaterForSelectedDate();
      _lastWaterTime = _getLastWaterTimeFromEntries(_entries);
      
      // L∆∞u v√†o SharedPreferences
      await _saveWaterEntriesToPrefs();
    } finally {
      // ƒê·∫∑t l·∫°i c·ªù ƒëang t·∫£i d·ªØ li·ªáu
      _isLoading = false;
      // S·ª≠ d·ª•ng Future.microtask ƒë·ªÉ tr√°nh g·ªçi notifyListeners trong qu√° tr√¨nh build
      Future.microtask(() => notifyListeners());
    }
  }
  
  // Th√™m m·ªôt b·∫£n ghi n∆∞·ªõc m·ªõi
  Future<bool> addWaterEntry(int amount, {DateTime? timestamp}) async {
    try {
      final now = timestamp ?? DateTime.now();
      final id = 'water_${now.millisecondsSinceEpoch}';
      
      // T·∫°o b·∫£n ghi m·ªõi
      final entry = WaterEntry(
        id: id,
        amount: amount,
        timestamp: now,
      );
      
      // Th√™m v√†o danh s√°ch local
      _entries.insert(0, entry); // Th√™m v√†o ƒë·∫ßu danh s√°ch
      
      // C·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc v√† th·ªùi gian l·∫ßn cu·ªëi
      _updateTotalWaterForSelectedDate();
      _lastWaterTime = entry.timestamp;
      
      notifyListeners();
      
      // L∆∞u v√†o SharedPreferences
      await _saveWaterEntriesToPrefs();
      
      // L∆∞u tr·ª±c ti·∫øp v√†o Firebase n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
      final userId = _authService.currentUser?.uid;
      if (userId != null) {
        try {
          // S·ª≠ d·ª•ng WaterFirebaseService ƒë·ªÉ l∆∞u tr·ª±c ti·∫øp v√†o Firebase
          final success = await _waterFirebaseService.saveWaterEntry(entry);
          
          if (success) {
            debugPrint('‚úÖ ƒê√£ l∆∞u b·∫£n ghi n∆∞·ªõc v√†o Firebase th√†nh c√¥ng');
          } else {
            debugPrint('‚ùå Kh√¥ng th·ªÉ l∆∞u b·∫£n ghi n∆∞·ªõc v√†o Firebase');
          }
          
          // Ch·ªâ g·ª≠i ƒë·∫øn API n·∫øu c·∫ßn ph√¢n t√≠ch n√¢ng cao
          try {
            await ApiService.sendWaterEntry(entry, userId);
            debugPrint('‚úÖ ƒê√£ th√¥ng b√°o API v·ªÅ b·∫£n ghi n∆∞·ªõc m·ªõi');
          } catch (apiError) {
            // Kh√¥ng quan tr·ªçng n·∫øu API kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o
            debugPrint('‚ÑπÔ∏è Kh√¥ng th·ªÉ th√¥ng b√°o API v·ªÅ b·∫£n ghi n∆∞·ªõc m·ªõi: $apiError');
          }
          return true;
        } catch (e) {
          debugPrint('‚ùå L·ªói khi l∆∞u b·∫£n ghi n∆∞·ªõc v√†o Firebase: $e');
          return false;
        }
      }
      
      return true;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi th√™m b·∫£n ghi n∆∞·ªõc: $e');
      return false;
    }
  }
  
  // X√≥a b·∫£n ghi
  Future<bool> deleteWaterEntry(String id) async {
    try {
      // X√≥a kh·ªèi danh s√°ch local
      _entries.removeWhere((entry) => entry.id == id);
      
      // C·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc v√† th·ªùi gian l·∫ßn cu·ªëi
      _updateTotalWaterForSelectedDate();
      _lastWaterTime = _getLastWaterTimeFromEntries(_entries);
      
      notifyListeners();
      
      // L∆∞u v√†o SharedPreferences
      await _saveWaterEntriesToPrefs();
      
      // X√≥a tr·ª±c ti·∫øp tr√™n Firebase
      final userId = _authService.currentUser?.uid;
      if (userId != null) {
        try {
          // X√≥a t·ª´ Firestore tr·ª±c ti·∫øp
          await FirebaseFirestore.instance
              .collection('water_entries')
              .doc(id)
              .delete();
          
          debugPrint('‚úÖ ƒê√£ x√≥a b·∫£n ghi n∆∞·ªõc tr√™n Firebase th√†nh c√¥ng');
          
          // Th√¥ng b√°o cho API v·ªÅ vi·ªác x√≥a (n·∫øu c·∫ßn)
          try {
            await ApiService.deleteWaterEntry(id, userId);
            debugPrint('‚úÖ ƒê√£ th√¥ng b√°o API v·ªÅ vi·ªác x√≥a b·∫£n ghi n∆∞·ªõc');
          } catch (apiError) {
            // Kh√¥ng quan tr·ªçng n·∫øu API kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o
            debugPrint('‚ÑπÔ∏è Kh√¥ng th·ªÉ th√¥ng b√°o API v·ªÅ vi·ªác x√≥a b·∫£n ghi n∆∞·ªõc: $apiError');
          }
          
          return true;
        } catch (e) {
          debugPrint('‚ùå L·ªói khi x√≥a b·∫£n ghi n∆∞·ªõc tr√™n Firebase: $e');
          return false;
        }
      }
      
      return true;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi x√≥a b·∫£n ghi n∆∞·ªõc: $e');
      return false;
    }
  }
  
  // T√≠nh t·ªïng l∆∞·ª£ng n∆∞·ªõc cho ng√†y hi·ªán t·∫°i
  int calculateTotalWaterForToday() {
    final now = DateTime.now();
    return _calculateWaterForDate(now);
  }
  
  // T√≠nh t·ªïng l∆∞·ª£ng n∆∞·ªõc cho ng√†y c·ª• th·ªÉ
  int _calculateWaterForDate(DateTime date) {
    return _entries
        .where((entry) => 
            entry.timestamp.year == date.year &&
            entry.timestamp.month == date.month &&
            entry.timestamp.day == date.day)
        .fold(0, (sum, entry) => sum + entry.amount);
  }
  
  // Nh√≥m b·∫£n ghi theo ng√†y ƒë·ªÉ hi·ªÉn th·ªã
  Map<String, List<WaterEntry>> getEntriesByDay() {
    Map<String, List<WaterEntry>> grouped = {};
    
    // T·∫°o danh s√°ch b·∫£n ghi c√≥ s·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
    final sortedEntries = List<WaterEntry>.from(_entries)
      ..sort((a, b) => b.timestamp.compareTo(a.timestamp));
    
    for (var entry in sortedEntries) {
      final date = DateTime(entry.timestamp.year, entry.timestamp.month, entry.timestamp.day);
      final key = _getDateKey(date);
      
      if (!grouped.containsKey(key)) {
        grouped[key] = [];
      }
      
      grouped[key]!.add(entry);
    }
    
    return grouped;
  }
  
  // L·∫•y d·ªØ li·ªáu n∆∞·ªõc cho ng√†y c·ª• th·ªÉ
  int getWaterAmountForDate(DateTime date) {
    return _entries
        .where((entry) => 
            entry.timestamp.year == date.year &&
            entry.timestamp.month == date.month &&
            entry.timestamp.day == date.day)
        .fold(0, (sum, entry) => sum + entry.amount);
  }
  
  // Ki·ªÉm tra li·ªáu c√≥ b·∫£n ghi n√†o cho ng√†y c·ª• th·ªÉ hay kh√¥ng
  bool hasEntriesForDate(DateTime date) {
    return getWaterAmountForDate(date) > 0;
  }
  
  // T·∫°o key cho nh√≥m ng√†y
  String _getDateKey(DateTime date) {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final yesterday = today.subtract(Duration(days: 1));
    
    if (date.year == today.year && date.month == today.month && date.day == today.day) {
      return 'H√¥m nay';
    } else if (date.year == yesterday.year && date.month == yesterday.month && date.day == yesterday.day) {
      return 'H√¥m qua';
    } else {
      return 'Ng√†y ${date.day} th√°ng ${date.month}';
    }
  }
  
  // L·∫•y danh s√°ch c√°c ng√†y c√≥ d·ªØ li·ªáu n∆∞·ªõc
  Future<List<DateTime>> getDatesWithWaterData() async {
    final Set<String> uniqueDates = {};
    final List<DateTime> result = [];
    
    for (var entry in _entries) {
      final dateKey = '${entry.timestamp.year}-${entry.timestamp.month}-${entry.timestamp.day}';
      if (!uniqueDates.contains(dateKey)) {
        uniqueDates.add(dateKey);
        result.add(DateTime(entry.timestamp.year, entry.timestamp.month, entry.timestamp.day));
      }
    }
    
    // S·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t
    result.sort((a, b) => b.compareTo(a));
    return result;
  }
  
  // X√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc
  Future<bool> clearAllWaterEntries() async {
    try {
      _entries.clear();
      _totalWaterToday = 0;
      _lastWaterTime = null;
      
      notifyListeners();
      
      // L∆∞u v√†o SharedPreferences
      await _saveWaterEntriesToPrefs();
      
      // X√≥a tr·ª±c ti·∫øp tr√™n Firebase
      final userId = _authService.currentUser?.uid;
      if (userId != null) {
        try {
          // X√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc c·ªßa ng∆∞·ªùi d√πng t·ª´ Firestore
          final batch = FirebaseFirestore.instance.batch();
          final snapshot = await FirebaseFirestore.instance
              .collection('water_entries')
              .where('user_id', isEqualTo: userId)
              .get();
          
          for (var doc in snapshot.docs) {
            batch.delete(doc.reference);
          }
          
          await batch.commit();
          
          debugPrint('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc tr√™n Firebase th√†nh c√¥ng');
          
          // Th√¥ng b√°o cho API v·ªÅ vi·ªác x√≥a (n·∫øu c·∫ßn)
          try {
            await ApiService.clearAllWaterEntries(userId);
            debugPrint('‚úÖ ƒê√£ th√¥ng b√°o API v·ªÅ vi·ªác x√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc');
          } catch (apiError) {
            // Kh√¥ng quan tr·ªçng n·∫øu API kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o
            debugPrint('‚ÑπÔ∏è Kh√¥ng th·ªÉ th√¥ng b√°o API v·ªÅ vi·ªác x√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc: $apiError');
          }
          
          return true;
        } catch (e) {
          debugPrint('‚ùå L·ªói khi x√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc tr√™n Firebase: $e');
          return false;
        }
      }
      
      return true;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi x√≥a t·∫•t c·∫£ b·∫£n ghi n∆∞·ªõc: $e');
      return false;
    }
  }
  
  // Ph∆∞∆°ng th·ª©c t√¨m th·ªùi gian cu·ªëi c√πng t·ª´ danh s√°ch b·∫£n ghi
  DateTime? _getLastWaterTimeFromEntries(List<WaterEntry> entries) {
    if (entries.isEmpty) return null;
    
    // S·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn v√† l·∫•y b·∫£n ghi ƒë·∫ßu ti√™n
    final sortedEntries = List<WaterEntry>.from(entries)
      ..sort((a, b) => b.timestamp.compareTo(a.timestamp));
    return sortedEntries.first.timestamp;
  }
  
  // Tr·∫£ v·ªÅ to√†n b·ªô water entries d∆∞·ªõi d·∫°ng List<Map<String, dynamic>> ƒë·ªÉ ƒë·ªìng b·ªô
  List<Map<String, dynamic>> getAllWaterEntriesAsJson() {
    return _entries.map((e) => e.toMap()).toList();
  }
  
  // L∆∞u d·ªØ li·ªáu n∆∞·ªõc v√†o SharedPreferences
  Future<void> _saveWaterEntriesToPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final List<Map<String, dynamic>> entriesMaps = _entries.map((e) => e.toMap()).toList();
      await prefs.setString('water_entries', jsonEncode(entriesMaps));
      debugPrint('‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu n∆∞·ªõc v√†o SharedPreferences');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu n∆∞·ªõc v√†o SharedPreferences: $e');
    }
  }
  
  // T·∫£i d·ªØ li·ªáu n∆∞·ªõc t·ª´ SharedPreferences
  Future<void> _loadWaterEntriesFromPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? entriesJson = prefs.getString('water_entries');
      if (entriesJson != null) {
        final List<dynamic> decodedList = jsonDecode(entriesJson);
        _entries = decodedList.map((item) => WaterEntry.fromMap(item)).toList();
        debugPrint('‚úÖ ƒê√£ t·∫£i ${_entries.length} b·∫£n ghi n∆∞·ªõc t·ª´ SharedPreferences');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu n∆∞·ªõc t·ª´ SharedPreferences: $e');
    }
  }
  
  // Hi·ªÉn th·ªã dialog th√™m n∆∞·ªõc
  Future<void> showWaterInputDialog(BuildContext context) async {
    int selectedAmount = 200; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh (ml)
    String selectedType = 'water'; // Lo·∫°i ƒë·ªì u·ªëng m·∫∑c ƒë·ªãnh
    
    Map<String, Color> drinkColors = {
      'water': Colors.blue,
      'tea': Colors.green,
      'coffee': Colors.brown,
      'juice': Colors.orange,
    };
    
    Map<String, String> drinkEmojis = {
      'water': 'üíß',
      'tea': 'üçµ',
      'coffee': '‚òï',
      'juice': 'üßÉ',
    };
    
    Map<String, String> drinkNames = {
      'water': 'N∆∞·ªõc',
      'tea': 'Tr√†',
      'coffee': 'C√† ph√™',
      'juice': 'N∆∞·ªõc √©p',
    };
    
    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return Dialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
              ),
              child: Container(
                padding: EdgeInsets.all(16),
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        'Th√™m n∆∞·ªõc',
                        style: TextStyle(
                          fontSize: 22,
                          fontWeight: FontWeight.bold,
                          color: drinkColors[selectedType],
                        ),
                      ),
                      SizedBox(height: 20),
                      
                      // L·ª±a ch·ªçn lo·∫°i ƒë·ªì u·ªëng
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: drinkTypes.map((type) {
                          return GestureDetector(
                            onTap: () {
                              setState(() {
                                selectedType = type;
                              });
                            },
                            child: AnimatedContainer(
                              duration: Duration(milliseconds: 300),
                              padding: EdgeInsets.all(10),
                              decoration: BoxDecoration(
                                color: selectedType == type 
                                    ? drinkColors[type]!.withOpacity(0.2) 
                                    : Colors.grey.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(15),
                                border: Border.all(
                                  color: selectedType == type 
                                      ? drinkColors[type]! 
                                      : Colors.transparent,
                                  width: 2,
                                ),
                              ),
                              child: Column(
                                children: [
                                  Text(
                                    drinkEmojis[type]!,
                                    style: TextStyle(fontSize: 24),
                                  ),
                                  SizedBox(height: 5),
                                  Text(
                                    drinkNames[type]!,
                                    style: TextStyle(
                                      color: selectedType == type
                                          ? drinkColors[type]
                                          : Colors.grey[700],
                                      fontWeight: selectedType == type
                                          ? FontWeight.bold
                                          : FontWeight.normal,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          );
                        }).toList(),
                      ),
                      
                      SizedBox(height: 30),
                      
                      // Hi·ªÉn th·ªã l∆∞·ª£ng n∆∞·ªõc ƒë√£ ch·ªçn
                      Text(
                        '$selectedAmount ml',
                        style: TextStyle(
                          fontSize: 32,
                          fontWeight: FontWeight.bold,
                          color: drinkColors[selectedType],
                        ),
                      ),
                      
                      SizedBox(height: 20),
                      
                      // Thanh tr∆∞·ª£t ch·ªçn l∆∞·ª£ng n∆∞·ªõc
                      Material(
                        color: Colors.transparent,
                        child: SliderTheme(
                          data: SliderThemeData(
                            activeTrackColor: drinkColors[selectedType],
                            thumbColor: drinkColors[selectedType],
                            overlayColor: drinkColors[selectedType]!.withOpacity(0.2),
                            thumbShape: RoundSliderThumbShape(enabledThumbRadius: 12),
                            overlayShape: RoundSliderOverlayShape(overlayRadius: 20),
                          ),
                          child: Slider(
                            min: 50,
                            max: 1000,
                            divisions: 19,
                            value: selectedAmount.toDouble(),
                            onChanged: (value) {
                              setState(() {
                                selectedAmount = value.round();
                              });
                            },
                          ),
                        ),
                      ),
                      
                      SizedBox(height: 20),
                      
                      // N√∫t ch·ªçn nhanh
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [100, 200, 300, 500].map((amount) {
                          return ElevatedButton(
                            onPressed: () {
                              setState(() {
                                selectedAmount = amount;
                              });
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: selectedAmount == amount
                                  ? drinkColors[selectedType]
                                  : Colors.grey.shade200,
                              foregroundColor: selectedAmount == amount
                                  ? Colors.white
                                  : Colors.black87,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                            ),
                            child: Text('$amount ml'),
                          );
                        }).toList(),
                      ),
                      
                      SizedBox(height: 20),
                      
                      // N√∫t x√°c nh·∫≠n
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context);
                            },
                            child: Text(
                              'H·ªßy',
                              style: TextStyle(color: Colors.grey[700]),
                            ),
                          ),
                          ElevatedButton(
                            onPressed: () async {
                              Navigator.pop(context);
                              await addWaterEntry(selectedAmount);
                              
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text('ƒê√£ th√™m $selectedAmount ml ${drinkNames[selectedType]}'),
                                  backgroundColor: drinkColors[selectedType],
                                  behavior: SnackBarBehavior.fixed,
                                ),
                              );
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: drinkColors[selectedType],
                              foregroundColor: Colors.white,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(10),
                              ),
                              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                            ),
                            child: Text('X√°c nh·∫≠n'),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }
  
  // Danh s√°ch lo·∫°i ƒë·ªì u·ªëng c√≥ s·∫µn
  List<String> get drinkTypes => ['water', 'tea', 'coffee', 'juice'];
  
  // Ph∆∞∆°ng th·ª©c getAllWaterLogsAsJson ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
  List<Map<String, dynamic>> getAllWaterLogsAsJson() {
    // G·ªçi ƒë·∫øn ph∆∞∆°ng th·ª©c getAllWaterEntriesAsJson m·ªõi
    return getAllWaterEntriesAsJson();
  }
  
  // ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase khi ƒëƒÉng nh·∫≠p l·∫°i
  Future<void> syncFromFirebase() async {
    final user = _authService.currentUser;
    if (user == null) return;
    
    try {
      debugPrint('üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu n∆∞·ªõc t·ª´ Firebase...');
      
      // S·ª≠ d·ª•ng WaterFirebaseService ƒë·ªÉ l·∫•y d·ªØ li·ªáu cho ng√†y hi·ªán t·∫°i
      final today = DateTime.now();
      final entries = await _waterFirebaseService.getWaterEntriesForDate(today);
      
      if (entries.isNotEmpty) {
        // S·∫Øp x·∫øp d·ªØ li·ªáu theo th·ªùi gian g·∫ßn nh·∫•t tr∆∞·ªõc
        entries.sort((a, b) => b.timestamp.compareTo(a.timestamp));
        
        // Ghi ƒë√® d·ªØ li·ªáu local b·∫±ng d·ªØ li·ªáu t·ª´ Firebase
        _entries = entries;
        
        // C·∫≠p nh·∫≠t t·ªïng l∆∞·ª£ng n∆∞·ªõc cho ng√†y ƒë√£ ch·ªçn
        _updateTotalWaterForSelectedDate();
        
        // L·∫•y th·ªùi gian l·∫ßn cu·ªëi u·ªëng n∆∞·ªõc
        _lastWaterTime = _getLastWaterTimeFromEntries(_entries);
        
        // C·∫≠p nh·∫≠t SharedPreferences
        await _saveWaterEntriesToPrefs();
        
        // Th√¥ng b√°o UI c·∫≠p nh·∫≠t
        notifyListeners();
        
        debugPrint('‚úÖ ƒê√£ ƒë·ªìng b·ªô ${entries.length} b·∫£n ghi n∆∞·ªõc t·ª´ Firebase');
      } else {
        debugPrint('‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu n∆∞·ªõc tr√™n Firebase cho ng√†y h√¥m nay');
        
        // ƒê·ªìng b·ªô d·ªØ li·ªáu local l√™n Firebase n·∫øu c√≥
        final localEntries = _entries.where((entry) => 
          DateFormat('yyyy-MM-dd').format(entry.timestamp) == 
          DateFormat('yyyy-MM-dd').format(today)).toList();
        
        if (localEntries.isNotEmpty) {
          final success = await _waterFirebaseService.syncAllWaterEntries(localEntries);
          if (success) {
            debugPrint('‚úÖ ƒê√£ ƒë·ªìng b·ªô ${localEntries.length} b·∫£n ghi n∆∞·ªõc local l√™n Firebase');
          } else {
            debugPrint('‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu n∆∞·ªõc local l√™n Firebase');
          }
        }
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu n∆∞·ªõc t·ª´ Firebase: $e');
    }
  }

  // Method to manually update water goal (public method)
  Future<void> updateWaterGoal() async {
    await _updateWaterGoal();
    notifyListeners();
  }

  // Method to set custom water goal
  void setCustomWaterGoal(int goal) {
    if (goal >= 1000 && goal <= 6000) {
      _waterGoal = goal;
      notifyListeners();
      debugPrint('‚úÖ ƒê√£ ƒë·∫∑t m·ª•c ti√™u n∆∞·ªõc t√πy ch·ªânh: $goal ml');
    } else {
      debugPrint('‚ùå M·ª•c ti√™u n∆∞·ªõc kh√¥ng h·ª£p l·ªá: $goal ml (ph·∫£i t·ª´ 1000-6000ml)');
    }
  }

  // Method to get water goal percentage
  double getWaterGoalPercentage() {
    if (_waterGoal <= 0) return 0.0;
    return (_totalWaterToday / _waterGoal).clamp(0.0, 1.0);
  }

  // Method to get remaining water needed
  int getRemainingWaterNeeded() {
    final remaining = _waterGoal - _totalWaterToday;
    return remaining > 0 ? remaining : 0;
  }

  // Method to check if goal is achieved
  bool isGoalAchieved() {
    return _totalWaterToday >= _waterGoal;
  }

  // Method to clear data when user logs out
  Future<void> clearDataOnLogout() async {
    try {
      debugPrint('üßπ WaterProvider: Clearing data on logout...');

      // Clear all water entries
      _entries = [];

      // Reset water statistics
      _totalWaterToday = 0;
      _lastWaterTime = null;

      // Reset water goal to default
      _waterGoal = 2500;

      // Update SharedPreferences
      await _saveWaterEntriesToPrefs();

      // Notify UI to update
      notifyListeners();

      debugPrint('‚úÖ WaterProvider: Data cleared successfully on logout');
    } catch (e) {
      debugPrint('‚ùå WaterProvider: Error clearing data on logout: $e');
    }
  }
}