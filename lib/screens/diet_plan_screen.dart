import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // Th√™m import cho HapticFeedback
import 'package:google_fonts/google_fonts.dart';
import '../utils/constants.dart';
import '../utils/nutrition_calculator.dart';
import '../services/meal_plan_api_service.dart';
import '../services/firestore_service.dart';
import '../services/api_service.dart';
import '../models/meal_plan.dart';
import '../models/food_entry.dart';
import '../models/food_item.dart';
import 'food_nutrition_detail_screen.dart';
import 'package:uuid/uuid.dart';
import 'package:provider/provider.dart';
import '../providers/food_provider.dart';
import '../providers/user_data_provider.dart';
import '../providers/user_auth_provider.dart';
import '../providers/meal_plan_provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:package_info_plus/package_info_plus.dart';
import '../main.dart' as main_app;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';
import '../utils/config.dart' as app_config;
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:math';
import 'package:intl/intl.dart';
import '../widgets/meal_detail_card.dart';
import '../utils/auth_helper.dart';

// üé® Clean & Simple Color Scheme - Inspired by reference image
class DietPlanColors {
  // M√†u ch√≠nh - xanh d∆∞∆°ng nh·∫π nh√†ng nh∆∞ trong ·∫£nh
  static const Color primary = Color(0xFF2196F3);
  static const Color primaryLight = Color(0xFFE3F2FD);
  static const Color primaryDark = Color(0xFF1976D2);

  // M√†u ph·ª• - x√°m trung t√≠nh
  static const Color secondary = Color(0xFF9E9E9E);
  static const Color secondaryLight = Color(0xFFF5F5F5);
  static const Color background = Color(0xFFFAFAFA);

  // M√†u text - ƒë∆°n gi·∫£n v√† d·ªÖ ƒë·ªçc
  static const Color textPrimary = Color(0xFF212121);
  static const Color textSecondary = Color(0xFF757575);
  static const Color textLight = Color(0xFF9E9E9E);

  // M√†u accent
  static const Color accent = Color(0xFF4CAF50);
  static const Color warning = Color(0xFFFF9800);
  static const Color error = Color(0xFFF44336);
}

// Extension to make text smaller
extension TextScaling on Text {
  Text scaled() {
    final TextStyle? style = this.style;
    final scaleFactor = 0.85; // Scale all text to 85% of original size

    if (style != null) {
      // Scale the existing style's font size
      final double? fontSize = style.fontSize;
      final newFontSize = fontSize != null ? fontSize * scaleFactor : 12.0 * scaleFactor;

      return Text(
        data ?? '',
        style: style.copyWith(fontSize: newFontSize),
        textAlign: textAlign,
        softWrap: softWrap,
        overflow: overflow,
        maxLines: maxLines,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        locale: locale,
      );
    } else {
      // If no style was defined, use a default size
      return Text(
        data ?? '',
        style: TextStyle(fontSize: 12.0 * scaleFactor),
        textAlign: textAlign,
        softWrap: softWrap,
        overflow: overflow,
        maxLines: maxLines,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        locale: locale,
      );
    }
  }
}

class DietPlanScreen extends StatefulWidget {
  const DietPlanScreen({Key? key}) : super(key: key);

  @override
  State<DietPlanScreen> createState() => _DietPlanScreenState();
}

class _DietPlanScreenState extends State<DietPlanScreen> {
  int _selectedDayIndex = 0; // Will be set to current day in initState
  bool _isLoading = true;
  bool _hasError = false;
  String _errorMessage = '';
  MealPlan? _mealPlan;
  FirestoreService? _firestoreService;
  bool _isFirebaseInitialized = false;

  final List<String> _daysOfWeek = [
    'T.2', 'T.3', 'T.4', 'T.5', 'T.6', 'T.7', 'CN'
  ];

  final List<String> _englishDays = [
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
  ];

  // Stream subscription ƒë·ªÉ l·∫Øng nghe thay ƒë·ªïi t·ª´ Firestore
  StreamSubscription<Map<String, dynamic>>? _mealPlanSubscription;

  // Stream subscription ƒë·ªÉ l·∫Øng nghe thay ƒë·ªïi t·ª´ UserDataProvider
  StreamSubscription? _userDataSubscription;

  // L∆∞u tr·ªØ s·ªë tu·∫ßn hi·ªán t·∫°i ƒë·ªÉ so s√°nh khi c·∫ßn t·∫°o m·ªõi k·∫ø ho·∫°ch
  int? _currentWeekNumber;

  // L∆∞u tr·ªØ th·ªùi ƒëi·ªÉm c·∫≠p nh·∫≠t k·∫ø ho·∫°ch ƒÉn m·ªõi nh·∫•t
  DateTime? _lastMealPlanUpdateTime;
  bool _isGeneratingPlanInProgress = false; // Th√™m bi·∫øn ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh t·∫°o k·∫ø ho·∫°ch

  @override
  void initState() {
    super.initState();

    // L·∫•y ng√†y hi·ªán t·∫°i v√† c·∫≠p nh·∫≠t selected day index
    final currentDay = DateTime.now().weekday; // 1 = Monday, 7 = Sunday
    _selectedDayIndex = currentDay - 1; // Chuy·ªÉn sang index 0-6

    // L∆∞u tr·ªØ s·ªë tu·∫ßn hi·ªán t·∫°i
    final now = DateTime.now();
    _currentWeekNumber = _getWeekNumber(now);

    // Ki·ªÉm tra bi·∫øn t·ª´ main.dart
    if (main_app.isFirebaseInitialized) {
      _isFirebaseInitialized = true;
    }

    // Kh·ªüi t·∫°o Firebase v√† c√°c service tr∆∞·ªõc
    _initializeFirebaseServices();

    // L·∫Øng nghe thay ƒë·ªïi d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t k·∫ø ho·∫°ch ƒÉn
    _listenToUserDataChanges();
  }

  @override
  void dispose() {
    // H·ªßy c√°c subscription khi widget b·ªã h·ªßy
    _mealPlanSubscription?.cancel();
    _userDataSubscription?.cancel();
    super.dispose();
  }

  // H√†m kh·ªüi t·∫°o Firebase services
  Future<void> _initializeFirebaseServices() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });

    try {
      // Ki·ªÉm tra n·∫øu Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
      Firebase.app();

      // Kh·ªüi t·∫°o FirestoreService
      _firestoreService = FirestoreService();
      _isFirebaseInitialized = true;

      // Thi·∫øt l·∫≠p listener cho d·ªØ li·ªáu realtime
      _listenToMealPlanChanges();

      // Ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
      _loadUserProfile();
      _loadMealPlan();
    } catch (e) {
      // Log l·ªói chi ti·∫øt
      _logFirebaseError(e);

      // Th·ª≠ kh·ªüi t·∫°o Firebase v·ªõi options t∆∞·ªùng minh
      try {
        // Th·ª≠ kh·ªüi t·∫°o Firebase v·ªõi options t∆∞·ªùng minh

        // T·∫°o Firebase options t∆∞·ªùng minh
        const androidApiKey = 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0'; // Thay th·∫ø b·∫±ng API key th·ª±c
        const projectId = 'openfood-test';  // Thay th·∫ø b·∫±ng project ID th·ª±c
        const messagingSenderId = '622073990105';  // Thay th·∫ø b·∫±ng sender ID th·ª±c
        const appId = '1:622073990105:android:7ca0800c7e00e32ec4909d';  // Thay th·∫ø b·∫±ng App ID th·ª±c

        // L·∫•y package name th·ª±c t·∫ø
        final packageName = await _getPackageName();

        // T·∫°o options
        final options = FirebaseOptions(
          apiKey: androidApiKey,
          appId: appId,
          messagingSenderId: messagingSenderId,
          projectId: projectId,
        );

        // Th·ª≠ kh·ªüi t·∫°o Firebase v·ªõi options
        await Firebase.initializeApp(options: options);

        // G√°n bi·∫øn to√†n c·ª•c
        main_app.isFirebaseInitialized = true;
        _isFirebaseInitialized = true;

        // Kh·ªüi t·∫°o FirestoreService
        _firestoreService = FirestoreService();

        // Thi·∫øt l·∫≠p listener cho d·ªØ li·ªáu realtime
        _listenToMealPlanChanges();

        // Ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
        _loadUserProfile();
        _loadMealPlan();

        return;
      } catch (initError) {
        // Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase v·ªõi options
        _logFirebaseError(initError);

        // Th·ª≠ kh·ªüi t·∫°o kh√¥ng c·∫ßn options
        try {
          // Th·ª≠ kh·ªüi t·∫°o Firebase kh√¥ng c·∫ßn options
          await Firebase.initializeApp();

          // G√°n bi·∫øn to√†n c·ª•c
          main_app.isFirebaseInitialized = true;
          _isFirebaseInitialized = true;

          // Kh·ªüi t·∫°o FirestoreService
          _firestoreService = FirestoreService();

          // Thi·∫øt l·∫≠p listener cho d·ªØ li·ªáu realtime
          _listenToMealPlanChanges();

          // Ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
          _loadUserProfile();
          _loadMealPlan();

          return;
        } catch (noOptionsError) {
          // Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase kh√¥ng c·∫ßn options
          _logFirebaseError(noOptionsError);
        }
      }
      // T·∫£i mock data khi Firebase kh√¥ng kh·∫£ d·ª•ng
      _loadMockData();
    }
  }

  // Ghi log l·ªói Firebase chi ti·∫øt
  void _logFirebaseError(dynamic error) {
    try {
      final errorString = error.toString();
      final stackTrace = StackTrace.current.toString();

      // Ghi nh·∫≠n l·ªói Firebase (silent logging)

      // L·∫•y th√¥ng tin thi·∫øt b·ªã v√† ·ª©ng d·ª•ng
      _getPackageName().then((packageName) {
        // End of Firebase error logging
      });

      // Trong th·ª±c t·∫ø b·∫°n c√≥ th·ªÉ l∆∞u log v√†o file ho·∫∑c g·ª≠i l√™n server
    } catch (e) {
      // Handling log error failure silently
    }
  }

  // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Firestore
  Future<void> _loadUserProfile() async {
    if (!_isFirebaseInitialized || _firestoreService == null) {
      // B·ªè qua _loadUserProfile v√¨ Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
      return;
    }

    try {
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);

      // T·∫£i d·ªØ li·ªáu t·ª´ Firestore
      await userDataProvider.
      loadFromFirestore();

      // ƒê·ªìng b·ªô v·ªõi API n·∫øu ƒë∆∞·ª£c b·∫≠t
      if (userDataProvider.syncEnabled) {
        userDataProvider.sendToApi();
      }
    } catch (e) {
      // L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng (silent logging)
    }
  }

  // H√†m l·∫Øng nghe thay ƒë·ªïi k·∫ø ho·∫°ch ƒÉn realtime t·ª´ Firestore
  void _listenToMealPlanChanges() {
    // H·ªßy subscription hi·ªán t·∫°i n·∫øu c√≥
    _mealPlanSubscription?.cancel();

    if (!_isFirebaseInitialized || _firestoreService == null) {
      // Kh√¥ng th·ªÉ l·∫Øng nghe thay ƒë·ªïi v√¨ Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
      return;
    }

    try {
      // B·∫Øt ƒë·∫ßu l·∫Øng nghe thay ƒë·ªïi k·∫ø ho·∫°ch ƒÉn t·ª´ Firestore

      // ƒêƒÉng k√Ω l·∫Øng nghe thay ƒë·ªïi t·ª´ Firestore
      _mealPlanSubscription = _firestoreService!.streamWeeklyMealPlan().listen(
        (mealPlanData) {
          if (!mounted) return;

          if (mealPlanData.isNotEmpty) {
            print('‚úÖ Nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t k·∫ø ho·∫°ch ƒÉn t·ª´ Firestore (realtime)');
            setState(() {
              _mealPlan = MealPlan.fromJson(mealPlanData);
              _isLoading = false;
              _hasError = false;
            });
          }
        },
        onError: (error) {
          print('‚ùå L·ªói khi l·∫Øng nghe thay ƒë·ªïi: $error');
        }
      );
    } catch (e) {
      print('‚ùå L·ªói khi thi·∫øt l·∫≠p listener: $e');
    }
  }

  // T·∫£i k·∫ø ho·∫°ch ƒÉn t·ª´ Firebase
  Future<void> _loadMealPlan() async {
    if (!_isFirebaseInitialized || _firestoreService == null) {
      print('‚ö†Ô∏è Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, chuy·ªÉn sang d√πng mock data');
      _loadMockData();
      return;
    }

    // B·∫Øt ƒë·∫ßu loading n·∫øu ch∆∞a loading
    if (!_isLoading) {
      setState(() {
        _isLoading = true;
        _hasError = false;
        _errorMessage = '';
      });
    }

    // Ki·ªÉm tra c·ªù useDirectFirestore
    final useDirectFirestore = app_config.useDirectFirestore;
    print('üîç Ki·ªÉm tra useDirectFirestore: $useDirectFirestore');

    try {
      // Ki·ªÉm tra x√°c th·ª±c
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated || FirebaseAuth.instance.currentUser?.isAnonymous == true) {
        // Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, d·ª´ng loading v√† return
        if (mounted) {
          setState(() {
            _isLoading = false;
            _hasError = false;
          });
        }
        return;
      }

      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) {
        // Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng, d·ª´ng loading v√† return
        if (mounted) {
          setState(() {
            _isLoading = false;
            _hasError = false;
          });
        }
        return;
      }

      print('üîç ƒêang t√¨m ki·∫øm k·∫ø ho·∫°ch ƒÉn cho ng∆∞·ªùi d√πng: $userId');

      // ƒê·ªçc d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
      final latestDocSnapshot = await FirebaseFirestore.instance
          .collection('latest_meal_plans')
          .doc(userId)
          .get();

      if (latestDocSnapshot.exists && latestDocSnapshot.data() != null) {
        // ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu trong latest_meal_plans
        final result = latestDocSnapshot.data()!;
        print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch tr·ª±c ti·∫øp t·ª´ latest_meal_plans');

        if (mounted) {
          setState(() {
            _mealPlan = MealPlan.fromJson(result);
            _isLoading = false;
            _hasError = false;
          });

          // Ki·ªÉm tra v√† t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi n·∫øu ƒë√£ sang tu·∫ßn m·ªõi
          await _checkAndGenerateForNewWeek();
        }
        return; // ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu, kh√¥ng c·∫ßn ki·ªÉm tra th√™m
      }

      // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
      print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans, ki·ªÉm tra meal_plans');
      final docSnapshot = await FirebaseFirestore.instance
          .collection('meal_plans')
          .doc(userId)
          .get();

      if (docSnapshot.exists && docSnapshot.data() != null) {
        // ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu trong meal_plans
        final result = docSnapshot.data()!;
        print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch tr·ª±c ti·∫øp t·ª´ meal_plans');

        if (mounted) {
          setState(() {
            _mealPlan = MealPlan.fromJson(result);
            _isLoading = false;
            _hasError = false;
          });
        }
      } else {
        // Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu, c·∫ßn t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong Firestore, t·∫°o m·ªõi');

        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o m·ªõi
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi...'),
              duration: Duration(seconds: 2),
            ),
          );
        }

        // L·∫•y m·ª•c ti√™u dinh d∆∞·ª°ng t·ª´ d·ªØ li·ªáu ng∆∞·ªùi d√πng
        final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
        
        // Get nutrition targets using the utility class
        final nutritionTargets = NutritionCalculator.calculateNutritionTargets(userDataProvider);
        
        final caloriesTarget = nutritionTargets['calories']!.round();
        final proteinTarget = nutritionTargets['protein']!.round();
        final fatTarget = nutritionTargets['fat']!.round();
        final carbsTarget = nutritionTargets['carbs']!.round();

        try {
          if (useDirectFirestore) {
            try {
              // S·ª≠ d·ª•ng MealPlanProvider ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
              print('üîÑ S·ª≠ d·ª•ng MealPlanProvider ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi (useDirectFirestore=true)');
              final mealPlanProvider = Provider.of<MealPlanProvider>(context, listen: false);

              // L·∫•y c·ªù isLoading hi·ªán t·∫°i c·ªßa provider
              bool wasLoading = mealPlanProvider.isLoading;

              await mealPlanProvider.generateWeeklyMealPlan(
                userId: userId,
                caloriesGoal: caloriesTarget.toDouble(),
                proteinGoal: proteinTarget.toDouble(),
                fatGoal: fatTarget.toDouble(),
                carbsGoal: carbsTarget.toDouble(),
              );

              // Ki·ªÉm tra n·∫øu provider ƒë√£ t·ª´ loading sang kh√¥ng loading
              // t·ª©c l√† ƒë√£ ho√†n th√†nh vi·ªác t·∫°o k·∫ø ho·∫°ch
              if (wasLoading && !mealPlanProvider.isLoading) {
                print('üîî Provider ƒë√£ ho√†n th√†nh vi·ªác t·∫°o k·∫ø ho·∫°ch');
              }

              // N·∫øu MealPlanProvider ƒë√£ t·∫°o k·∫ø ho·∫°ch ƒÉn, s·ª≠ d·ª•ng k·∫ø ho·∫°ch ƒë√≥
              if (mealPlanProvider.currentMealPlan != null) {
                print('‚úÖ ƒê√£ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi t·ª´ MealPlanProvider');
                setState(() {
                  _mealPlan = mealPlanProvider.currentMealPlan;
                  _isLoading = false;
                  _hasError = false;
                });
                return;
              } else {
                print('‚ö†Ô∏è MealPlanProvider kh√¥ng t·∫°o ƒë∆∞·ª£c k·∫ø ho·∫°ch ƒÉn, th·ª≠ ph∆∞∆°ng ph√°p tr·ª±c ti·∫øp');
              }
            } catch (providerError) {
              print('‚ùå L·ªói khi s·ª≠ d·ª•ng MealPlanProvider: $providerError');
            }
          }

          // N·∫øu kh√¥ng s·ª≠ d·ª•ng useDirectFirestore ho·∫∑c MealPlanProvider th·∫•t b·∫°i, g·ªçi API tr·ª±c ti·∫øp

          // Ki·ªÉm tra n·∫øu ƒëang c√≥ ti·∫øn tr√¨nh t·∫°o k·∫ø ho·∫°ch kh√°c
          if (_isGeneratingPlanInProgress) {
            print('‚ö†Ô∏è _loadMealPlan (API direct): ƒêang c√≥ m·ªôt ti·∫øn tr√¨nh t·∫°o k·∫ø ho·∫°ch kh√°c, vui l√≤ng ƒë·ª£i.');
            if (mounted && _isLoading) { // N·∫øu ƒëang loading, d·ª´ng l·∫°i
              setState(() { _isLoading = false; });
            }
            return; // Tho√°t s·ªõm
          }
          if (mounted) { // ƒê·∫∑t c·ªù n·∫øu widget c√≤n mounted
             setState(() {
               _isGeneratingPlanInProgress = true;
             });
          } else {
              print('‚ö†Ô∏è _loadMealPlan (API direct): Widget kh√¥ng c√≤n mounted, h·ªßy.');
              return;
          }
          print('üîÑ G·ªçi API tr·ª±c ti·∫øp ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');

          // T·∫°o d·ªØ li·ªáu JSON cho body
          final requestData = {
            'user_id': userId,
            'calories_target': caloriesTarget,
            'protein_target': proteinTarget,
            'fat_target': fatTarget,
            'carbs_target': carbsTarget,
            'use_ai': true,
          };

          // Th√™m t·∫•t c·∫£ th√¥ng tin t·ª´ onboarding
          // Th√™m preferences n·∫øu c√≥
          if (userDataProvider.preferences != null && userDataProvider.preferences.isNotEmpty) {
            requestData['preferences'] = userDataProvider.preferences;
          }
          
          // Th√™m allergies n·∫øu c√≥
          if (userDataProvider.allergies != null && userDataProvider.allergies.isNotEmpty) {
            requestData['allergies'] = userDataProvider.allergies;
          }
          
          // Th√™m cuisine_style n·∫øu c√≥
          if (userDataProvider.cuisineStyle != null && userDataProvider.cuisineStyle!.isNotEmpty) {
            requestData['cuisine_style'] = userDataProvider.cuisineStyle!;
          }
          
          // Th√™m diet_restrictions n·∫øu c√≥
          if (userDataProvider.dietRestrictions != null && userDataProvider.dietRestrictions.isNotEmpty) {
            requestData['diet_restrictions'] = userDataProvider.dietRestrictions;
          }
          
          // Th√™m diet_preference n·∫øu c√≥
          if (userDataProvider.dietPreference != null && userDataProvider.dietPreference.isNotEmpty) {
            requestData['diet_preference'] = userDataProvider.dietPreference;
          }
          
          // Th√™m health_conditions n·∫øu c√≥
          if (userDataProvider.healthConditions != null && userDataProvider.healthConditions.isNotEmpty) {
            requestData['health_conditions'] = userDataProvider.healthConditions;
          }
          
          // Th√™m m·ª•c ti√™u dinh d∆∞·ª°ng chi ti·∫øt n·∫øu c√≥
          if (userDataProvider.fiber_target != null) {
            requestData['fiber_target'] = userDataProvider.fiber_target!; // S·ª≠ d·ª•ng null assertion
          }
          
          if (userDataProvider.sugar_target != null) {
            requestData['sugar_target'] = userDataProvider.sugar_target!; // S·ª≠ d·ª•ng null assertion
          }
          
          if (userDataProvider.sodium_target != null) {
            requestData['sodium_target'] = userDataProvider.sodium_target!; // S·ª≠ d·ª•ng null assertion
          }

          // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/generate ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
          final headers = await ApiService.getAuthHeaders();
          final generateUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.generateMealPlan}');

          print('üîÑ ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi t·ª´ API: $generateUrl');
          print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');

          final response = await http.post(
            generateUrl,
            headers: {
              ...headers,
              'Content-Type': 'application/json',
            },
            body: jsonEncode(requestData),
          ).timeout(
            Duration(seconds: 60), // TƒÉng timeout l√™n 60 gi√¢y v√¨ t·∫°o k·∫ø ho·∫°ch ƒÉn c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian
            onTimeout: () {
              print('‚è±Ô∏è Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
              return http.Response('{"error": "Timeout"}', 408);
            },
          );

          if (response.statusCode == 200 || response.statusCode == 201) {
            print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi th√†nh c√¥ng');

            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi, ƒëang ch·ªù c·∫≠p nh·∫≠t t·ª´ Firebase...'),

                  duration: Duration(seconds: 3),
                ),
              );
            }

            // ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
            await Future.delayed(Duration(seconds: 2));

            // ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
            final latestUpdatedDoc = await FirebaseFirestore.instance
                .collection('latest_meal_plans')
                .doc(userId)
                .get();

            if (latestUpdatedDoc.exists && latestUpdatedDoc.data() != null) {
              final result = latestUpdatedDoc.data()!;
              print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans');

              if (mounted) {
                setState(() {
                  _mealPlan = MealPlan.fromJson(result);
                  _isLoading = false;
                  _hasError = false;
                });
              }
              return;
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans sau khi t·∫°o, ki·ªÉm tra meal_plans');
            final updatedDoc = await FirebaseFirestore.instance
                .collection('meal_plans')
                .doc(userId)
                .get();

            if (updatedDoc.exists && updatedDoc.data() != null) {
              final result = updatedDoc.data()!;
      if (mounted) {
        setState(() {
          _mealPlan = MealPlan.fromJson(result);
          _isLoading = false;
                  _hasError = false;
                });
              }
            } else {
              // N·∫øu v·∫´n kh√¥ng c√≥ d·ªØ li·ªáu, t·∫°o d·ªØ li·ªáu m·∫´u
              setState(() {
                _isLoading = false;
              });
              _loadMockData();
            }
          } else {
            // L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
            throw Exception('L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode}');
          }
        } catch (apiError) {
          // N·∫øu kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi qua API, t·∫°o d·ªØ li·ªáu m·∫´u
          if (mounted) {
            setState(() {
              _isLoading = false;
            });
          }
          _loadMockData();
        } finally {
          if (mounted) {
            setState(() {
              _isGeneratingPlanInProgress = false;
            });
          }
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = 'Kh√¥ng th·ªÉ t·∫£i k·∫ø ho·∫°ch ƒÉn: ${e.toString()}';
        });
        // Load d·ªØ li·ªáu m·∫´u n·∫øu c√≥ l·ªói
        _loadMockData();
      }

      // T·∫£i d·ªØ li·ªáu m·∫´u khi c√≥ l·ªói
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
      _loadMockData();
    } finally {
      if (mounted) {
        setState(() {
          _isGeneratingPlanInProgress = false;
        });
      }
    }
  }

  // Sync meal plan data with API
  Future<void> _syncMealPlanToAPI(Map<String, dynamic> mealPlanData) async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId != null) {
        final apiConnected = await ApiService.checkConnection();
        if (apiConnected) {
          // Convert Timestamp objects to ISO strings
          final convertedData = _convertFirestoreTimestamps(mealPlanData);

          // Add user ID to data
          final dataWithUserId = {
            'user_id': userId,
            ...convertedData,
            'updated_at': DateTime.now().toIso8601String(),
          };

          final success = await ApiService.sendMealPlan(dataWithUserId);
          if (success) {
            print('‚úÖ ƒê√£ ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n API');
          } else {
            print('‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n API');
          }
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n API: $e');
    }
  }

  // H√†m chuy·ªÉn ƒë·ªïi Timestamp t·ª´ Firestore sang d·∫°ng chu·ªói ISO
  Map<String, dynamic> _convertFirestoreTimestamps(Map<String, dynamic> data) {
    final result = Map<String, dynamic>.from(data);

    void convertValue(dynamic value, Function(dynamic) convert) {
      if (value is Map<String, dynamic>) {
        value.forEach((key, val) {
          value[key] = convert(val);
        });
      } else if (value is List) {
        for (int i = 0; i < value.length; i++) {
          value[i] = convert(value[i]);
        }
      }
    }

    dynamic convert(dynamic value) {
      if (value == null) {
        return null;
      } else if (value.toString().contains('Timestamp')) {
        // Chuy·ªÉn ƒë·ªïi Timestamp th√†nh chu·ªói ISO
        try {
          // N·∫øu l√† Timestamp t·ª´ Firestore
          return value.toDate().toIso8601String();
        } catch (e) {
          // N·∫øu kh√¥ng th·ªÉ convert, tr·∫£ v·ªÅ chu·ªói
          return value.toString();
        }
      } else if (value is Map) {
        convertValue(value, convert);
      } else if (value is List) {
        convertValue(value, convert);
      }
      return value;
    }

    result.forEach((key, value) {
      result[key] = convert(value);
    });

    return result;
  }

  // ƒê·ªìng b·ªô d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn v·ªõi Firestore
  Future<void> _syncMealPlanData(Map<String, dynamic> mealPlanData) async {
    if (!_isFirebaseInitialized || _firestoreService == null) {
      print('‚ö†Ô∏è B·ªè qua _syncMealPlanData v√¨ Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      return;
    }

    // Try API sync first
    await _syncMealPlanToAPI(mealPlanData);

    // Backup to Firestore
    try {
      await _firestoreService!.updateMealPlan(mealPlanData);
      print('‚úÖ ƒê√£ ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n Firestore (backup)');
    } catch (e) {
      print('‚ùå L·ªói khi ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n Firestore: $e');
    }
  }

  // Load mock data when Firebase is not available
  Future<void> _loadMockData() async {
    try {
      final mockResult = await MealPlanApiService.getMockMealPlan();
      if (mounted) {
        setState(() {
          _mealPlan = MealPlan.fromJson(mockResult);
          _isLoading = false;
        });
      }
    } catch (mockError) {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu m·∫´u: $mockError';
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // Apply a custom text scale factor to make all text smaller
    return MediaQuery(
      data: MediaQuery.of(context).copyWith(
        textScaleFactor: 1.0, // Use default text size scaling
      ),
      child: Scaffold(
        appBar: AppBar(
          title: Row(
            children: [
              Container(
                width: 24,
                height: 24,
                decoration: BoxDecoration(
                  color: DietPlanColors.accent,
                  shape: BoxShape.circle,
                ),
                child: Icon(
                  Icons.restaurant,
                  color: Colors.white,
                  size: 14,
                ),
              ),
              SizedBox(width: 8),
              Text(
                'DietAI',
                style: TextStyle(
                  color: DietPlanColors.textPrimary,
                  fontWeight: FontWeight.w600,
                  fontSize: 18,
                ),
              ),
            ],
          ),
          backgroundColor: Colors.white,
          elevation: 0,
          automaticallyImplyLeading: false,
          actions: [
            IconButton(
              icon: Icon(
                Icons.shopping_cart_outlined,
                color: DietPlanColors.textSecondary,
              ),
              onPressed: () {
                Navigator.pushNamed(context, '/grocery-list');
              },
              tooltip: 'Danh s√°ch mua s·∫Øm',
            ),
            AuthHelper.requireAuthWrapper(
              context: context,
              onTap: _performGenerateNewMealPlan,
              feature: 't·∫°o k·∫ø ho·∫°ch ƒÉn',
              title: 'T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi',
              message: 'M·ªùi b·∫°n ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£i nghi·ªám t√≠nh nƒÉng t·∫°o k·∫ø ho·∫°ch ƒÉn c√° nh√¢n h√≥a b·∫±ng AI',
              child: IconButton(
                icon: Icon(
                  Icons.refresh,
                  color: DietPlanColors.textSecondary,
                ),
                onPressed: () {}, // onPressed s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi wrapper
                tooltip: 'T·∫°o k·∫ø ho·∫°ch m·ªõi',
              ),
            ),
          ],
        ),
        body: Container(
          color: DietPlanColors.background,
          child: SafeArea(
            child: _isLoading
                ? _buildLoadingState()
                : _hasError
                    ? _buildErrorState()
                    : _buildBody(),
          ),
        ),

      ),
    );
  }

  Widget _buildErrorState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, color: DietPlanColors.error, size: 60),
          SizedBox(height: 16),
          Text(
            'L·ªói: $_errorMessage',
            textAlign: TextAlign.center,
            style: TextStyle(fontSize: 16, color: DietPlanColors.error),
          ),
          SizedBox(height: 20),
          ElevatedButton.icon(
            icon: Icon(Icons.refresh),
            label: Text('Th·ª≠ l·∫°i'),
            onPressed: () {
              setState(() {
                _isLoading = true;
                _hasError = false;
                _errorMessage = '';
              });
              _initializeFirebaseServices(); // Ho·∫∑c _loadMealPlan() t√πy theo logic
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: DietPlanColors.primary,
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(30),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoginPrompt() {
    return Center(
      child: Padding(
        padding: EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                color: DietPlanColors.primaryLight,
                shape: BoxShape.circle,
              ),
              child: Icon(
                Icons.restaurant_menu,
                size: 40,
                color: DietPlanColors.primary,
              ),
            ),
            SizedBox(height: 24),
            Text(
              'K·∫ø ho·∫°ch ƒÉn c√° nh√¢n h√≥a',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: DietPlanColors.textPrimary,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 12),
            Text(
              'M·ªùi b·∫°n ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£i nghi·ªám t√≠nh nƒÉng t·∫°o k·∫ø ho·∫°ch ƒÉn c√° nh√¢n h√≥a b·∫±ng AI',
              style: TextStyle(
                fontSize: 16,
                color: DietPlanColors.textSecondary,
                height: 1.5,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 32),
            ElevatedButton.icon(
              icon: Icon(Icons.login, size: 20),
              label: Text('ƒêƒÉng nh·∫≠p ngay', style: TextStyle(fontSize: 16)),
              onPressed: () {
                Navigator.pushNamed(context, '/auth');
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: DietPlanColors.primary,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                elevation: 2,
              ),
            ),
            SizedBox(height: 16),
            TextButton(
              onPressed: () {
                // Hi·ªÉn th·ªã mock data ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ xem tr∆∞·ªõc
                _loadMockData();
              },
              child: Text(
                'Xem tr∆∞·ªõc k·∫ø ho·∫°ch m·∫´u',
                style: TextStyle(
                  color: DietPlanColors.textSecondary,
                  fontSize: 14,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(),
          SizedBox(height: 16),
          Text('ƒêang t·∫£i k·∫ø ho·∫°ch th·ª±c ƒë∆°n...'),
        ],
      ),
    );
  }

  Widget _buildBody() {
    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p tr∆∞·ªõc
    final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
    if (!authProvider.isAuthenticated || FirebaseAuth.instance.currentUser?.isAnonymous == true) {
      return _buildLoginPrompt();
    }

    if (_mealPlan == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch th·ª±c ƒë∆°n'),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _generateNewMealPlan,
              style: ElevatedButton.styleFrom(
                backgroundColor: DietPlanColors.primary,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: Text('T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi', style: TextStyle(fontSize: 16)),
            ),
          ],
        ),
      );
    }

    // Debug - in th√¥ng tin v·ªÅ k·∫ø ho·∫°ch ƒÉn
    print('üçΩÔ∏è MealPlan.weeklyPlan c√≥ ${_mealPlan!.weeklyPlan.length} ng√†y');
    print('üçΩÔ∏è C√°c ng√†y c√≥ trong k·∫ø ho·∫°ch: ${_mealPlan!.weeklyPlan.keys.toList()}');

    final selectedDayName = _englishDays[_selectedDayIndex];
    print('üçΩÔ∏è Ng√†y ƒë√£ ch·ªçn: $selectedDayName');

    final dayPlan = _mealPlan!.weeklyPlan[selectedDayName];

    if (dayPlan == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë√£ ch·ªçn'),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _generateNewMealPlan,
              style: ElevatedButton.styleFrom(
                backgroundColor: DietPlanColors.primary,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: Text('T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi'),
            ),
          ],
        ),
      );
    }

    // Get total nutrition values for the day
    final totalCalories = dayPlan.nutritionSummary['calories']?.round() ?? 0;
    final totalProtein = dayPlan.nutritionSummary['protein']?.round() ?? 0;
    final totalFat = dayPlan.nutritionSummary['fat']?.round() ?? 0;
    final totalCarbs = dayPlan.nutritionSummary['carbs']?.round() ?? 0;

    return Column(
      children: [
        Expanded(
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildDayTabs(),
                // Subtitle with user goal
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'Gi·∫£m c√¢n c√¢n b·∫±ng cho T√∫',
                        style: TextStyle(
                          fontSize: 14,
                          color: DietPlanColors.textSecondary,
                          fontWeight: FontWeight.w400,
                        ),
                      ),
                      GestureDetector(
                        onTap: _replaceDayMealPlan,
                        child: Container(
                          padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: BoxDecoration(
                            color: DietPlanColors.primary,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.refresh, size: 12, color: Colors.white),
                              SizedBox(width: 4),
                              Text(
                                'AI Thay Th·∫ø Ng√†y',
                                style: TextStyle(
                                  fontSize: 10,
                                  color: Colors.white,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                _buildNutritionSummary(
                  calories: totalCalories,
                  protein: totalProtein,
                  fat: totalFat,
                  carbs: totalCarbs,
                ),

                // Build each meal type
                ...dayPlan.meals.entries.map((entry) {
                  final mealType = entry.key;
                  final meals = entry.value;

                  if (meals.isEmpty) return SizedBox.shrink();

                  IconData mealIcon;
                  switch (mealType) {
                    case 'B·ªØa s√°ng':
                      mealIcon = Icons.wb_sunny_outlined;
                      break;
                    case 'B·ªØa tr∆∞a':
                      mealIcon = Icons.cloud_outlined;
                      break;
                    case 'B·ªØa t·ªëi':
                      mealIcon = Icons.nights_stay_outlined;
                      break;
                    default:
                      mealIcon = Icons.access_time;
                  }

                  // Use the first meal in the list for this meal type
                  final meal = meals.first;

                  return _buildMealSection(context, mealType, meal);
                }).toList(),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildDayTabs() {
    return Container(
      height: 40, // Reduced from 50
      margin: EdgeInsets.symmetric(vertical: 6), // Reduced from 8
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _daysOfWeek.length,
        padding: EdgeInsets.symmetric(horizontal: 8),
        itemBuilder: (context, index) {
          final isSelected = index == _selectedDayIndex;
          return GestureDetector(
            onTap: () {
              setState(() {
                _selectedDayIndex = index;
              });
            },
            child: Container(
              width: 50, // Reduced from 70
              margin: EdgeInsets.symmetric(horizontal: 3), // Reduced from 4
              decoration: BoxDecoration(
                color: isSelected ? DietPlanColors.primaryLight : Colors.transparent,
                borderRadius: BorderRadius.circular(15), // Adjusted for smaller size
                border: isSelected
                    ? Border.all(color: DietPlanColors.primary, width: 1.5)
                    : null,
              ),
              child: Center(
                child: Text(
                  _daysOfWeek[index],
                  style: TextStyle(
                    fontSize: 13, // Reduced from 14
                    color: isSelected ? DietPlanColors.primary : DietPlanColors.textSecondary,
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildNutritionSummary({
    required int calories,
    required int protein,
    required int fat,
    required int carbs,
  }) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: EdgeInsets.symmetric(vertical: 16, horizontal: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildNutrientItem(
            icon: Icons.local_fire_department,
            color: Colors.red,
            value: '${calories}kcal',
            unit: 'Calo',
          ),
          _buildNutrientItem(
            icon: Icons.water_drop,
            color: Colors.blue,
            value: '${protein}g',
            unit: 'Protein',
          ),
          _buildNutrientItem(
            icon: Icons.circle,
            color: Colors.orange,
            value: '${fat}g',
            unit: 'Ch·∫•t b√©o',
          ),
          _buildNutrientItem(
            icon: Icons.eco,
            color: Colors.green,
            value: '${carbs}g',
            unit: 'Carbs',
          ),
        ],
      ),
    );
  }

  Widget _buildNutrientItem({
    required IconData icon,
    required Color color,
    required String value,
    required String unit,
  }) {
    return Column(
      children: [
        Icon(icon, color: color, size: 20),
        SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.bold,
            color: DietPlanColors.textPrimary,
          ),
        ),
        Text(
          unit,
          style: TextStyle(
            fontSize: 11,
            color: DietPlanColors.textSecondary,
          ),
        ),
      ],
    );
  }

  Widget _buildMealSection(BuildContext context, String title, Meal meal) {
    final mealColor = _getMealColor(title);

    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header v·ªõi icon v√† t√™n b·ªØa ƒÉn
          _buildMealHeader(title, mealColor),

          // Meal detail
          MealDetailCard(
            meal: meal,
            mealType: title,
            dayOfWeek: _englishDays[_selectedDayIndex],
            onReplace: () {
              _replaceMeal(title);
            },
            onLog: () {
              _addMealToFoodLog(meal, title);
            },
            hideTitle: true,
          ),
        ],
      ),
    );
  }

  Widget _buildMealHeader(String title, Color color) {
    Meal? currentMeal = _getCurrentMealByType(title);

    // Get meal icon based on meal type
    IconData mealIcon;
    switch (title) {
      case 'B·ªØa s√°ng':
        mealIcon = Icons.wb_sunny;
        break;
      case 'B·ªØa tr∆∞a':
        mealIcon = Icons.wb_cloudy;
        break;
      case 'B·ªØa t·ªëi':
        mealIcon = Icons.nights_stay;
        break;
      default:
        mealIcon = Icons.restaurant;
    }

    if (currentMeal == null) {
      return Container(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            Icon(mealIcon, size: 20, color: color),
            SizedBox(width: 8),
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
                color: DietPlanColors.textPrimary,
              ),
            ),
          ],
        ),
      );
    }

    return Container(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Meal type and name
          Row(
            children: [
              Icon(mealIcon, size: 20, color: color),
              SizedBox(width: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: DietPlanColors.textPrimary,
                ),
              ),
            ],
          ),
          SizedBox(height: 8),

          // Nutrition summary row
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildMealNutrient(
                Icons.local_fire_department,
                '${currentMeal.nutrition['calories']}kcal',
                '',
                Colors.red
              ),
              _buildMealNutrient(
                Icons.water_drop,
                '${currentMeal.nutrition['protein']}g',
                '',
                Colors.blue
              ),
              _buildMealNutrient(
                Icons.circle,
                '${currentMeal.nutrition['fat']}g',
                '',
                Colors.orange
              ),
              _buildMealNutrient(
                Icons.eco,
                '${currentMeal.nutrition['carbs']}g',
                '',
                Colors.green
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMealNutrient(IconData icon, String value, String unit, Color color) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          icon,
          size: 12,
          color: color,
        ),
        SizedBox(width: 4),
        Text(
          value,
          style: TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w500,
            color: color,
          ),
        ),
        if (unit.isNotEmpty) ...[
          SizedBox(width: 2),
          Text(
            unit,
            style: TextStyle(
              fontSize: 10,
              color: color.withOpacity(0.8),
            ),
          ),
        ],
      ],
    );
  }

  // Handle replacing a meal
  Future<void> _replaceMeal(String mealType) async {
    final snackBar = SnackBar(
      content: Text('ƒêang thay th·∫ø $mealType...'),
      duration: Duration(seconds: 1),
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);

    try {
      // Check if we're authenticated
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      // Get selected day
      final selectedDay = _englishDays[_selectedDayIndex];
      final selectedDayName = _convertToAPIDay(selectedDay);

      // Get user nutrition goals using the utility class
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final nutritionTargets = NutritionCalculator.calculateNutritionTargets(userDataProvider);
      
      // Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã sang double (ƒë√£ l√† double t·ª´ NutritionCalculator)
      final caloriesTarget = nutritionTargets['calories']!.round();
      final proteinTarget = nutritionTargets['protein']!.round();
      final fatTarget = nutritionTargets['fat']!.round();
      final carbsTarget = nutritionTargets['carbs']!.round();

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }

      // User preferences
      final preferences = userDataProvider.preferences;
      final allergies = userDataProvider.allergies;
      final cuisineStyle = userDataProvider.cuisineStyle;

      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒêang g·ª≠i y√™u c·∫ßu thay th·∫ø $mealType ƒë·∫øn server...'),
          backgroundColor: DietPlanColors.warning,
          duration: Duration(seconds: 5),
        ),
      );

      // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/replace-meal ƒë·ªÉ thay th·∫ø b·ªØa ƒÉn
      final headers = await ApiService.getAuthHeaders();
      final replaceUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.replaceMeal}');

      // T·∫°o d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng cho API
      // ƒê·∫∑t c√°c gi√° tr·ªã dinh d∆∞·ª°ng ·ªü c·∫•p cao nh·∫•t theo y√™u c·∫ßu c·ªßa API
      final requestData = {
        'user_id': userId,
        'day_of_week': selectedDayName,
        'meal_type': mealType,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': true,
      };

      // In ra th√¥ng tin debug v·ªÅ c√°c gi√° tr·ªã dinh d∆∞·ª°ng
      print('üìä Gi√° tr·ªã dinh d∆∞·ª°ng g·ª≠i ƒë·∫øn API:');
      print('üìä calories_target: $caloriesTarget (${caloriesTarget.runtimeType})');
      print('üìä protein_target: $proteinTarget (${proteinTarget.runtimeType})');
      print('üìä fat_target: $fatTarget (${fatTarget.runtimeType})');
      print('üìä carbs_target: $carbsTarget (${carbsTarget.runtimeType})');

      // Th√™m preferences d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (preferences != null && preferences.isNotEmpty) {
        requestData['preferences'] = preferences;
      }

      // Th√™m allergies d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (allergies != null && allergies.isNotEmpty) {
        requestData['allergies'] = allergies;
      }

      // Th√™m cuisine_style n·∫øu c√≥
      if (cuisineStyle != null && cuisineStyle!.isNotEmpty) {
        requestData['cuisine_style'] = cuisineStyle!;
      }
      
      // Th√™m diet_restrictions n·∫øu c√≥
      if (userDataProvider.dietRestrictions != null && userDataProvider.dietRestrictions.isNotEmpty) {
        requestData['diet_restrictions'] = userDataProvider.dietRestrictions;
      }
      
      // Th√™m diet_preference n·∫øu c√≥
      if (userDataProvider.dietPreference != null && userDataProvider.dietPreference.isNotEmpty) {
        requestData['diet_preference'] = userDataProvider.dietPreference;
      }
      
      // Th√™m health_conditions n·∫øu c√≥
      if (userDataProvider.healthConditions != null && userDataProvider.healthConditions.isNotEmpty) {
        requestData['health_conditions'] = userDataProvider.healthConditions;
      }
      
      // Th√™m m·ª•c ti√™u dinh d∆∞·ª°ng chi ti·∫øt n·∫øu c√≥
      if (userDataProvider.fiber_target != null) {
        requestData['fiber_target'] = userDataProvider.fiber_target!; // S·ª≠ d·ª•ng null assertion
      }
      
      if (userDataProvider.sugar_target != null) {
        requestData['sugar_target'] = userDataProvider.sugar_target!; // S·ª≠ d·ª•ng null assertion
      }
      
      if (userDataProvider.sodium_target != null) {
        requestData['sodium_target'] = userDataProvider.sodium_target!; // S·ª≠ d·ª•ng null assertion
      }

      print('üîÑ ƒêang thay th·∫ø b·ªØa ƒÉn t·ª´ API: $replaceUrl');
      print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');

      try {
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang k·∫øt n·ªëi
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒêang k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß...'),
            backgroundColor: DietPlanColors.primary,
            duration: Duration(seconds: 2),
          ),
        );

        final response = await http.post(
          replaceUrl,
          headers: {
            ...headers,
            'Content-Type': 'application/json',
          },
          body: jsonEncode(requestData),
        ).timeout(
          Duration(seconds: 60),  // TƒÉng timeout l√™n 60 gi√¢y
          onTimeout: () {
            print('‚è±Ô∏è Timeout khi thay th·∫ø b·ªØa ƒÉn');
            return http.Response('{"error": "Timeout"}', 408);
          },
        );

        // In ra to√†n b·ªô th√¥ng tin v·ªÅ response
        print('üîç Response status: ${response.statusCode}');
        print('üîç Response body: ${response.body}');
        print('üîç Response headers: ${response.headers}');

        if (response.statusCode == 200) {
        print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu thay th·∫ø b·ªØa ƒÉn th√†nh c√¥ng');

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒê√£ g·ª≠i y√™u c·∫ßu thay th·∫ø $mealType, ƒëang ƒë·ª£i c·∫≠p nh·∫≠t t·ª´ Firebase...'),
            backgroundColor: Colors.blue,
            duration: Duration(seconds: 3),
          ),
        );

          // ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
          await Future.delayed(Duration(seconds: 2));

          // ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
          final latestDocSnapshot = await FirebaseFirestore.instance
              .collection('latest_meal_plans')
              .doc(userId)
              .get();

          if (latestDocSnapshot.exists && latestDocSnapshot.data() != null) {
            final result = latestDocSnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch ƒÉn c·∫≠p nh·∫≠t t·ª´ latest_meal_plans');

            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });

            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('ƒê√£ thay th·∫ø $mealType th√†nh c√¥ng!'),
                backgroundColor: Colors.green,
                duration: Duration(seconds: 2),
              ),
            );
            return;
          }

          // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
          print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans, ki·ªÉm tra meal_plans');
          final docSnapshot = await FirebaseFirestore.instance
              .collection('meal_plans')
              .doc(userId)
              .get();

          if (docSnapshot.exists && docSnapshot.data() != null) {
            final result = docSnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch ƒÉn c·∫≠p nh·∫≠t t·ª´ meal_plans');

            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });

              // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ thay th·∫ø $mealType th√†nh c√¥ng!'),
                  backgroundColor: Colors.green,
                duration: Duration(seconds: 2),
              ),
            );
          } else {
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫≠p nh·∫≠t trong Firestore');
            throw Exception('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫≠p nh·∫≠t trong Firestore');
          }
        } else if (response.statusCode == 422) {
          // L·ªói d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
          print('‚ùå L·ªói 422 - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${response.body}');

          // Ph√¢n t√≠ch l·ªói chi ti·∫øt
          try {
            final errorData = jsonDecode(response.body);
            print('‚ùå Chi ti·∫øt l·ªói JSON: $errorData');

            if (errorData['detail'] is List) {
              for (var error in errorData['detail']) {
                print('‚ùå L·ªói tr∆∞·ªùng: ${error['loc']}, Lo·∫°i: ${error['type']}, Th√¥ng b√°o: ${error['msg']}');
              }
            } else {
              print('‚ùå Chi ti·∫øt l·ªói: ${errorData['detail']}');
            }

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('L·ªói d·ªØ li·ªáu: ${errorData['detail']}'),
                backgroundColor: Colors.red,
                duration: Duration(seconds: 5),
              ),
            );
          } catch (e) {
            print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
          }

          throw Exception('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: Vui l√≤ng ki·ªÉm tra l·∫°i');
        } else if (response.statusCode == 404) {
          // Thay v√¨ t·ª± ƒë·ªông t·∫°o k·∫ø ho·∫°ch m·ªõi, hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
          print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn: ${response.statusCode} - ${response.body}');
          
          if (mounted) {
            bool shouldCreate = await showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: Text('Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn'),
                content: Text('K·∫ø ho·∫°ch ƒÉn hi·ªán t·∫°i kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a. B·∫°n c√≥ mu·ªën t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi cho c·∫£ tu·∫ßn kh√¥ng?'),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(false),
                    child: Text('Kh√¥ng'),
                  ),
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(true),
                    child: Text('C√≥'),
                  ),
                ],
              ),
            ) ?? false;
            
            if (shouldCreate) {
              // N·∫øu ng∆∞·ªùi d√πng ƒë·ªìng √Ω, t·∫°o k·∫ø ho·∫°ch m·ªõi
              await _generateNewMealPlan();
              
              // Sau khi t·∫°o m·ªõi, th·ª≠ thay th·∫ø b·ªØa ƒÉn l·∫°i
              print('üîÑ ƒêang th·ª≠ l·∫°i thay th·∫ø b·ªØa ƒÉn sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi...');
              
              // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o k·∫ø ho·∫°ch m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u
              await Future.delayed(Duration(seconds: 3));
              
              // G·ªçi l·∫°i API thay th·∫ø b·ªØa ƒÉn
              final retryResponse = await http.post(
                replaceUrl,
                headers: {
                  ...headers,
                  'Content-Type': 'application/json',
                },
                body: jsonEncode(requestData),
              ).timeout(
                Duration(seconds: 60),
                onTimeout: () {
                  print('‚è±Ô∏è Timeout khi thay th·∫ø b·ªØa ƒÉn (l·∫ßn th·ª≠ l·∫°i)');
                  return http.Response('{"error": "Timeout"}', 408);
                },
              );
              
              if (retryResponse.statusCode == 200) {
                print('‚úÖ ƒê√£ thay th·∫ø b·ªØa ƒÉn th√†nh c√¥ng sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi');
                
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('ƒê√£ thay th·∫ø $mealType th√†nh c√¥ng!'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 2),
                  ),
                );
                
                // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firestore
                await _loadMealPlan();
                return;
              } else {
                print('‚ùå V·∫´n kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi: ${retryResponse.statusCode}');
                throw Exception('Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi');
              }
            } else {
              // N·∫øu ng∆∞·ªùi d√πng kh√¥ng ƒë·ªìng √Ω, hi·ªÉn th·ªã th√¥ng b√°o
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn v√¨ kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn hi·ªán t·∫°i.'),
                  backgroundColor: Colors.orange,
                  duration: Duration(seconds: 3),
                ),
              );
              return; // Tho√°t kh·ªèi h√†m
            }
          }
        } else if (response.statusCode == 403) {
          // L·ªói x√°c th·ª±c
          print('‚ùå L·ªói x√°c th·ª±c: ${response.statusCode} - ${response.body}');
          throw Exception('L·ªói x√°c th·ª±c: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        } else if (response.statusCode == 500) {
          // L·ªói server
          print('‚ùå L·ªói server: ${response.statusCode} - ${response.body}');

          // Ph√¢n t√≠ch l·ªói chi ti·∫øt
          String errorMessage = 'L·ªói server';
          try {
            final errorData = jsonDecode(response.body);
            if (errorData['detail'] != null) {
              errorMessage = errorData['detail'];

              // Ki·ªÉm tra n·∫øu l√† l·ªói module 'services'
              if (errorMessage.contains("module 'services' has no attribute")) {
                errorMessage = 'L·ªói c·∫•u h√¨nh server: Thi·∫øu module x·ª≠ l√Ω b·ªØa ƒÉn';
              }
            }
          } catch (e) {
            print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
          }

          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('L·ªói server: $errorMessage\n\nƒêang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase...'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 5),
            ),
          );

          // Th·ª≠ t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase thay v√¨ b√°o l·ªói
          print('‚ö†Ô∏è G·∫∑p l·ªói server, ƒëang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase...');
          await _loadMealPlan();
          return;

          // throw Exception('L·ªói server: $errorMessage'); // Kh√¥ng throw exception n·ªØa
            } else {
          // L·ªói kh√°c
          print('‚ùå L·ªói khi thay th·∫ø b·ªØa ƒÉn: ${response.statusCode} - ${response.body}');
          throw Exception('L·ªói khi thay th·∫ø b·ªØa ƒÉn: ${response.statusCode}');
        }
      } catch (e) {
        print('‚ùå‚ùå‚ùå L·ªói khi g·ªçi API: $e');
        rethrow;
      }
    } catch (e) {
      print('L·ªói khi thay th·∫ø b·ªØa ƒÉn: $e');

      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi
      String errorMessage = 'Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn';
      Color errorColor = Colors.red;

      // Ki·ªÉm tra lo·∫°i l·ªói c·ª• th·ªÉ
      if (e.toString().contains('SocketException') ||
          e.toString().contains('Connection refused') ||
          e.toString().contains('Failed host lookup')) {
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra:\n'
            '1. K·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n\n'
            '2. M√°y ch·ªß API ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông\n'
            '3. ƒê·ªãa ch·ªâ IP trong c·∫•u h√¨nh ƒë√£ ch√≠nh x√°c';
        errorColor = Colors.orange;
      } else if (e.toString().contains('Timeout')) {
        errorMessage = 'K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° ch·∫≠m ho·∫∑c m√°y ch·ªß kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.';
        errorColor = Colors.orange;
      } else {
        errorMessage = 'Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn: ${e.toString()}';
      }

      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(errorMessage),
          backgroundColor: errorColor,
          duration: Duration(seconds: 5),
        ),
      );
    }
  }

  // H√†m chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y sang ƒë·ªãnh d·∫°ng API
  String _convertToAPIDay(String day) {
    // API s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng "Th·ª© 2", "Th·ª© 3", v.v.
    switch (day) {
      case 'Monday': return 'Th·ª© 2';
      case 'Tuesday': return 'Th·ª© 3';
      case 'Wednesday': return 'Th·ª© 4';
      case 'Thursday': return 'Th·ª© 5';
      case 'Friday': return 'Th·ª© 6';
      case 'Saturday': return 'Th·ª© 7';
      case 'Sunday': return 'Ch·ªß Nh·∫≠t';
      default: return day;
    }
  }

  // H√†m chuy·ªÉn ƒë·ªïi t·ª´ ƒë·ªãnh d·∫°ng API sang ƒë·ªãnh d·∫°ng ·ª©ng d·ª•ng
  String _convertFromAPIDay(String day) {
    // Chuy·ªÉn t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
    switch (day) {
      case 'Th·ª© 2': return 'Monday';
      case 'Th·ª© 3': return 'Tuesday';
      case 'Th·ª© 4': return 'Wednesday';
      case 'Th·ª© 5': return 'Thursday';
      case 'Th·ª© 6': return 'Friday';
      case 'Th·ª© 7': return 'Saturday';
      case 'Ch·ªß Nh·∫≠t': return 'Sunday';
      default: return day;
    }
  }

  // Handle adding the meal to food log
  void _addMealToFoodLog(Meal meal, String mealType) {
    // Hi·ªÉn th·ªã dialog ch·ªçn m√≥n ƒÉn v·ªõi hi·ªáu ·ª©ng ripple
    HapticFeedback.mediumImpact(); // Th√™m ph·∫£n h·ªìi x√∫c gi√°c n·∫øu c√≥ th·ªÉ
    
    // Hi·ªÉn th·ªã th√¥ng b√°o nh·ªè
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('M·ªü m√†n h√¨nh ghi nh·∫≠n m√≥n ƒÉn...'),
        duration: Duration(milliseconds: 500),
        backgroundColor: DietPlanColors.primary,
        behavior: SnackBarBehavior.fixed,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      )
    );
    
    // Hi·ªÉn th·ªã dialog ch·ªçn m√≥n ƒÉn
    _showDishSelectionDialog(meal, mealType);
  }

  // H√†m hi·ªÉn th·ªã dialog ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn m√≥n ƒÉn ƒë√£ ƒÉn
  void _showDishSelectionDialog(Meal meal, String mealType) {
    // T·∫°o m·ªôt map ƒë·ªÉ theo d√µi tr·∫°ng th√°i ƒë∆∞·ª£c ch·ªçn c·ªßa m·ªói m√≥n ƒÉn
    // Ban ƒë·∫ßu, t·∫•t c·∫£ c√°c m√≥n ƒë·ªÅu ƒë∆∞·ª£c ch·ªçn
    final Map<Dish, bool> selectedDishes = {};
    
    // Ki·ªÉm tra xem meal c√≥ dishes hay kh√¥ng
    if (meal.dishes.isNotEmpty) {
      for (var dish in meal.dishes) {
        selectedDishes[dish] = true;
      }
    } else {
      // N·∫øu kh√¥ng c√≥ dishes, t·∫°o m·ªôt dish t·ª´ meal
      final singleDish = Dish(
        name: meal.name,
        description: meal.description,
        nutrition: meal.nutrition,
        ingredients: meal.ingredients,
        imageUrl: meal.imageUrl,
        instructions: meal.instructions,
      );
      selectedDishes[singleDish] = true;
    }

    // S·ª≠ d·ª•ng showModalBottomSheet thay v√¨ showDialog ƒë·ªÉ hi·ªÉn th·ªã m√†n h√¨nh ƒë·∫πp h∆°n
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (dialogContext) {
        // D√πng StatefulBuilder ƒë·ªÉ dialog c√≥ th·ªÉ t·ª± c·∫≠p nh·∫≠t tr·∫°ng th√°i
        return StatefulBuilder(
          builder: (context, setDialogState) {
            return Container(
              height: MediaQuery.of(context).size.height * 0.8,
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(25),
                  topRight: Radius.circular(25),
                ),
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [DietPlanColors.primary, DietPlanColors.primaryDark],
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Header
                  Container(
                    padding: EdgeInsets.symmetric(vertical: 20, horizontal: 24),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(25),
                        topRight: Radius.circular(25),
                      ),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "X√°c nh·∫≠n c√°c m√≥n ƒë√£ ƒÉn",
                          style: TextStyle(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        SizedBox(height: 8),
                        Row(
                          children: [
                            TextButton.icon(
                              icon: Icon(Icons.check_circle_outline, color: Colors.white),
                              label: Text("Ch·ªçn t·∫•t c·∫£", style: TextStyle(color: Colors.white)),
                              onPressed: () {
                                setDialogState(() {
                                  selectedDishes.updateAll((key, value) => true);
                                });
                              },
                              style: TextButton.styleFrom(
                                backgroundColor: Colors.white.withOpacity(0.2),
                                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                              ),
                            ),
                            SizedBox(width: 12),
                            TextButton.icon(
                              icon: Icon(Icons.cancel_outlined, color: Colors.white),
                              label: Text("B·ªè ch·ªçn t·∫•t c·∫£", style: TextStyle(color: Colors.white)),
                              onPressed: () {
                                setDialogState(() {
                                  selectedDishes.updateAll((key, value) => false);
                                });
                              },
                              style: TextButton.styleFrom(
                                backgroundColor: Colors.white.withOpacity(0.2),
                                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  
                  // Danh s√°ch m√≥n ƒÉn
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(25),
                          topRight: Radius.circular(25),
                        ),
                      ),
                      child: ListView.builder(
                        padding: EdgeInsets.all(16),
                        itemCount: selectedDishes.length,
                        itemBuilder: (context, index) {
                          final dish = selectedDishes.keys.elementAt(index);
                          return Container(
                            margin: EdgeInsets.only(bottom: 12),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(16),
                              color: Colors.grey.shade50,
                              border: Border.all(
                                color: selectedDishes[dish]! ? DietPlanColors.primary.withOpacity(0.3) : DietPlanColors.secondaryLight,
                                width: 1,
                              ),
                              boxShadow: selectedDishes[dish]! 
                                ? [BoxShadow(color: DietPlanColors.primary.withOpacity(0.2), blurRadius: 8, offset: Offset(0, 2))]
                                : null,
                            ),
                            child: CheckboxListTile(
                              title: Text(
                                dish.name,
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 16,
                                  color: DietPlanColors.textPrimary,
                                ),
                              ),
                              subtitle: Text(
                                '${dish.nutrition['calories']?.round() ?? 0} kcal',
                                style: TextStyle(
                                  color: DietPlanColors.textSecondary,
                                ),
                              ),
                              secondary: Container(
                                width: 44,
                                height: 44,
                                decoration: BoxDecoration(
                                  color: DietPlanColors.primaryLight,
                                  shape: BoxShape.circle,
                                ),
                                child: Icon(
                                  Icons.restaurant,
                                  color: DietPlanColors.primary,
                                ),
                              ),
                              activeColor: DietPlanColors.primary,
                              checkColor: Colors.white,
                              value: selectedDishes[dish],
                              onChanged: (bool? value) {
                                setDialogState(() {
                                  selectedDishes[dish] = value!;
                                });
                              },
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ),
                  
                  // Buttons
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          blurRadius: 10,
                          offset: Offset(0, -5),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        Expanded(
                          child: ElevatedButton(
                            onPressed: () => Navigator.of(dialogContext).pop(),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.grey.shade200,
                              foregroundColor: Colors.black87,
                              padding: EdgeInsets.symmetric(vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              elevation: 0,
                            ),
                            child: Text("H·ªßy"),
                          ),
                        ),
                        SizedBox(width: 16),
                        Expanded(
                          child: ElevatedButton(
                            onPressed: () {
                              // X·ª≠ l√Ω logic khi ng∆∞·ªùi d√πng nh·∫•n X√°c nh·∫≠n
                              _logSelectedDishes(mealType, selectedDishes);
                              Navigator.of(dialogContext).pop(); // ƒê√≥ng dialog
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: DietPlanColors.primary,
                              foregroundColor: Colors.white,
                              padding: EdgeInsets.symmetric(vertical: 16),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              elevation: 0,
                            ),
                            child: Text("X√°c nh·∫≠n"),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  // H√†m x·ª≠ l√Ω v√† ghi log c√°c m√≥n ƒë√£ ch·ªçn
  void _logSelectedDishes(String mealType, Map<Dish, bool> selectedDishesMap) {
    // 1. L·ªçc ra danh s√°ch c√°c m√≥n ƒÉn th·ª±c s·ª± ƒë∆∞·ª£c ch·ªçn
    final List<Dish> actuallyEatenDishes = [];
    selectedDishesMap.forEach((dish, isSelected) {
      if (isSelected) {
        actuallyEatenDishes.add(dish);
      }
    });

    // N·∫øu kh√¥ng ch·ªçn m√≥n n√†o, kh√¥ng l√†m g√¨ c·∫£
    if (actuallyEatenDishes.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("B·∫°n ch∆∞a ch·ªçn m√≥n ƒÉn n√†o ƒë·ªÉ ghi l·∫°i."),
          backgroundColor: DietPlanColors.warning,
          behavior: SnackBarBehavior.fixed,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        )
      );
      return;
    }

    // 2. T√≠nh to√°n l·∫°i t·ªïng dinh d∆∞·ª°ng
    double totalCalories = 0;
    double totalProtein = 0;
    double totalFat = 0;
    double totalCarbs = 0;
    double totalFiber = 0;
    double totalSugar = 0;
    double totalSodium = 0;
    
    String finalDescription = "";
    List<FoodItem> foodItems = [];

    for (var dish in actuallyEatenDishes) {
      totalCalories += dish.nutrition['calories'] ?? 0;
      totalProtein += dish.nutrition['protein'] ?? 0;
      totalFat += dish.nutrition['fat'] ?? 0;
      totalCarbs += dish.nutrition['carbs'] ?? 0;
      totalFiber += dish.nutrition['fiber'] ?? 0;
      totalSugar += dish.nutrition['sugar'] ?? 0;
      totalSodium += dish.nutrition['sodium'] ?? 0;
      
      // Th√™m t√™n m√≥n ƒÉn v√†o m√¥ t·∫£
      if (finalDescription.isEmpty) {
        finalDescription = dish.name;
      } else {
        finalDescription += ", ${dish.name}";
      }
      
      // Chuy·ªÉn ƒë·ªïi m·ªói Dish th√†nh m·ªôt FoodItem
      foodItems.add(FoodItem(
        id: Uuid().v4(),
        name: dish.name,
        calories: dish.nutrition['calories']?.toDouble() ?? 0.0,
        protein: dish.nutrition['protein']?.toDouble() ?? 0.0,
        fat: dish.nutrition['fat']?.toDouble() ?? 0.0,
        carbs: dish.nutrition['carbs']?.toDouble() ?? 0.0,
        fiber: dish.nutrition['fiber']?.toDouble() ?? 0.0,
        sugar: dish.nutrition['sugar']?.toDouble() ?? 0.0,
        sodium: dish.nutrition['sodium']?.toDouble() ?? 0.0,
        servingSize: 1.0,
        servingUnit: 'ph·∫ßn',
        additionalNutrients: Map<String, dynamic>.from(dish.nutrition),
      ));
    }

    // 3. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng FoodEntry m·ªõi v√† ch√≠nh x√°c
    final FoodEntry foodEntry = FoodEntry(
      id: Uuid().v4(),
      description: finalDescription,
      mealType: mealType,
      dateTime: DateTime.now(),
      nutritionInfo: {
        'calories': totalCalories,
        'protein': totalProtein,
        'fat': totalFat,
        'carbs': totalCarbs,
        'fiber': totalFiber,
        'sugar': totalSugar,
        'sodium': totalSodium,
      },
      items: foodItems,
    );

    // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang chuy·ªÉn ƒë·∫øn m√†n h√¨nh chi ti·∫øt
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('ƒêang chu·∫©n b·ªã ghi nh·∫≠n ${foodItems.length} m√≥n ƒÉn'),

        duration: Duration(seconds: 1),
        behavior: SnackBarBehavior.fixed,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      )
    );

    // Th√™m tr·ª±c ti·∫øp v√†o FoodProvider tr∆∞·ªõc khi ƒëi·ªÅu h∆∞·ªõng
    final foodProvider = Provider.of<FoodProvider>(context, listen: false);
    foodProvider.addFoodEntry(foodEntry);

    // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt ƒë√£ ƒë∆∞·ª£c th√™m v√†o
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('ƒê√£ th√™m "${finalDescription}" v√†o nh·∫≠t k√Ω th·ª±c ph·∫©m'),

        duration: Duration(seconds: 2),
        behavior: SnackBarBehavior.fixed,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );

    // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ th√¥ng b√°o hi·ªÉn th·ªã tr∆∞·ªõc khi chuy·ªÉn m√†n h√¨nh
    Future.delayed(Duration(milliseconds: 300), () {
      // Sau ƒë√≥ m·ªõi ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => FoodNutritionDetailScreen(
            foodEntry: foodEntry,
            onSave: (updatedEntry) {
              // C·∫≠p nh·∫≠t l·∫°i entry trong provider
              foodProvider.updateFoodEntry(updatedEntry);
            },
          ),
        ),
      );
    });
  }

  // H√†m l·∫•y package name (s·ª≠ d·ª•ng package_info_plus)
  Future<String> _getPackageName() async {
    try {
      // Get package info
      PackageInfo packageInfo = await PackageInfo.fromPlatform();

      // Print all package information for debugging
      print('üì¶ App Name: ${packageInfo.appName}');
      print('üì¶ Package Name: ${packageInfo.packageName}');
      print('üì¶ Version: ${packageInfo.version}');
      print('üì¶ Build Number: ${packageInfo.buildNumber}');

      return packageInfo.packageName;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y package info: $e');
      return 'unknown';
    }
  }

  // H√†m ki·ªÉm tra d·ªØ li·ªáu Firestore

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra v√† t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi khi sang tu·∫ßn m·ªõi
  Future<void> _checkAndGenerateForNewWeek() async {
    try {
      // Ch·ªâ th·ª±c hi·ªán ki·ªÉm tra khi ƒë√£ t·∫£i ƒë∆∞·ª£c k·∫ø ho·∫°ch ƒÉn tr∆∞·ªõc ƒë√≥
      if (_mealPlan == null) return;

      // L·∫•y ng√†y hi·ªán t·∫°i
      final now = DateTime.now();
      final currentWeekNumber = _getWeekNumber(now);

      // N·∫øu ch∆∞a c√≥ s·ªë tu·∫ßn ƒë∆∞·ª£c l∆∞u ho·∫∑c ƒë√£ sang tu·∫ßn m·ªõi
      if (_currentWeekNumber == null || currentWeekNumber != _currentWeekNumber) {
        // C·∫≠p nh·∫≠t s·ªë tu·∫ßn hi·ªán t·∫°i
        _currentWeekNumber = currentWeekNumber;

        // Ki·ªÉm tra xem ƒë√£ bao l√¢u k·ªÉ t·ª´ l·∫ßn c·∫≠p nh·∫≠t cu·ªëi
        bool shouldGenerate = true;

        if (_lastMealPlanUpdateTime != null) {
          // N·∫øu ƒë√£ c·∫≠p nh·∫≠t trong 24 gi·ªù qua, kh√¥ng c·∫ßn t·∫°o m·ªõi
          final hoursSinceLastUpdate = now.difference(_lastMealPlanUpdateTime!).inHours;
          shouldGenerate = hoursSinceLastUpdate > 24;
        }

        if (shouldGenerate) {
          // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('ƒê√£ ph√°t hi·ªán tu·∫ßn m·ªõi, ƒëang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi...'),
                backgroundColor: DietPlanColors.primary,
                duration: Duration(seconds: 3),
              ),
            );
          }

          // G·ªçi ph∆∞∆°ng th·ª©c t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi

          // C·∫≠p nh·∫≠t th·ªùi gian t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi nh·∫•t
          _lastMealPlanUpdateTime = DateTime.now();
        }
      }
    } catch (e) {
      // Ghi log l·ªói nh∆∞ng kh√¥ng hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
      // v√¨ ƒë√¢y l√† ch·ª©c nƒÉng t·ª± ƒë·ªông ch·∫°y ng·∫ßm
    }
  }

  // Ph∆∞∆°ng th·ª©c t√≠nh s·ªë tu·∫ßn trong nƒÉm
  int _getWeekNumber(DateTime date) {
    // L·∫•y ng√†y ƒë·∫ßu ti√™n c·ªßa nƒÉm
    final firstDayOfYear = DateTime(date.year, 1, 1);
    // S·ªë ng√†y t·ª´ ƒë·∫ßu nƒÉm
    final dayOfYear = date.difference(firstDayOfYear).inDays;

    // T√≠nh tu·∫ßn d·ª±a tr√™n s·ªë ng√†y (tu·∫ßn ƒë·∫ßu ti√™n l√† 0, n√™n c·ªông 1)
    return ((dayOfYear) / 7).floor() + 1;
  }

  // Ph∆∞∆°ng th·ª©c l·∫•y m√≥n ƒÉn cho m·ªôt ng√†y v√† lo·∫°i b·ªØa ƒÉn c·ª• th·ªÉ
  Meal? _getMealForDay(MealPlan mealPlan, String day, String mealType) {
    try {
      // Truy c·∫≠p v√†o weeklyPlan ƒë·ªÉ l·∫•y ng√†y
      if (mealPlan.weeklyPlan.containsKey(day)) {
        // L·∫•y DayMealPlan cho ng√†y c·ª• th·ªÉ
        final dayPlan = mealPlan.weeklyPlan[day];

        // Chuy·ªÉn ƒë·ªïi t√™n b·ªØa ƒÉn sang ti·∫øng Vi·ªát theo c·∫•u tr√∫c c·ªßa DayMealPlan
        String mealTypeKey = '';
        switch (mealType) {
          case 'breakfast':
            mealTypeKey = 'B·ªØa s√°ng';
            break;
          case 'lunch':
            mealTypeKey = 'B·ªØa tr∆∞a';
            break;
          case 'dinner':
            mealTypeKey = 'B·ªØa t·ªëi';
            break;
          default:
            return null;
        }

        // Ki·ªÉm tra v√† tr·∫£ v·ªÅ m√≥n ƒÉn
        if (dayPlan!.meals.containsKey(mealTypeKey) &&
            dayPlan.meals[mealTypeKey]!.isNotEmpty) {
          return dayPlan.meals[mealTypeKey]!.first;
        }
      }
      return null;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y m√≥n ƒÉn cho $day, $mealType: $e');
      return null;
    }
  }

  // Ph∆∞∆°ng th·ª©c l·∫Øng nghe thay ƒë·ªïi d·ªØ li·ªáu ng∆∞·ªùi d√πng
  void _listenToUserDataChanges() {
    try {
      // L·∫•y UserDataProvider ƒë·ªÉ theo d√µi thay ƒë·ªïi
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);

      // L·∫Øng nghe thay ƒë·ªïi trong userDataProvider
      userDataProvider.addListener(() {
        // Khi d·ªØ li·ªáu ng∆∞·ªùi d√πng thay ƒë·ªïi (m·ª•c ti√™u dinh d∆∞·ª°ng, ∆∞u ti√™n, d·ªã ·ª©ng...)
        // Ki·ªÉm tra v√† t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi n·∫øu c·∫ßn
        if (mounted && _mealPlan != null) {
          // Ch·ªâ t·∫°o k·∫ø ho·∫°ch m·ªõi n·∫øu d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ thay ƒë·ªïi ƒë√°ng k·ªÉ
          // v√† th·ªùi gian t·ª´ l·∫ßn c·∫≠p nh·∫≠t cu·ªëi √≠t nh·∫•t 30 ph√∫t
          bool shouldUpdate = true;

          if (_lastMealPlanUpdateTime != null) {
            final minutesSinceLastUpdate =
                DateTime.now().difference(_lastMealPlanUpdateTime!).inMinutes;
            shouldUpdate = minutesSinceLastUpdate > 30;
          }

          if (shouldUpdate) {
            // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('D·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë√£ thay ƒë·ªïi, ƒëang c·∫≠p nh·∫≠t k·∫ø ho·∫°ch ƒÉn...'),
                backgroundColor: Colors.blue,
                duration: Duration(seconds: 3),
              ),
            );

            // G·ªçi ph∆∞∆°ng th·ª©c t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi

            // C·∫≠p nh·∫≠t th·ªùi gian t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi nh·∫•t
            _lastMealPlanUpdateTime = DateTime.now();
          }
        }
      });
    } catch (e) {
      // Ghi log l·ªói nh∆∞ng kh√¥ng hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
    }
  }
  // Ph∆∞∆°ng th·ª©c ƒë·ªãnh d·∫°ng nguy√™n li·ªáu t·ª´ chu·ªói JSON
  Widget _buildFormattedIngredient(dynamic ingredient) {
    try {
      // N·∫øu ingredient l√† Map
      if (ingredient is Map) {
        final amount = ingredient['amount'];
        final name = ingredient['name'];
        if (amount != null && name != null) {
          return Text('$amount $name', style: TextStyle(fontSize: 14));
        }
      }

      // N·∫øu ingredient l√† String nh∆∞ng c√≥ ƒë·ªãnh d·∫°ng JSON
      else if (ingredient is String) {
        // Ki·ªÉm tra n·∫øu l√† chu·ªói JSON d·∫°ng {amount: X, name: Y}
        if (ingredient.contains('{') && ingredient.contains('}')) {
          // Tr√≠ch xu·∫•t amount v√† name t·ª´ chu·ªói
          final amountRegex = RegExp(r'amount: (.*?)[,}]');
          final nameRegex = RegExp(r'name: (.*?)[,}]');

          final amountMatch = amountRegex.firstMatch(ingredient);
          final nameMatch = nameRegex.firstMatch(ingredient);

          if (amountMatch != null && nameMatch != null) {
            final amount = amountMatch.group(1)?.trim();
            final name = nameMatch.group(1)?.trim();

            if (amount != null && name != null) {
              // X√≥a b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
              final cleanName = name.replaceAll('"', '').replaceAll("'", '');
              return Text('$amount $cleanName', style: TextStyle(fontSize: 14));
            }
          }
        }

        // N·∫øu l√† chu·ªói th√¥ng th∆∞·ªùng, hi·ªÉn th·ªã nguy√™n d·∫°ng
        return Text(ingredient, style: TextStyle(fontSize: 14));
      }

      // Tr∆∞·ªùng h·ª£p kh√°c, chuy·ªÉn ƒë·ªïi sang chu·ªói
      return Text(ingredient.toString(), style: TextStyle(fontSize: 14));
    } catch (e) {
      // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã nguy√™n li·ªáu g·ªëc
      return Text(ingredient.toString(), style: TextStyle(fontSize: 14));
    }
  }

  // H√†m chuy·ªÉn ƒë·ªïi s√¢u t·ª´ Map<dynamic, dynamic> sang Map<String, dynamic>
  Map<String, dynamic> _deepConvertMap(dynamic inputMap) {
    // N·∫øu input l√† null, tr·∫£ v·ªÅ map r·ªóng
    if (inputMap == null) {
      return {};
    }

    // ƒê·∫£m b·∫£o input l√† Map
    if (inputMap is! Map) {
      print('‚ö†Ô∏è ƒê·∫ßu v√†o kh√¥ng ph·∫£i Map: ${inputMap.runtimeType}');
      return {};
    }

    Map<String, dynamic> result = {};

    inputMap.forEach((key, value) {
      if (value is Map) {
        // N·∫øu value l√† Map, ƒë·ªá quy chuy·ªÉn ƒë·ªïi n√≥
        result[key.toString()] = _deepConvertMap(value);
      } else if (value is List) {
        // N·∫øu value l√† List, chuy·ªÉn ƒë·ªïi t·ª´ng ph·∫ßn t·ª≠ trong list
        result[key.toString()] = _convertList(value);
      } else {
        // N·∫øu value l√† gi√° tr·ªã nguy√™n th·ªßy, gi·ªØ nguy√™n
        result[key.toString()] = value;
      }
    });

    return result;
  }

  // H√†m chuy·ªÉn ƒë·ªïi List
  List<dynamic> _convertList(dynamic inputList) {
    // N·∫øu input kh√¥ng ph·∫£i List, tr·∫£ v·ªÅ list r·ªóng
    if (inputList == null) {
      return [];
    }

    // ƒê·∫£m b·∫£o input l√† List
    if (inputList is! List) {
      print('‚ö†Ô∏è ƒê·∫ßu v√†o kh√¥ng ph·∫£i List: ${inputList.runtimeType}');
      return [];
    }

    return inputList.map((item) {
      if (item is Map) {
        return _deepConvertMap(item);
      } else if (item is List) {
        return _convertList(item);
      } else {
        return item;
      }
    }).toList();
  }

  // H√†m t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
  Future<void> _generateNewMealPlan() async {
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi t·∫°o k·∫ø ho·∫°ch
    final success = await AuthHelper.requireLogin(
      context,
      onAuthenticated: () => _performGenerateNewMealPlan(),
      title: 'T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi',
      message: 'M·ªùi b·∫°n ƒëƒÉng nh·∫≠p ƒë·ªÉ tr·∫£i nghi·ªám t√≠nh nƒÉng t·∫°o k·∫ø ho·∫°ch ƒÉn c√° nh√¢n h√≥a b·∫±ng AI',
      feature: 't·∫°o k·∫ø ho·∫°ch ƒÉn',
    );

    if (!success) {
      // Ng∆∞·ªùi d√πng kh√¥ng ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã th√¥ng b√°o
      AuthHelper.showLoginRequiredSnackBar(
        context,
        feature: 't·∫°o k·∫ø ho·∫°ch ƒÉn',
      );
    }
  }

  // Th·ª±c hi·ªán t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi sau khi ƒë√£ ƒëƒÉng nh·∫≠p
  Future<void> _performGenerateNewMealPlan() async {
    // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n tr∆∞·ªõc
    bool confirmed = await showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi'),
        content: Text('B·∫°n c√≥ ch·∫Øc mu·ªën t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi cho c·∫£ tu·∫ßn kh√¥ng? K·∫ø ho·∫°ch hi·ªán t·∫°i s·∫Ω b·ªã thay th·∫ø.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text('H·ªßy'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: Text('T·∫°o m·ªõi'),
            style: TextButton.styleFrom(
              backgroundColor: DietPlanColors.primary,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    ) ?? false;

    if (!confirmed) {
      return; // Ng∆∞·ªùi d√πng ƒë√£ h·ªßy thao t√°c
    }

    // Ki·ªÉm tra n·∫øu ƒëang c√≥ ti·∫øn tr√¨nh t·∫°o k·∫ø ho·∫°ch kh√°c
    if (_isGeneratingPlanInProgress) {
      print('‚ö†Ô∏è _generateNewMealPlan: ƒêang c√≥ m·ªôt ti·∫øn tr√¨nh t·∫°o k·∫ø ho·∫°ch kh√°c, vui l√≤ng ƒë·ª£i.');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('ƒêang x·ª≠ l√Ω y√™u c·∫ßu tr∆∞·ªõc ƒë√≥, vui l√≤ng ƒë·ª£i.')),
        );
      }
      return; // Tho√°t s·ªõm
    }

    try {
      if (mounted) { // ƒê·∫£m b·∫£o widget c√≤n mounted tr∆∞·ªõc khi g·ªçi setState
        setState(() {
          _isGeneratingPlanInProgress = true; // ƒê·∫∑t c·ªù b·∫Øt ƒë·∫ßu
          _isLoading = true;
          _hasError = false;
          _errorMessage = '';
        });
      } else {
        // N·∫øu widget kh√¥ng c√≤n mounted, kh√¥ng n√™n ti·∫øp t·ª•c
        print('‚ö†Ô∏è _generateNewMealPlan: Widget kh√¥ng c√≤n mounted, h·ªßy t·∫°o k·∫ø ho·∫°ch.');
        return;
      }

      // Ki·ªÉm tra xem c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }

      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh m·ª•c ti√™u dinh d∆∞·ª°ng
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final userId = FirebaseAuth.instance.currentUser?.uid;

      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }

      // Get nutrition targets using the utility class
      final nutritionTargets = NutritionCalculator.calculateNutritionTargets(userDataProvider);
      
      final caloriesTarget = nutritionTargets['calories']!.round();
      final proteinTarget = nutritionTargets['protein']!.round();
      final fatTarget = nutritionTargets['fat']!.round();
      final carbsTarget = nutritionTargets['carbs']!.round();

      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o k·∫ø ho·∫°ch
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi...'),
            duration: Duration(seconds: 2),
          ),
        );
      }

      // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/generate ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
      final headers = await ApiService.getAuthHeaders();

      // T·∫°o d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng cho API
      final requestData = {
        'user_id': userId,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': true,
      };

      // Th√™m t·∫•t c·∫£ th√¥ng tin t·ª´ onboarding cho prompt ch√≠nh x√°c
      // Th√™m preferences d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (userDataProvider.preferences != null && userDataProvider.preferences.isNotEmpty) {
        requestData['preferences'] = userDataProvider.preferences;
      }
      
      // Th√™m allergies d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (userDataProvider.allergies != null && userDataProvider.allergies.isNotEmpty) {
        requestData['allergies'] = userDataProvider.allergies;
      }
      
      // Th√™m cuisine_style n·∫øu c√≥
      if (userDataProvider.cuisineStyle != null && userDataProvider.cuisineStyle!.isNotEmpty) {
        requestData['cuisine_style'] = userDataProvider.cuisineStyle!;
      }
      
      // Th√™m diet_restrictions n·∫øu c√≥
      if (userDataProvider.dietRestrictions != null && userDataProvider.dietRestrictions.isNotEmpty) {
        requestData['diet_restrictions'] = userDataProvider.dietRestrictions;
      }
      
      // Th√™m diet_preference n·∫øu c√≥
      if (userDataProvider.dietPreference != null && userDataProvider.dietPreference.isNotEmpty) {
        requestData['diet_preference'] = userDataProvider.dietPreference;
      }
      
      // Th√™m health_conditions n·∫øu c√≥
      if (userDataProvider.healthConditions != null && userDataProvider.healthConditions.isNotEmpty) {
        requestData['health_conditions'] = userDataProvider.healthConditions;
      }
      
      // Th√™m m·ª•c ti√™u dinh d∆∞·ª°ng chi ti·∫øt n·∫øu c√≥
      if (userDataProvider.fiber_target != null) {
        requestData['fiber_target'] = userDataProvider.fiber_target!; // S·ª≠ d·ª•ng null assertion
      }
      
      if (userDataProvider.sugar_target != null) {
        requestData['sugar_target'] = userDataProvider.sugar_target!; // S·ª≠ d·ª•ng null assertion
      }
      
      if (userDataProvider.sodium_target != null) {
        requestData['sodium_target'] = userDataProvider.sodium_target!; // S·ª≠ d·ª•ng null assertion
      }

      final generateUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.generateMealPlan}');

      print('üîÑ ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi t·ª´ API: $generateUrl');
      print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');

      final response = await http.post(
        generateUrl,
        headers: {
          ...headers,
          'Content-Type': 'application/json',
        },
        body: jsonEncode(requestData),
      ).timeout(
        Duration(seconds: 60),  // TƒÉng timeout l√™n 60 gi√¢y
        onTimeout: () {
          print('‚è±Ô∏è Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
          throw Exception('Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
        },
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi th√†nh c√¥ng');

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi, ƒëang ch·ªù c·∫≠p nh·∫≠t t·ª´ Firebase...'),

              duration: Duration(seconds: 3),
            ),
          );
        }
        // ƒê·ª£i l√¢u h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
        await Future.delayed(Duration(seconds: 5));

        // ƒê·ªçc d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
        final latestDocSnapshot = await FirebaseFirestore.instance
            .collection('latest_meal_plans')
            .doc(userId)
            .get();

        if (latestDocSnapshot.exists && latestDocSnapshot.data() != null) {
          final result = latestDocSnapshot.data()!;
          print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans');

          setState(() {
            _mealPlan = MealPlan.fromJson(result);
            _isLoading = false;
            _hasError = false;
          });
          return;
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans, ki·ªÉm tra meal_plans');
        final docSnapshot = await FirebaseFirestore.instance
            .collection('meal_plans')
            .doc(userId)
            .get();

        if (docSnapshot.exists && docSnapshot.data() != null) {
          final result = docSnapshot.data()!;
          print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ meal_plans');

          setState(() {
            _mealPlan = MealPlan.fromJson(result);
            _isLoading = false;
            _hasError = false;
          });
        } else {
          // N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firestore, c√≥ th·ªÉ API ƒëang x·ª≠ l√Ω
          print('‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y d·ªØ li·ªáu trong Firestore, ƒë·ª£i th√™m...');

          // ƒê·ª£i th√™m th·ªùi gian (tƒÉng l√™n 5 gi√¢y)
          await Future.delayed(Duration(seconds: 5));

          // Th·ª≠ l·∫°i l·∫ßn ƒë·∫ßu - ki·ªÉm tra latest_meal_plans tr∆∞·ªõc
          final latestRetrySnapshot = await FirebaseFirestore.instance
              .collection('latest_meal_plans')
              .doc(userId)
              .get();

          if (latestRetrySnapshot.exists && latestRetrySnapshot.data() != null) {
            final result = latestRetrySnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans sau khi th·ª≠ l·∫°i');

            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });
            return;
          }

          // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
          final retrySnapshot = await FirebaseFirestore.instance
              .collection('meal_plans')
              .doc(userId)
              .get();

          if (retrySnapshot.exists && retrySnapshot.data() != null) {
            final result = retrySnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ meal_plans sau khi th·ª≠ l·∫°i');

            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });
          } else {
            // V·∫´n kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firestore sau khi t·∫°o, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
            setState(() {
              _isLoading = false;
            });
            _loadMockData();
          }
        }
      } else if (response.statusCode == 422) {
        // L·ªói d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        print('‚ùå L·ªói 422 - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${response.body}');

        // Ph√¢n t√≠ch l·ªói chi ti·∫øt
        try {
          final errorData = jsonDecode(response.body);
          print('‚ùå Chi ti·∫øt l·ªói JSON: $errorData');

          if (errorData['detail'] is List) {
            for (var error in errorData['detail']) {
              print('‚ùå L·ªói tr∆∞·ªùng: ${error['loc']}, Lo·∫°i: ${error['type']}, Th√¥ng b√°o: ${error['msg']}');
            }
          } else {
            print('‚ùå Chi ti·∫øt l·ªói: ${errorData['detail']}');
          }

          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('L·ªói d·ªØ li·ªáu: ${errorData['detail']}'),
              backgroundColor: DietPlanColors.error,
              duration: Duration(seconds: 5),
            ),
          );
        } catch (e) {
          print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
        }

        throw Exception('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: Vui l√≤ng ki·ªÉm tra l·∫°i');
      } else if (response.statusCode == 500) {
        // L·ªói server
        print('‚ùå L·ªói server: ${response.statusCode} - ${response.body}');

        // Ph√¢n t√≠ch l·ªói chi ti·∫øt
        String errorMessage = 'L·ªói server';
        try {
          final errorData = jsonDecode(response.body);
          if (errorData['detail'] != null) {
            errorMessage = errorData['detail'];

            // Ki·ªÉm tra n·∫øu l√† l·ªói module 'services'
            if (errorMessage.contains("module 'services' has no attribute")) {
              errorMessage = 'L·ªói c·∫•u h√¨nh server: Thi·∫øu module x·ª≠ l√Ω b·ªØa ƒÉn';
            }
          }
        } catch (e) {
          print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói server: $errorMessage\n\nƒêang t·∫£i d·ªØ li·ªáu m·∫´u...'),
            backgroundColor: DietPlanColors.warning,
            duration: Duration(seconds: 5),
          ),
        );

        // Thay v√¨ g·ªçi l·∫°i _loadMealPlan() g√¢y v√≤ng l·∫∑p v√¥ t·∫≠n, t·∫£i d·ªØ li·ªáu m·∫´u
        print('‚ö†Ô∏è G·∫∑p l·ªói server, t·∫£i d·ªØ li·ªáu m·∫´u thay v√¨ g·ªçi l·∫°i _loadMealPlan()');
        setState(() {
          _isLoading = false;
        });
        _loadMockData();
        return;

        // throw Exception('L·ªói server: $errorMessage'); // Kh√¥ng throw exception n·ªØa
      } else if (response.statusCode == 403) {
        // L·ªói x√°c th·ª±c
        print('‚ùå L·ªói x√°c th·ª±c: ${response.statusCode} - ${response.body}');
        throw Exception('L·ªói x√°c th·ª±c: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      } else {
        // L·ªói kh√°c
        print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode} - ${response.body}');
        throw Exception('L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode}');
      }
    } catch (apiError) {
      print('‚ùå L·ªói khi g·ªçi API t·∫°o k·∫ø ho·∫°ch ƒÉn: $apiError');

      // N·∫øu kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi qua API, t·∫°o d·ªØ li·ªáu m·∫´u
      setState(() {
        _isLoading = false;
        _isGeneratingPlanInProgress = false; // Reset flag ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
      });
      _loadMockData();
    } finally {
      // ƒê·∫£m b·∫£o flag lu√¥n ƒë∆∞·ª£c reset b·∫•t k·ªÉ k·∫øt qu·∫£ th√†nh c√¥ng hay th·∫•t b·∫°i
      _isGeneratingPlanInProgress = false;
    }
  }

  // Ki·ªÉm tra tr√πng l·∫∑p m√≥n ƒÉn trong k·∫ø ho·∫°ch tu·∫ßn

  // T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi t√πy ch·ªçn ƒëa d·∫°ng h√≥a m√≥n ƒÉn

  // New method to add a snack to the meal plan
  Future<void> _addSnackToMealPlan() async {
    try {
      // Check if selected day has a meal plan
      final selectedDayName = _englishDays[_selectedDayIndex];
      print('üçΩÔ∏è Th√™m b·ªØa ph·ª• cho ng√†y: $selectedDayName');
      
      final dayPlan = _mealPlan?.weeklyPlan[selectedDayName];
      
      if (dayPlan == null) {
        print('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch cho ng√†y: $selectedDayName');
        throw Exception('Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë√£ ch·ªçn');
      }
      
      // In ra c√°c b·ªØa ƒÉn hi·ªán c√≥
      print('üçΩÔ∏è C√°c b·ªØa ƒÉn hi·ªán c√≥: ${dayPlan.meals.keys.toList()}');
      
      // Ki·ªÉm tra n·∫øu b·ªØa ph·ª• ƒë√£ t·ªìn t·∫°i
      if (dayPlan.meals.containsKey('B·ªØa ph·ª•')) {
        print('‚ö†Ô∏è B·ªØa ph·ª• ƒë√£ t·ªìn t·∫°i cho ng√†y: $selectedDayName');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('B·ªØa ph·ª• ƒë√£ t·ªìn t·∫°i cho ng√†y n√†y'),
            backgroundColor: DietPlanColors.warning,
            duration: Duration(seconds: 2)
          )
        );
        return;
      }
      
      // Show loading indicator
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒêang th√™m b·ªØa ph·ª•...'), 
          duration: Duration(seconds: 2)
        )
      );

      print('üîÑ B·∫Øt ƒë·∫ßu th√™m b·ªØa ph·ª• b·∫±ng c√°ch g·ªçi _replaceMeal("B·ªØa ph·ª•")');
      // Use the existing replaceMeal functionality but with 'B·ªØa ph·ª•'
      await _replaceMeal('B·ªØa ph·ª•');
      
      print('‚úÖ ƒê√£ g·ªçi _replaceMeal th√†nh c√¥ng, ƒëang t·∫£i l·∫°i k·∫ø ho·∫°ch');
      // Reload the meal plan to show the new snack
      await _loadMealPlan();
      
      print('‚úÖ ƒê√£ ho√†n th√†nh vi·ªác th√™m b·ªØa ph·ª•');
    } catch (e) {
      print('‚ùå L·ªói khi th√™m b·ªØa ph·ª•: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói: Kh√¥ng th·ªÉ th√™m b·ªØa ph·ª• - ${e.toString()}'),
          backgroundColor: DietPlanColors.error,
          duration: Duration(seconds: 3)
        )
      );
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c _getMealColor - s·ª≠ d·ª•ng m√†u th·ªëng nh·∫•t
  Color _getMealColor(String mealType) {
    switch (mealType.toLowerCase()) {
      case 'b·ªØa s√°ng':
        return DietPlanColors.primary;
      case 'b·ªØa tr∆∞a':
        return DietPlanColors.primary;
      case 'b·ªØa t·ªëi':
        return DietPlanColors.primary;
      case 'b·ªØa ph·ª•':
        return DietPlanColors.secondary;
      default:
        return DietPlanColors.primary;
    }
  }

  // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ l·∫•y meal hi·ªán t·∫°i theo lo·∫°i b·ªØa ƒÉn
  Meal? _getCurrentMealByType(String mealType) {
    if (_mealPlan == null) return null;
    
    final selectedDay = _englishDays[_selectedDayIndex];
    if (!_mealPlan!.weeklyPlan.containsKey(selectedDay)) return null;
    
    final dayPlan = _mealPlan!.weeklyPlan[selectedDay]!;
    final normalizedType = _normalizeStringForComparison(mealType);
    
    // T√¨m key ph√π h·ª£p v·ªõi mealType
    String? matchingKey;
    for (var key in dayPlan.meals.keys) {
      if (_normalizeStringForComparison(key) == normalizedType) {
        matchingKey = key;
        break;
      }
    }
    
    if (matchingKey == null || dayPlan.meals[matchingKey]!.isEmpty) return null;
    
    // Tr·∫£ v·ªÅ meal ƒë·∫ßu ti√™n trong danh s√°ch
    return dayPlan.meals[matchingKey]![0];
  }
  
  // H√†m chu·∫©n h√≥a chu·ªói ƒë·ªÉ so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng v√† d·∫•u
  String _normalizeStringForComparison(String input) {
    return input.toLowerCase()
      .replaceAll(' ', '')
      .replaceAll('√°', 'a')
      .replaceAll('√†', 'a')
      .replaceAll('·∫£', 'a')
      .replaceAll('√£', 'a')
      .replaceAll('·∫°', 'a')
      .replaceAll('ƒÉ', 'a')
      .replaceAll('·∫Ø', 'a')
      .replaceAll('·∫±', 'a')
      .replaceAll('·∫≥', 'a')
      .replaceAll('·∫µ', 'a')
      .replaceAll('·∫∑', 'a')
      .replaceAll('√¢', 'a')
      .replaceAll('·∫•', 'a')
      .replaceAll('·∫ß', 'a')
      .replaceAll('·∫©', 'a')
      .replaceAll('·∫´', 'a')
      .replaceAll('·∫≠', 'a')
      .replaceAll('√©', 'e')
      .replaceAll('√®', 'e')
      .replaceAll('·∫ª', 'e')
      .replaceAll('·∫Ω', 'e')
      .replaceAll('·∫π', 'e')
      .replaceAll('√™', 'e')
      .replaceAll('·∫ø', 'e')
      .replaceAll('·ªÅ', 'e')
      .replaceAll('·ªÉ', 'e')
      .replaceAll('·ªÖ', 'e')
      .replaceAll('·ªá', 'e')
      .replaceAll('√≥', 'o')
      .replaceAll('√≤', 'o')
      .replaceAll('·ªè', 'o')
      .replaceAll('√µ', 'o')
      .replaceAll('·ªç', 'o')
      .replaceAll('√¥', 'o')
      .replaceAll('·ªë', 'o')
      .replaceAll('·ªì', 'o')
      .replaceAll('·ªï', 'o')
      .replaceAll('·ªó', 'o')
      .replaceAll('·ªô', 'o')
      .replaceAll('∆°', 'o')
      .replaceAll('·ªõ', 'o')
      .replaceAll('·ªù', 'o')
      .replaceAll('·ªü', 'o')
      .replaceAll('·ª°', 'o')
      .replaceAll('·ª£', 'o')
      .replaceAll('√∫', 'u')
      .replaceAll('√π', 'u')
      .replaceAll('·ªß', 'u')
      .replaceAll('≈©', 'u')
      .replaceAll('·ª•', 'u')
      .replaceAll('∆∞', 'u')
      .replaceAll('·ª©', 'u')
      .replaceAll('·ª´', 'u')
      .replaceAll('·ª≠', 'u')
      .replaceAll('·ªØ', 'u')
      .replaceAll('·ª±', 'u')
      .replaceAll('√≠', 'i')
      .replaceAll('√¨', 'i')
      .replaceAll('·ªâ', 'i')
      .replaceAll('ƒ©', 'i')
      .replaceAll('·ªã', 'i')
      .replaceAll('√Ω', 'y')
      .replaceAll('·ª≥', 'y')
      .replaceAll('·ª∑', 'y')
      .replaceAll('·ªπ', 'y')
      .replaceAll('·ªµ', 'y')
      .replaceAll('ƒë', 'd');
  }

  // Th√™m ph∆∞∆°ng th·ª©c thay th·∫ø ng√†y
  Future<void> _replaceDayMealPlan() async {
    // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('ƒêang thay th·∫ø k·∫ø ho·∫°ch ng√†y...'),
        duration: Duration(seconds: 2),
      ),
    );

    setState(() {
      _isLoading = true;
    });

    try {
      // L·∫•y th√¥ng tin dinh d∆∞·ª°ng
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final nutritionTargets = NutritionCalculator.calculateNutritionTargets(userDataProvider);
      
      // Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã t·ª´ double sang int ƒë·ªÉ ph√π h·ª£p v·ªõi API
      final caloriesTarget = nutritionTargets['calories']!.round();
      final proteinTarget = nutritionTargets['protein']!.round();
      final fatTarget = nutritionTargets['fat']!.round();
      final carbsTarget = nutritionTargets['carbs']!.round();

      // L·∫•y ID ng∆∞·ªùi d√πng
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }
      
      // L·∫•y th√¥ng tin v·ªÅ s·ª©c kh·ªèe v√† d·ªã ·ª©ng t·ª´ UserDataProvider
      List<String> dietRestrictions = userDataProvider.dietRestrictions;
      List<String> healthConditions = userDataProvider.healthConditions;
      String dietPreference = userDataProvider.dietPreference;
      
      // L·∫•y t√™n ng√†y ƒëang ch·ªçn
      final selectedDay = _englishDays[_selectedDayIndex];
      final selectedDayName = _convertToAPIDay(selectedDay);

      print('‚úÖ ƒê√≠nh k√®m Firebase ID Token v√†o request');
      
      // S·ª≠ d·ª•ng endpoint POST /api/replace-day ƒë·ªÉ thay th·∫ø ng√†y
      final headers = await ApiService.getAuthHeaders();
      
      // T·∫°o d·ªØ li·ªáu cho body request
      final requestData = {
        'user_id': userId,
        'day_of_week': selectedDayName,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'diet_restrictions': dietRestrictions,
        'health_conditions': healthConditions,
        'diet_preference': dietPreference,
        // Kh√¥ng ƒë∆∞a use_ai v√†o body
      };

      // T·∫°o query params cho URL
      final queryParams = {
        'user_id': userId,
        'use_ai': 'true', // ƒê∆∞a use_ai v√†o query parameter
      };
      
      // Th√™m dietRestrictions v√†o query params n·∫øu c√≥
      if (dietRestrictions.isNotEmpty) {
        for (int i = 0; i < dietRestrictions.length; i++) {
          queryParams['preferences[$i]'] = dietRestrictions[i];
        }
      }
      
      // Th√™m healthConditions v√†o query params n·∫øu c√≥
      if (healthConditions.isNotEmpty) {
        for (int i = 0; i < healthConditions.length; i++) {
          queryParams['allergies[$i]'] = healthConditions[i];
        }
      }
      
      // Th√™m dietPreference v√†o query params n·∫øu c√≥
      if (dietPreference.isNotEmpty) {
        queryParams['cuisine_style'] = dietPreference;
      }
      
      // T·∫°o URI v·ªõi query parameters
      final replaceDayUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.replaceDay}')
          .replace(queryParameters: queryParams);

      print('üîÑ ƒêang thay th·∫ø k·∫ø ho·∫°ch ng√†y t·ª´ API: $replaceDayUrl');
      print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: $requestData');
      
      // Chuy·ªÉn ƒë·ªïi sang JSON ƒë·∫£m b·∫£o boolean ƒë∆∞·ª£c x·ª≠ l√Ω ch√≠nh x√°c
      final jsonBody = jsonEncode(requestData);
      print('üì¶ JSON ƒë∆∞·ª£c g·ª≠i ƒëi: $jsonBody');

      final response = await http.post(
        replaceDayUrl,
        headers: {
          ...headers,
          'Content-Type': 'application/json',
        },
        body: jsonBody,
      );

      if (response.statusCode == 200) {
        // Kh√¥ng ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ API, m√† ch·ªù c·∫≠p nh·∫≠t t·ª´ Firebase
        print('‚úÖ Y√™u c·∫ßu thay th·∫ø k·∫ø ho·∫°ch ng√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng');
        print('üîÑ Ch·ªù c·∫≠p nh·∫≠t t·ª´ Firestore...');
        
        // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ Firebase c·∫≠p nh·∫≠t
        await Future.delayed(Duration(seconds: 2));
        
        // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase
        await _loadMealPlanData();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒê√£ thay th·∫ø k·∫ø ho·∫°ch ng√†y th√†nh c√¥ng!'),

            duration: Duration(seconds: 2),
          ),
        );
      } else {
        throw Exception('L·ªói khi thay th·∫ø k·∫ø ho·∫°ch ng√†y: ${response.statusCode}');
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
        _hasError = true;
        _errorMessage = 'L·ªói khi thay th·∫ø k·∫ø ho·∫°ch ng√†y: $e';
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói khi thay th·∫ø k·∫ø ho·∫°ch ng√†y: $e'),
          backgroundColor: DietPlanColors.error,
        ),
      );
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
  
  String _removeDiacritics(String input) {
    return input
      .replaceAll('√°', 'a')
      .replaceAll('√†', 'a')
      .replaceAll('·∫£', 'a')
      .replaceAll('√£', 'a')
      .replaceAll('·∫°', 'a')
      .replaceAll('ƒÉ', 'a')
      .replaceAll('·∫Ø', 'a')
      .replaceAll('·∫±', 'a')
      .replaceAll('·∫≥', 'a')
      .replaceAll('·∫µ', 'a')
      .replaceAll('·∫∑', 'a')
      .replaceAll('√¢', 'a')
      .replaceAll('·∫•', 'a')
      .replaceAll('·∫ß', 'a')
      .replaceAll('·∫©', 'a')
      .replaceAll('·∫´', 'a')
      .replaceAll('·∫≠', 'a')
      .replaceAll('√©', 'e')
      .replaceAll('√®', 'e')
      .replaceAll('·∫ª', 'e')
      .replaceAll('·∫Ω', 'e')
      .replaceAll('·∫π', 'e')
      .replaceAll('√™', 'e')
      .replaceAll('·∫ø', 'e')
      .replaceAll('·ªÅ', 'e')
      .replaceAll('·ªÉ', 'e')
      .replaceAll('·ªÖ', 'e')
      .replaceAll('·ªá', 'e')
      .replaceAll('√≠', 'i')
      .replaceAll('√¨', 'i')
      .replaceAll('·ªâ', 'i')
      .replaceAll('ƒ©', 'i')
      .replaceAll('·ªã', 'i')
      .replaceAll('√≥', 'o')
      .replaceAll('√≤', 'o')
      .replaceAll('·ªè', 'o')
      .replaceAll('√µ', 'o')
      .replaceAll('·ªç', 'o')
      .replaceAll('√¥', 'o')
      .replaceAll('·ªë', 'o')
      .replaceAll('·ªì', 'o')
      .replaceAll('·ªï', 'o')
      .replaceAll('·ªó', 'o')
      .replaceAll('·ªô', 'o')
      .replaceAll('∆°', 'o')
      .replaceAll('·ªõ', 'o')
      .replaceAll('·ªù', 'o')
      .replaceAll('·ªü', 'o')
      .replaceAll('·ª°', 'o')
      .replaceAll('·ª£', 'o')
      .replaceAll('√∫', 'u')
      .replaceAll('√π', 'u')
      .replaceAll('·ªß', 'u')
      .replaceAll('≈©', 'u')
      .replaceAll('·ª•', 'u')
      .replaceAll('∆∞', 'u')
      .replaceAll('·ª©', 'u')
      .replaceAll('·ª´', 'u')
      .replaceAll('·ª≠', 'u')
      .replaceAll('·ªØ', 'u')
      .replaceAll('·ª±', 'u')
      .replaceAll('√Ω', 'y')
      .replaceAll('·ª≥', 'y')
      .replaceAll('·ª∑', 'y')
      .replaceAll('·ªπ', 'y')
      .replaceAll('·ªµ', 'y')
      .replaceAll('ƒë', 'd');
  }
  
  // Th√™m ph∆∞∆°ng th·ª©c _loadMealPlanData ƒë·ªÉ s·ª≠a l·ªói
  Future<void> _loadMealPlanData() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });
    
    try {
      // G·ªçi _loadMealPlan ƒë·ªÉ t·∫£i d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn t·ª´ Firebase
      await _loadMealPlan();
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng n·∫øu c·∫ßn
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = 'L·ªói khi t·∫£i d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn: $e';
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('L·ªói khi t·∫£i d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn: $e'),
            backgroundColor: DietPlanColors.error,
          ),
        );
      }
    }
  }
}
