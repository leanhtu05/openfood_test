import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../utils/constants.dart';
import '../services/meal_plan_api_service.dart';
import '../services/firestore_service.dart';
import '../services/api_service.dart';
import '../models/meal_plan.dart';
import '../models/food_entry.dart';
import '../models/food_item.dart';
import 'food_nutrition_detail_screen.dart';
import 'package:uuid/uuid.dart';
import 'package:provider/provider.dart';
import '../providers/food_provider.dart';
import '../providers/user_data_provider.dart';
import '../providers/user_auth_provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:package_info_plus/package_info_plus.dart';
import '../main.dart' as main_app;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';
import '../utils/config.dart' as app_config;
import 'package:http/http.dart' as http;
import 'dart:convert';

// Extension to make text smaller
extension TextScaling on Text {
  Text scaled() {
    final TextStyle? style = this.style;
    final scaleFactor = 0.85; // Scale all text to 85% of original size
    
    if (style != null) {
      // Scale the existing style's font size
      final double? fontSize = style.fontSize;
      final newFontSize = fontSize != null ? fontSize * scaleFactor : 12.0 * scaleFactor;
      
      return Text(
        data ?? '',
        style: style.copyWith(fontSize: newFontSize),
        textAlign: textAlign,
        softWrap: softWrap,
        overflow: overflow,
        maxLines: maxLines,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        locale: locale,
      );
    } else {
      // If no style was defined, use a default size
      return Text(
        data ?? '',
        style: TextStyle(fontSize: 12.0 * scaleFactor),
        textAlign: textAlign,
        softWrap: softWrap,
        overflow: overflow,
        maxLines: maxLines,
        textWidthBasis: textWidthBasis,
        textHeightBehavior: textHeightBehavior,
        locale: locale,
      );
    }
  }
}

class DietPlanScreen extends StatefulWidget {
  const DietPlanScreen({Key? key}) : super(key: key);

  @override
  State<DietPlanScreen> createState() => _DietPlanScreenState();
}

class _DietPlanScreenState extends State<DietPlanScreen> {
  int _selectedDayIndex = 0; // T.2 selected by default (th·ª© 2 = Monday = index 0)
  bool _isLoading = true;
  bool _hasError = false;
  String _errorMessage = '';
  MealPlan? _mealPlan;
  FirestoreService? _firestoreService;
  bool _isFirebaseInitialized = false;
  
  final List<String> _daysOfWeek = [
    'T.2', 'T.3', 'T.4', 'T.5', 'T.6', 'T.7', 'CN'
  ];
  
  final List<String> _englishDays = [
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
  ];
  
  // Stream subscription ƒë·ªÉ l·∫Øng nghe thay ƒë·ªïi t·ª´ Firestore
  StreamSubscription<Map<String, dynamic>>? _mealPlanSubscription;

  @override
  void initState() {
    super.initState();
    
    // Ki·ªÉm tra bi·∫øn t·ª´ main.dart
    if (main_app.isFirebaseInitialized) {
      print('‚úÖ main.dart: Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
      _isFirebaseInitialized = true;
    } else {
      print('‚ùå main.dart: Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
    }
    
    // Kh·ªüi t·∫°o Firebase v√† c√°c service tr∆∞·ªõc
    _initializeFirebaseServices();
  }
  
  @override
  void dispose() {
    // H·ªßy subscription khi widget b·ªã h·ªßy
    _mealPlanSubscription?.cancel();
    super.dispose();
  }
  
  // H√†m kh·ªüi t·∫°o Firebase services
  Future<void> _initializeFirebaseServices() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });
    
    try {
      // Ki·ªÉm tra n·∫øu Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
      Firebase.app();
      print('‚úÖ Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
      
      // Kh·ªüi t·∫°o FirestoreService
      _firestoreService = FirestoreService();
      _isFirebaseInitialized = true;
      
      // Thi·∫øt l·∫≠p listener cho d·ªØ li·ªáu realtime
      _listenToMealPlanChanges();
      
      // Ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
      _loadUserProfile();
      _loadMealPlan();
    } catch (e) {
      print('‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o: $e');
      
      // Log l·ªói chi ti·∫øt
      _logFirebaseError(e);
      
      // Th·ª≠ kh·ªüi t·∫°o Firebase v·ªõi options t∆∞·ªùng minh
      try {
        print('üîÑ ƒêang th·ª≠ kh·ªüi t·∫°o Firebase v·ªõi options t∆∞·ªùng minh...');
        
        // T·∫°o Firebase options t∆∞·ªùng minh
        const androidApiKey = 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0'; // Thay th·∫ø b·∫±ng API key th·ª±c
        const projectId = 'openfood-test';  // Thay th·∫ø b·∫±ng project ID th·ª±c
        const messagingSenderId = '622073990105';  // Thay th·∫ø b·∫±ng sender ID th·ª±c
        const appId = '1:622073990105:android:7ca0800c7e00e32ec4909d';  // Thay th·∫ø b·∫±ng App ID th·ª±c
        
        // L·∫•y package name th·ª±c t·∫ø
        final packageName = await _getPackageName();
        print('üì± Package name t·ª´ getPackageName: $packageName');
        
        // T·∫°o options
        final options = FirebaseOptions(
          apiKey: androidApiKey,
          appId: appId,
          messagingSenderId: messagingSenderId,
          projectId: projectId,
        );
        
        // In ra options ƒë·ªÉ debug
        print('üî• Kh·ªüi t·∫°o Firebase v·ªõi options: $options');
        
        // Th·ª≠ kh·ªüi t·∫°o Firebase v·ªõi options
        await Firebase.initializeApp(options: options);
        
        print('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng t·ª´ DietPlanScreen');
        
        // G√°n bi·∫øn to√†n c·ª•c
        main_app.isFirebaseInitialized = true;
        _isFirebaseInitialized = true;
        
        // Kh·ªüi t·∫°o FirestoreService
        _firestoreService = FirestoreService();
        
        // Thi·∫øt l·∫≠p listener cho d·ªØ li·ªáu realtime
        _listenToMealPlanChanges();
        
        // Ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
        _loadUserProfile();
        _loadMealPlan();
        
        return;
      } catch (initError) {
        print('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase: $initError');
        _logFirebaseError(initError);
        
        // Th·ª≠ kh·ªüi t·∫°o kh√¥ng c·∫ßn options
        try {
          print('üîÑ ƒêang th·ª≠ kh·ªüi t·∫°o Firebase kh√¥ng c·∫ßn options...');
          await Firebase.initializeApp();
          print('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng kh√¥ng c·∫ßn options');
          
          // G√°n bi·∫øn to√†n c·ª•c
          main_app.isFirebaseInitialized = true;
          _isFirebaseInitialized = true;
          
          // Kh·ªüi t·∫°o FirestoreService
          _firestoreService = FirestoreService();
          
          // Thi·∫øt l·∫≠p listener cho d·ªØ li·ªáu realtime
          _listenToMealPlanChanges();
          
          // Ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu
          _loadUserProfile();
          _loadMealPlan();
          
          return;
        } catch (noOptionsError) {
          print('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase kh√¥ng c·∫ßn options: $noOptionsError');
          _logFirebaseError(noOptionsError);
        }
      }
      
      setState(() {
        _isFirebaseInitialized = false;
        _hasError = true;
        _errorMessage = 'Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.\n\nNguy√™n nh√¢n c√≥ th·ªÉ l√†:\n'
            '1. Package name kh√¥ng kh·ªõp v·ªõi c·∫•u h√¨nh Firebase\n'
            '2. File google-services.json kh√¥ng ƒë√∫ng ho·∫∑c b·ªã thi·∫øu\n'
            '3. C√°c options kh√¥ng ƒë√∫ng\n\n'
            'Chi ti·∫øt l·ªói: ${_getReadableErrorMessage(e.toString())}';
        _isLoading = false;
      });
      
      // T·∫£i mock data khi Firebase kh√¥ng kh·∫£ d·ª•ng
      _loadMockData();
    }
  }
  
  // Ghi log l·ªói Firebase chi ti·∫øt
  void _logFirebaseError(dynamic error) {
    try {
      final errorString = error.toString();
      final stackTrace = StackTrace.current.toString();
      
      print('üî¥ === FIREBASE ERROR LOG ===');
      print('üî¥ Error: $errorString');
      print('üî¥ Stack trace: $stackTrace');
      
      // L·∫•y th√¥ng tin thi·∫øt b·ªã v√† ·ª©ng d·ª•ng
      _getPackageName().then((packageName) {
        print('üî¥ Package Name: $packageName');
        print('üî¥ === END ERROR LOG ===');
      });
      
      // Trong th·ª±c t·∫ø b·∫°n c√≥ th·ªÉ l∆∞u log v√†o file ho·∫∑c g·ª≠i l√™n server
    } catch (e) {
      print('Kh√¥ng th·ªÉ ghi log l·ªói: $e');
    }
  }
  
  // L·∫•y th√¥ng b√°o l·ªói d·ªÖ ƒë·ªçc
  String _getReadableErrorMessage(String errorString) {
    if (errorString.contains('no Firebase App')) {
      return 'Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o';
    } else if (errorString.contains('failed to get project configuration')) {
      return 'Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh Firebase - ki·ªÉm tra file google-services.json';
    } else if (errorString.contains('The application\'s package id')) {
      return 'Package name kh√¥ng kh·ªõp v·ªõi c·∫•u h√¨nh Firebase';
    } else {
      // Tr·∫£ v·ªÅ 100 k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa l·ªói ƒë·ªÉ tr√°nh qu√° d√†i
      return errorString.length > 100 ? errorString.substring(0, 100) + '...' : errorString;
    }
  }
  
  // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Firestore
  Future<void> _loadUserProfile() async {
    if (!_isFirebaseInitialized || _firestoreService == null) {
      print('‚ö†Ô∏è B·ªè qua _loadUserProfile v√¨ Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      return;
    }
    
    try {
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      
      // T·∫£i d·ªØ li·ªáu t·ª´ Firestore
      await userDataProvider.
      loadFromFirestore();
      
      // ƒê·ªìng b·ªô v·ªõi API n·∫øu ƒë∆∞·ª£c b·∫≠t
      if (userDataProvider.syncEnabled) {
        userDataProvider.sendToApi();
      }
    } catch (e) {
      debugPrint('L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng: $e');
    }
  }
  
  // H√†m l·∫Øng nghe thay ƒë·ªïi k·∫ø ho·∫°ch ƒÉn realtime t·ª´ Firestore
  void _listenToMealPlanChanges() {
    // H·ªßy subscription hi·ªán t·∫°i n·∫øu c√≥
    _mealPlanSubscription?.cancel();
    
    if (!_isFirebaseInitialized || _firestoreService == null) {
      print('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫Øng nghe thay ƒë·ªïi v√¨ Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      return;
    }
    
    try {
      print('üîÑ B·∫Øt ƒë·∫ßu l·∫Øng nghe thay ƒë·ªïi k·∫ø ho·∫°ch ƒÉn t·ª´ Firestore');
      
      // ƒêƒÉng k√Ω l·∫Øng nghe thay ƒë·ªïi t·ª´ Firestore
      _mealPlanSubscription = _firestoreService!.streamWeeklyMealPlan().listen(
        (mealPlanData) {
          if (!mounted) return;
          
          if (mealPlanData.isNotEmpty) {
            print('‚úÖ Nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t k·∫ø ho·∫°ch ƒÉn t·ª´ Firestore (realtime)');
            setState(() {
              _mealPlan = MealPlan.fromJson(mealPlanData);
              _isLoading = false;
              _hasError = false;
            });
          }
        },
        onError: (error) {
          print('‚ùå L·ªói khi l·∫Øng nghe thay ƒë·ªïi: $error');
        }
      );
    } catch (e) {
      print('‚ùå L·ªói khi thi·∫øt l·∫≠p listener: $e');
    }
  }

  // T·∫£i k·∫ø ho·∫°ch ƒÉn t·ª´ Firebase
  Future<void> _loadMealPlan() async {
    if (!_isFirebaseInitialized || _firestoreService == null) {
      print('‚ö†Ô∏è Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, chuy·ªÉn sang d√πng mock data');
      _loadMockData();
      return;
    }
    
    setState(() {
      _isLoading = true;
      _hasError = false;
      _errorMessage = '';
    });
    
    try {
      // Ki·ªÉm tra x√°c th·ª±c
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }
      
          final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }
      
      print('üîç ƒêang t√¨m ki·∫øm k·∫ø ho·∫°ch ƒÉn cho ng∆∞·ªùi d√πng: $userId');
      
      // ƒê·ªçc d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
      final latestDocSnapshot = await FirebaseFirestore.instance
          .collection('latest_meal_plans')
          .doc(userId)
          .get();
      
      if (latestDocSnapshot.exists && latestDocSnapshot.data() != null) {
        // ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu trong latest_meal_plans
        final result = latestDocSnapshot.data()!;
        print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch tr·ª±c ti·∫øp t·ª´ latest_meal_plans');
        
        if (mounted) {
          setState(() {
            _mealPlan = MealPlan.fromJson(result);
            _isLoading = false;
            _hasError = false;
          });
          
          // Ki·ªÉm tra tr√πng l·∫∑p m√≥n ƒÉn v√† t·ª± ƒë·ªông t·∫°o m·ªõi n·∫øu c·∫ßn
          _autoGenerateIfDuplicated();
        }
        return; // ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu, kh√¥ng c·∫ßn ki·ªÉm tra th√™m
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
      print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans, ki·ªÉm tra meal_plans');
      final docSnapshot = await FirebaseFirestore.instance
          .collection('meal_plans')
          .doc(userId)
          .get();
      
      if (docSnapshot.exists && docSnapshot.data() != null) {
        // ƒê√£ t√¨m th·∫•y d·ªØ li·ªáu trong meal_plans
        final result = docSnapshot.data()!;
        print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch tr·ª±c ti·∫øp t·ª´ meal_plans');
        
        if (mounted) {
          setState(() {
            _mealPlan = MealPlan.fromJson(result);
            _isLoading = false;
            _hasError = false;
          });
          
          // Ki·ªÉm tra tr√πng l·∫∑p m√≥n ƒÉn v√† t·ª± ƒë·ªông t·∫°o m·ªõi n·∫øu c·∫ßn
          _autoGenerateIfDuplicated();
        }
      } else {
        // Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu, c·∫ßn t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi th√¥ng qua API
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong Firestore, t·∫°o m·ªõi qua API');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o m·ªõi
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi...'),
              duration: Duration(seconds: 2),
            ),
          );
        }
        
        // L·∫•y m·ª•c ti√™u dinh d∆∞·ª°ng t·ª´ d·ªØ li·ªáu ng∆∞·ªùi d√πng
            final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
            final caloriesTarget = userDataProvider.tdeeCalories > 0 
                ? userDataProvider.tdeeCalories 
            : app_config.defaultCaloriesTarget;
            final proteinTarget = userDataProvider.tdeeProtein > 0 
                ? userDataProvider.tdeeProtein 
            : app_config.defaultProteinTarget;
            final fatTarget = userDataProvider.tdeeFat > 0 
                ? userDataProvider.tdeeFat 
            : app_config.defaultFatTarget;
            final carbsTarget = userDataProvider.tdeeCarbs > 0 
                ? userDataProvider.tdeeCarbs
            : app_config.defaultCarbsTarget;
        
        // G·ªçi API ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
        try {
          // T·∫°o d·ªØ li·ªáu JSON cho body
          final requestData = {
            'user_id': userId,
            'calories_target': caloriesTarget,
            'protein_target': proteinTarget,
            'fat_target': fatTarget,
            'carbs_target': carbsTarget,
            'use_ai': true,
          };
          
          // Th√™m preferences n·∫øu c√≥
          if (userDataProvider.preferences != null && userDataProvider.preferences.isNotEmpty) {
            requestData['preferences'] = userDataProvider.preferences;
          }
          if (userDataProvider.allergies != null && userDataProvider.allergies.isNotEmpty) {
            requestData['allergies'] = userDataProvider.allergies;
          }
          if (userDataProvider.cuisineStyle != null && userDataProvider.cuisineStyle!.isNotEmpty) {
            requestData['cuisine_style'] = userDataProvider.cuisineStyle!;
          }
          
          // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/generate ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
          final headers = await ApiService.getAuthHeaders();
          final generateUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.generateMealPlan}');
          
          print('üîÑ ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi t·ª´ API: $generateUrl');
          print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');
          
          final response = await http.post(
            generateUrl,
            headers: {
              ...headers,
              'Content-Type': 'application/json',
            },
            body: jsonEncode(requestData),
          ).timeout(
            Duration(seconds: 60), // TƒÉng timeout l√™n 60 gi√¢y v√¨ t·∫°o k·∫ø ho·∫°ch ƒÉn c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian
            onTimeout: () {
              print('‚è±Ô∏è Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
              return http.Response('{"error": "Timeout"}', 408);
            },
          );
          
          if (response.statusCode == 200 || response.statusCode == 201) {
            print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi th√†nh c√¥ng');
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi, ƒëang ch·ªù c·∫≠p nh·∫≠t t·ª´ Firebase...'),
                  backgroundColor: Colors.green,
                  duration: Duration(seconds: 3),
                ),
              );
            }
            
            // ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
            await Future.delayed(Duration(seconds: 2));
            
            // ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
            final latestUpdatedDoc = await FirebaseFirestore.instance
                .collection('latest_meal_plans')
                .doc(userId)
                .get();
            
            if (latestUpdatedDoc.exists && latestUpdatedDoc.data() != null) {
              final result = latestUpdatedDoc.data()!;
              print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans');
              
              if (mounted) {
                setState(() {
                  _mealPlan = MealPlan.fromJson(result);
                  _isLoading = false;
                  _hasError = false;
                });
              }
              return;
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans sau khi t·∫°o, ki·ªÉm tra meal_plans');
            final updatedDoc = await FirebaseFirestore.instance
                .collection('meal_plans')
                .doc(userId)
                .get();
            
            if (updatedDoc.exists && updatedDoc.data() != null) {
              final result = updatedDoc.data()!;
              print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ meal_plans');
      
      if (mounted) {
        setState(() {
          _mealPlan = MealPlan.fromJson(result);
          _isLoading = false;
                  _hasError = false;
                });
              }
            } else {
              // N·∫øu v·∫´n kh√¥ng c√≥ d·ªØ li·ªáu, t·∫°o d·ªØ li·ªáu m·∫´u
              print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong Firestore sau khi t·∫°o, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
              _loadMockData();
            }
          } else {
            // L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
            print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode} - ${response.body}');
            throw Exception('L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode}');
          }
        } catch (apiError) {
          print('‚ùå L·ªói khi g·ªçi API t·∫°o k·∫ø ho·∫°ch ƒÉn: $apiError');
          
          // N·∫øu kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi qua API, t·∫°o d·ªØ li·ªáu m·∫´u
          _loadMockData();
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫£i k·∫ø ho·∫°ch ƒÉn: $e');
      
      if (mounted) {
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = 'Kh√¥ng th·ªÉ t·∫£i k·∫ø ho·∫°ch ƒÉn: ${e.toString()}';
        });
      }
      
      // T·∫£i d·ªØ li·ªáu m·∫´u khi c√≥ l·ªói
      _loadMockData();
    }
  }
  
  // Sync meal plan data with API
  Future<void> _syncMealPlanToAPI(Map<String, dynamic> mealPlanData) async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId != null) {
        final apiConnected = await ApiService.checkConnection();
        if (apiConnected) {
          // Convert Timestamp objects to ISO strings
          final convertedData = _convertFirestoreTimestamps(mealPlanData);
          
          // Add user ID to data
          final dataWithUserId = {
            'user_id': userId,
            ...convertedData,
            'updated_at': DateTime.now().toIso8601String(),
          };
          
          final success = await ApiService.sendMealPlan(dataWithUserId);
          if (success) {
            print('‚úÖ ƒê√£ ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n API');
          } else {
            print('‚ùå Kh√¥ng th·ªÉ ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n API');
          }
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n API: $e');
    }
  }
  
  // H√†m chuy·ªÉn ƒë·ªïi Timestamp t·ª´ Firestore sang d·∫°ng chu·ªói ISO
  Map<String, dynamic> _convertFirestoreTimestamps(Map<String, dynamic> data) {
    final result = Map<String, dynamic>.from(data);
    
    void convertValue(dynamic value, Function(dynamic) convert) {
      if (value is Map<String, dynamic>) {
        value.forEach((key, val) {
          value[key] = convert(val);
        });
      } else if (value is List) {
        for (int i = 0; i < value.length; i++) {
          value[i] = convert(value[i]);
        }
      }
    }
    
    dynamic convert(dynamic value) {
      if (value == null) {
        return null;
      } else if (value.toString().contains('Timestamp')) {
        // Chuy·ªÉn ƒë·ªïi Timestamp th√†nh chu·ªói ISO
        try {
          // N·∫øu l√† Timestamp t·ª´ Firestore
          return value.toDate().toIso8601String();
        } catch (e) {
          // N·∫øu kh√¥ng th·ªÉ convert, tr·∫£ v·ªÅ chu·ªói
          return value.toString();
        }
      } else if (value is Map) {
        convertValue(value, convert);
      } else if (value is List) {
        convertValue(value, convert);
      }
      return value;
    }
    
    result.forEach((key, value) {
      result[key] = convert(value);
    });
    
    return result;
  }
  
  // ƒê·ªìng b·ªô d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn v·ªõi Firestore
  Future<void> _syncMealPlanData(Map<String, dynamic> mealPlanData) async {
    if (!_isFirebaseInitialized || _firestoreService == null) {
      print('‚ö†Ô∏è B·ªè qua _syncMealPlanData v√¨ Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      return;
    }
    
    // Try API sync first
    await _syncMealPlanToAPI(mealPlanData);
    
    // Backup to Firestore
    try {
      await _firestoreService!.updateMealPlan(mealPlanData);
      print('‚úÖ ƒê√£ ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n Firestore (backup)');
    } catch (e) {
      print('‚ùå L·ªói khi ƒë·ªìng b·ªô k·∫ø ho·∫°ch ƒÉn l√™n Firestore: $e');
    }
  }

  // Load mock data when Firebase is not available
  Future<void> _loadMockData() async {
    try {
      final mockResult = await MealPlanApiService.getMockMealPlan();
      if (mounted) {
        setState(() {
          _mealPlan = MealPlan.fromJson(mockResult);
          _isLoading = false;
        });
      }
    } catch (mockError) {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu m·∫´u: $mockError';
        });
      }
    }
  }

  @override  
  Widget build(BuildContext context) {    
    // Apply a custom text scale factor to make all text smaller
    return MediaQuery(
      data: MediaQuery.of(context).copyWith(
        textScaleFactor: 1.0, // Use default text size scaling
      ),
      child: Scaffold(
        body: SafeArea(
          child: _isLoading 
              ? _buildLoadingState()
              : _hasError 
                  ? _buildErrorState() 
                  : _buildBody(),
        ),
        floatingActionButton: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            FloatingActionButton(
              heroTag: "configApi",
              onPressed: _showApiConfig,
              backgroundColor: Colors.purple,
              mini: true,
              child: Icon(Icons.settings),
              tooltip: 'C·∫•u h√¨nh API',
            ),
            SizedBox(height: 8),
            FloatingActionButton(
              heroTag: "checkFirestore",
              onPressed: _checkFirestoreData,
              backgroundColor: Colors.blue,
              mini: true,
              child: Icon(Icons.data_usage),
              tooltip: 'Ki·ªÉm tra d·ªØ li·ªáu Firebase',
            ),
            SizedBox(height: 8),
            FloatingActionButton(
              heroTag: "reload",
              onPressed: _loadMealPlan,
              backgroundColor: Colors.green,
              child: Icon(Icons.refresh),
              tooltip: 'T·∫£i l·∫°i',
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildLoadingState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(),
          SizedBox(height: 16),
          Text('ƒêang t·∫£i k·∫ø ho·∫°ch th·ª±c ƒë∆°n...'),
        ],
      ),
    );
  }
  
  Widget _buildErrorState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, color: Colors.red, size: 48),
          SizedBox(height: 16),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24.0),
            child: Text(_errorMessage, textAlign: TextAlign.center),
          ),
          SizedBox(height: 24),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _loadMealPlan,
                child: Text('Th·ª≠ l·∫°i'),
              ),
              SizedBox(width: 16),
              ElevatedButton(
                onPressed: _checkFirebaseConnection,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.amber,
                ),
                child: Text('Ki·ªÉm tra Firebase'),
              ),
            ],
          ),
          SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _checkPackageName,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueGrey,
                ),
                child: Text('Ki·ªÉm tra Package Name'),
              ),
              SizedBox(width: 16),
              ElevatedButton(
                onPressed: _checkFirestoreData,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                ),
                child: Text('Ki·ªÉm tra d·ªØ li·ªáu Firestore'),
              ),
            ],
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: _generateNewMealPlan,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            ),
            child: Text('T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi', style: TextStyle(fontSize: 16)),
          ),
        ],
      ),
    );
  }
  
  Widget _buildBody() {
    if (_mealPlan == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch th·ª±c ƒë∆°n'),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _generateNewMealPlan,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
              child: Text('T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi', style: TextStyle(fontSize: 16)),
            ),
          ],
        ),
      );
    }
    
    // Debug - in th√¥ng tin v·ªÅ k·∫ø ho·∫°ch ƒÉn
    print('üçΩÔ∏è MealPlan.weeklyPlan c√≥ ${_mealPlan!.weeklyPlan.length} ng√†y');
    print('üçΩÔ∏è C√°c ng√†y c√≥ trong k·∫ø ho·∫°ch: ${_mealPlan!.weeklyPlan.keys.toList()}');
    
    final selectedDayName = _englishDays[_selectedDayIndex];
    print('üçΩÔ∏è Ng√†y ƒë√£ ch·ªçn: $selectedDayName');
    
    final dayPlan = _mealPlan!.weeklyPlan[selectedDayName];
    
    if (dayPlan == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë√£ ch·ªçn'),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _generateNewMealPlan,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
              ),
              child: Text('T·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi'),
            ),
          ],
        ),
      );
    }
    
    // Get total nutrition values for the day
    final totalCalories = dayPlan.nutritionSummary['calories']?.round() ?? 0;
    final totalProtein = dayPlan.nutritionSummary['protein']?.round() ?? 0;
    final totalFat = dayPlan.nutritionSummary['fat']?.round() ?? 0;
    final totalCarbs = dayPlan.nutritionSummary['carbs']?.round() ?? 0;
    
    return Column(
      children: [
        Expanded(
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildDayTabs(),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                    'K·∫ø ho·∫°ch dinh d∆∞·ª°ng c√¢n b·∫±ng ch·∫•t',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                      ),
                      IconButton(
                        icon: Icon(Icons.refresh, color: Colors.blue),
                        onPressed: _loadMealPlan,
                        tooltip: 'T·∫£i l·∫°i k·∫ø ho·∫°ch',
                      ),
                    ],
                  ),
                ),
                _buildNutritionSummary(
                  calories: totalCalories,
                  protein: totalProtein,
                  fat: totalFat,
                  carbs: totalCarbs,
                ),
                
                // Build each meal type
                ...dayPlan.meals.entries.map((entry) {
                  final mealType = entry.key;
                  final meals = entry.value;
                  
                  if (meals.isEmpty) return SizedBox.shrink();
                  
                  IconData mealIcon;
                  switch (mealType) {
                    case 'B·ªØa s√°ng':
                      mealIcon = Icons.wb_sunny_outlined;
                      break;
                    case 'B·ªØa tr∆∞a':
                      mealIcon = Icons.cloud_outlined;
                      break;
                    case 'B·ªØa t·ªëi':
                      mealIcon = Icons.nights_stay_outlined;
                      break;
                    default:
                      mealIcon = Icons.access_time;
                  }
                  
                  // Use the first meal in the list for this meal type
                  final meal = meals.first;
                  
                  return _buildMealSectionFromMeal(
                    icon: mealIcon,
                    title: mealType,
                    meal: meal,
                  );
                }).toList(),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildDayTabs() {
    return Container(
      height: 50,
      margin: EdgeInsets.symmetric(vertical: 8),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: _daysOfWeek.length,
        itemBuilder: (context, index) {
          final isSelected = index == _selectedDayIndex;
          return GestureDetector(
            onTap: () {
              setState(() {
                _selectedDayIndex = index;
              });
            },
            child: Container(
              width: 70,
              margin: EdgeInsets.symmetric(horizontal: 4),
              decoration: BoxDecoration(
                color: isSelected ? AppColors.primaryLight.withOpacity(0.3) : Colors.transparent,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Center(
                child: Text(
                  _daysOfWeek[index],
                  style: TextStyle(
                    fontSize: 14,
                    color: isSelected ? AppColors.primary : Colors.black54,
                    fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildNutritionSummary({
    required int calories,
    required int protein,
    required int fat,
    required int carbs,
  }) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: EdgeInsets.symmetric(vertical: 12, horizontal: 10),
      decoration: BoxDecoration(
        color: AppColors.cardBackground,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildNutrientItem(
            icon: Icons.local_fire_department,
            color: Colors.red,
            value: calories.toString(),
            unit: 'Calo',
          ),
          _buildNutrientItem(
            icon: Icons.adjust_rounded,
            color: Colors.blue,
            value: '${protein}g',
            unit: 'Protein',
          ),
          _buildNutrientItem(
            icon: Icons.water_drop_outlined,
            color: Colors.orange,
            value: '${fat}g',
            unit: 'Ch·∫•t b√©o',
          ),
          _buildNutrientItem(
            icon: Icons.grass,
            color: Colors.green,
            value: '${carbs}g',
            unit: 'Carbs',
          ),
        ],
      ),
    );
  }

  Widget _buildNutrientItem({
    required IconData icon,
    required Color color,
    required String value,
    required String unit,
  }) {
    return Column(
      children: [
        Icon(icon, color: color, size: 22),
        SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: color,
          ),
        ),
        Text(
          unit,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey.shade600,
          ),
        ),
      ],
    );
  }

  Widget _buildMealSectionFromMeal({
    required IconData icon,
    required String title,
    required Meal meal,
  }) {
    // Get nutrition values for the meal
    final calories = meal.nutrition['calories']?.round() ?? 0;
    final protein = meal.nutrition['protein']?.round() ?? 0;
    final fat = meal.nutrition['fat']?.round() ?? 0;
    final carbs = meal.nutrition['carbs']?.round() ?? 0;
    
    // Debug information about cooking instructions
    print('üìù Meal instructions for ${meal.name}: ${meal.instructions}');
    print('üìù Meal instructions length: ${meal.instructions.length}');
    print('üìù Meal instructions isEmpty: ${meal.instructions.isEmpty}');
    
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: AppColors.cardBackground,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Header with meal type and nutrition values
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Meal title
                Row(
                children: [
                  Icon(icon, size: 18),
                  SizedBox(width: 8),
                    Expanded(
                      child: Text(
                    title,
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                    ),
                  ],
                ),
                
                // Nutrition values in a separate row with Expanded to avoid overflow
                SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    Expanded(
                      child: _buildMealNutrient(Icons.local_fire_department, calories.toString(), 'kcal', Colors.red),
                    ),
                    Expanded(
                      child: _buildMealNutrient(Icons.adjust_rounded, protein.toString(), 'g', Colors.blue),
                    ),
                    Expanded(
                      child: _buildMealNutrient(Icons.water_drop_outlined, fat.toString(), 'g', Colors.orange),
                    ),
                    Expanded(
                      child: _buildMealNutrient(Icons.grass, carbs.toString(), 'g', Colors.green),
                    ),
                  ],
                ),
              ],
            ),
          ),

          // Divider
          Divider(height: 1, thickness: 1, color: AppColors.textLight.withOpacity(0.3)),

          // Meal content
          Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Meal name
                Row(
                  children: [
                    Icon(Icons.restaurant, size: 16, color: Colors.grey.shade700),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        meal.name,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                  ],
                ),
                
                SizedBox(height: 8),
                
                // Meal description
                Text(
                  meal.description,
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey.shade700,
                  ),
                ),

                SizedBox(height: 16),

                // Ingredients
                Text(
                  'Nguy√™n li·ªáu:',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                SizedBox(height: 8),
                for (var ingredient in meal.ingredients)
                  Padding(
                    padding: const EdgeInsets.only(bottom: 6),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('‚Ä¢ ', style: TextStyle(fontWeight: FontWeight.bold)),
                        Expanded(
                          child: _buildFormattedIngredient(ingredient),
                        ),
                      ],
                    ),
                  ),
                
                // H∆∞·ªõng d·∫´n n·∫•u ƒÉn (th√™m m·ªõi)
                SizedBox(height: 16),
                Text(
                  'H∆∞·ªõng d·∫´n n·∫•u:',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.black87,
                  ),
                ),
                SizedBox(height: 8),
                if (meal.instructions != null && meal.instructions.isNotEmpty)
                  for (var i = 0; i < meal.instructions.length; i++)
                    Padding(
                      padding: const EdgeInsets.only(bottom: 8),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            width: 24,
                            height: 24,
                            decoration: BoxDecoration(
                              color: AppColors.primaryLight,
                              shape: BoxShape.circle,
                            ),
                            child: Center(
                              child: Text(
                                '${i + 1}',
                                style: TextStyle(
                                  color: AppColors.primary,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            ),
                          ),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              meal.instructions[i],
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.black87,
                              ),
                            ),
                          ),
                        ],
                      ),
                    )
                else
                  Text(
                    'Kh√¥ng c√≥ h∆∞·ªõng d·∫´n chi ti·∫øt cho m√≥n ƒÉn n√†y.',
                    style: TextStyle(
                      fontSize: 14,
                      fontStyle: FontStyle.italic,
                      color: Colors.grey.shade600,
                    ),
                  ),

                // Replace and save buttons
                SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        icon: Icon(Icons.refresh, size: 16),
                        label: Text(
                          'Thay th·∫ø AI',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        onPressed: () {
                          // Replace this meal with a new suggestion
                          _replaceMeal(title);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppColors.primaryLight,
                          foregroundColor: AppColors.primary,
                          elevation: 0,
                          padding: EdgeInsets.symmetric(vertical: 8),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                      ),
                    ),
                    SizedBox(width: 8),
                    Expanded(
                      child: ElevatedButton.icon(
                        icon: Icon(Icons.add, size: 16),
                        label: Text(
                          'Ghi l·∫°i th·ª±c ƒë∆°n',
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        onPressed: () {
                          // Add this meal to food log
                          _addMealToFoodLog(meal, title);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppColors.primaryLight,
                          foregroundColor: AppColors.primary,
                          elevation: 0,
                          padding: EdgeInsets.symmetric(vertical: 8),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMealNutrient(IconData icon, String value, String unit, Color color) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Icon(
          icon,
          size: 14,
          color: color,
        ),
        SizedBox(height: 2),
        Text(
          '$value',
          style: TextStyle(
            fontSize: 11,
            fontWeight: FontWeight.bold,
            color: color,
          ),
          textAlign: TextAlign.center,
          overflow: TextOverflow.ellipsis,
        ),
        Text(
          unit,
          style: TextStyle(
            fontSize: 9,
            color: color.withOpacity(0.8),
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
  
  // Handle replacing a meal
  Future<void> _replaceMeal(String mealType) async {
    final snackBar = SnackBar(
      content: Text('ƒêang thay th·∫ø $mealType...'),
      duration: Duration(seconds: 1),
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
    
    try {
      // Check if we're authenticated
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }
      
      // Get selected day
      final selectedDay = _englishDays[_selectedDayIndex];
      final selectedDayName = _convertToAPIDay(selectedDay);
      
      // Get user nutrition goals or use defaults
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final caloriesTarget = userDataProvider.tdeeCalories > 0 
          ? userDataProvider.tdeeCalories 
          : 2000.0;
      final proteinTarget = userDataProvider.tdeeProtein > 0 
          ? userDataProvider.tdeeProtein 
          : 120.0;
      final fatTarget = userDataProvider.tdeeFat > 0 
          ? userDataProvider.tdeeFat 
          : 65.0;
      final carbsTarget = userDataProvider.tdeeCarbs > 0 
          ? userDataProvider.tdeeCarbs
          : 250.0;
      
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }
      
      // User preferences
      final preferences = userDataProvider.preferences;
      final allergies = userDataProvider.allergies;
      final cuisineStyle = userDataProvider.cuisineStyle;
      
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒêang g·ª≠i y√™u c·∫ßu thay th·∫ø $mealType ƒë·∫øn server...'),
          backgroundColor: Colors.orange,
          duration: Duration(seconds: 5),
        ),
      );
      
      // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/replace-meal ƒë·ªÉ thay th·∫ø b·ªØa ƒÉn
      final headers = await ApiService.getAuthHeaders();
      final replaceUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.replaceMeal}');
      
      // T·∫°o d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng cho API
      // ƒê·∫∑t c√°c gi√° tr·ªã dinh d∆∞·ª°ng ·ªü c·∫•p cao nh·∫•t theo y√™u c·∫ßu c·ªßa API
      final requestData = {
        'user_id': userId,
        'day_of_week': selectedDayName,
        'meal_type': mealType,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': true,
      };
      
      // Th√™m preferences d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (preferences != null && preferences.isNotEmpty) {
        requestData['preferences'] = preferences;
      }
      
      // Th√™m allergies d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (allergies != null && allergies.isNotEmpty) {
        requestData['allergies'] = allergies;
      }
      
      // Th√™m cuisine_style n·∫øu c√≥
      if (cuisineStyle != null && cuisineStyle!.isNotEmpty) {
        requestData['cuisine_style'] = cuisineStyle!;
      }
      
      print('üîÑ ƒêang thay th·∫ø b·ªØa ƒÉn t·ª´ API: $replaceUrl');
      print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');
      
      try {
        // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang k·∫øt n·ªëi
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒêang k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß...'),
            backgroundColor: Colors.blue,
            duration: Duration(seconds: 2),
          ),
        );
        
        final response = await http.post(
          replaceUrl,
          headers: {
            ...headers,
            'Content-Type': 'application/json',
          },
          body: jsonEncode(requestData),
        ).timeout(
          Duration(seconds: 60),  // TƒÉng timeout l√™n 60 gi√¢y
          onTimeout: () {
            print('‚è±Ô∏è Timeout khi thay th·∫ø b·ªØa ƒÉn');
            return http.Response('{"error": "Timeout"}', 408);
          },
        );
        
        // In ra to√†n b·ªô th√¥ng tin v·ªÅ response
        print('üîç Response status: ${response.statusCode}');
        print('üîç Response body: ${response.body}');
        print('üîç Response headers: ${response.headers}');
        
        if (response.statusCode == 200) {
        print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu thay th·∫ø b·ªØa ƒÉn th√†nh c√¥ng');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒê√£ g·ª≠i y√™u c·∫ßu thay th·∫ø $mealType, ƒëang ƒë·ª£i c·∫≠p nh·∫≠t t·ª´ Firebase...'),
            backgroundColor: Colors.blue,
            duration: Duration(seconds: 3),
          ),
        );
        
          // ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
          await Future.delayed(Duration(seconds: 2));
          
          // ƒê·ªçc l·∫°i d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
          final latestDocSnapshot = await FirebaseFirestore.instance
              .collection('latest_meal_plans')
              .doc(userId)
              .get();
          
          if (latestDocSnapshot.exists && latestDocSnapshot.data() != null) {
            final result = latestDocSnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch ƒÉn c·∫≠p nh·∫≠t t·ª´ latest_meal_plans');
            
            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('ƒê√£ thay th·∫ø $mealType th√†nh c√¥ng!'),
                backgroundColor: Colors.green,
                duration: Duration(seconds: 2),
              ),
            );
            return;
          }
          
          // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
          print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans, ki·ªÉm tra meal_plans');
          final docSnapshot = await FirebaseFirestore.instance
              .collection('meal_plans')
              .doc(userId)
              .get();
          
          if (docSnapshot.exists && docSnapshot.data() != null) {
            final result = docSnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch ƒÉn c·∫≠p nh·∫≠t t·ª´ meal_plans');
            
            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });
              
              // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ thay th·∫ø $mealType th√†nh c√¥ng!'),
                  backgroundColor: Colors.green,
                duration: Duration(seconds: 2),
              ),
            );
          } else {
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫≠p nh·∫≠t trong Firestore');
            throw Exception('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·∫≠p nh·∫≠t trong Firestore');
          }
        } else if (response.statusCode == 422) {
          // L·ªói d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
          print('‚ùå L·ªói 422 - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${response.body}');
          
          // Ph√¢n t√≠ch l·ªói chi ti·∫øt
          try {
            final errorData = jsonDecode(response.body);
            print('‚ùå Chi ti·∫øt l·ªói JSON: $errorData');
            
            if (errorData['detail'] is List) {
              for (var error in errorData['detail']) {
                print('‚ùå L·ªói tr∆∞·ªùng: ${error['loc']}, Lo·∫°i: ${error['type']}, Th√¥ng b√°o: ${error['msg']}');
              }
            } else {
              print('‚ùå Chi ti·∫øt l·ªói: ${errorData['detail']}');
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('L·ªói d·ªØ li·ªáu: ${errorData['detail']}'),
                backgroundColor: Colors.red,
                duration: Duration(seconds: 5),
              ),
            );
          } catch (e) {
            print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
          }
          
          throw Exception('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: Vui l√≤ng ki·ªÉm tra l·∫°i');
        } else if (response.statusCode == 404) {
          // Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn, t·∫°o m·ªõi
          print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn, ƒëang t·∫°o k·∫ø ho·∫°ch m·ªõi...');
          
          // Hi·ªÉn th·ªã th√¥ng b√°o
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn, ƒëang t·∫°o k·∫ø ho·∫°ch m·ªõi...'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 3),
            ),
          );
          
          // G·ªçi ph∆∞∆°ng th·ª©c t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
          await _generateNewMealPlan();
          
          // Sau khi t·∫°o m·ªõi, th·ª≠ thay th·∫ø b·ªØa ƒÉn l·∫°i
          print('üîÑ ƒêang th·ª≠ l·∫°i thay th·∫ø b·ªØa ƒÉn sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi...');
          
          // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o k·∫ø ho·∫°ch m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u
          await Future.delayed(Duration(seconds: 3));
          
          // G·ªçi l·∫°i API thay th·∫ø b·ªØa ƒÉn
          final retryResponse = await http.post(
            replaceUrl,
            headers: {
              ...headers,
              'Content-Type': 'application/json',
            },
            body: jsonEncode(requestData),
          ).timeout(
            Duration(seconds: 60),
            onTimeout: () {
              print('‚è±Ô∏è Timeout khi thay th·∫ø b·ªØa ƒÉn (l·∫ßn th·ª≠ l·∫°i)');
              return http.Response('{"error": "Timeout"}', 408);
            },
          );
          
          if (retryResponse.statusCode == 200) {
            print('‚úÖ ƒê√£ thay th·∫ø b·ªØa ƒÉn th√†nh c√¥ng sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi');
              
              // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ thay th·∫ø $mealType th√†nh c√¥ng!'),
                  backgroundColor: Colors.green,
                duration: Duration(seconds: 2),
              ),
            );
            
            // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firestore
            await _loadMealPlan();
            return;
          } else {
            print('‚ùå V·∫´n kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi: ${retryResponse.statusCode}');
            throw Exception('Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn sau khi t·∫°o k·∫ø ho·∫°ch m·ªõi');
          }
        } else if (response.statusCode == 403) {
          // L·ªói x√°c th·ª±c
          print('‚ùå L·ªói x√°c th·ª±c: ${response.statusCode} - ${response.body}');
          throw Exception('L·ªói x√°c th·ª±c: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        } else if (response.statusCode == 500) {
          // L·ªói server
          print('‚ùå L·ªói server: ${response.statusCode} - ${response.body}');
          
          // Ph√¢n t√≠ch l·ªói chi ti·∫øt
          String errorMessage = 'L·ªói server';
          try {
            final errorData = jsonDecode(response.body);
            if (errorData['detail'] != null) {
              errorMessage = errorData['detail'];
              
              // Ki·ªÉm tra n·∫øu l√† l·ªói module 'services'
              if (errorMessage.contains("module 'services' has no attribute")) {
                errorMessage = 'L·ªói c·∫•u h√¨nh server: Thi·∫øu module x·ª≠ l√Ω b·ªØa ƒÉn';
              }
            }
          } catch (e) {
            print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
          }
          
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('L·ªói server: $errorMessage\n\nƒêang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase...'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 5),
            ),
          );
          
          // Th·ª≠ t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase thay v√¨ b√°o l·ªói
          print('‚ö†Ô∏è G·∫∑p l·ªói server, ƒëang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase...');
          await _loadMealPlan();
          return;
          
          // throw Exception('L·ªói server: $errorMessage'); // Kh√¥ng throw exception n·ªØa
            } else {
          // L·ªói kh√°c
          print('‚ùå L·ªói khi thay th·∫ø b·ªØa ƒÉn: ${response.statusCode} - ${response.body}');
          throw Exception('L·ªói khi thay th·∫ø b·ªØa ƒÉn: ${response.statusCode}');
        }
      } catch (e) {
        print('‚ùå‚ùå‚ùå L·ªói khi g·ªçi API: $e');
        rethrow;
      }
    } catch (e) {
      print('L·ªói khi thay th·∫ø b·ªØa ƒÉn: $e');
      
      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi
      String errorMessage = 'Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn';
      Color errorColor = Colors.red;
      
      // Ki·ªÉm tra lo·∫°i l·ªói c·ª• th·ªÉ
      if (e.toString().contains('SocketException') || 
          e.toString().contains('Connection refused') ||
          e.toString().contains('Failed host lookup')) {
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra:\n'
            '1. K·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n\n'
            '2. M√°y ch·ªß API ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông\n'
            '3. ƒê·ªãa ch·ªâ IP trong c·∫•u h√¨nh ƒë√£ ch√≠nh x√°c';
        errorColor = Colors.orange;
      } else if (e.toString().contains('Timeout')) {
        errorMessage = 'K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß qu√° ch·∫≠m ho·∫∑c m√°y ch·ªß kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.';
        errorColor = Colors.orange;
      } else {
        errorMessage = 'Kh√¥ng th·ªÉ thay th·∫ø b·ªØa ƒÉn: ${e.toString()}';
      }
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(errorMessage),
          backgroundColor: errorColor,
          duration: Duration(seconds: 5),
        ),
      );
    }
  }
  
  // H√†m chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y sang ƒë·ªãnh d·∫°ng API
  String _convertToAPIDay(String day) {
    // API s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng "Th·ª© 2", "Th·ª© 3", v.v.
    switch (day) {
      case 'Monday': return 'Th·ª© 2';
      case 'Tuesday': return 'Th·ª© 3';
      case 'Wednesday': return 'Th·ª© 4';
      case 'Thursday': return 'Th·ª© 5';
      case 'Friday': return 'Th·ª© 6';
      case 'Saturday': return 'Th·ª© 7';
      case 'Sunday': return 'Ch·ªß Nh·∫≠t';
      default: return day;
    }
  }
  
  // H√†m chuy·ªÉn ƒë·ªïi t·ª´ ƒë·ªãnh d·∫°ng API sang ƒë·ªãnh d·∫°ng ·ª©ng d·ª•ng
  String _convertFromAPIDay(String day) {
    // Chuy·ªÉn t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
    switch (day) {
      case 'Th·ª© 2': return 'Monday';
      case 'Th·ª© 3': return 'Tuesday';
      case 'Th·ª© 4': return 'Wednesday';
      case 'Th·ª© 5': return 'Thursday';
      case 'Th·ª© 6': return 'Friday';
      case 'Th·ª© 7': return 'Saturday';
      case 'Ch·ªß Nh·∫≠t': return 'Sunday';
      default: return day;
    }
  }
  
  // Handle adding the meal to food log
  void _addMealToFoodLog(Meal meal, String mealType) {
    // Create a FoodItem from the meal data
    final foodItem = FoodItem(
      id: Uuid().v4(),
      name: meal.name,
      calories: meal.nutrition['calories']?.toDouble() ?? 0.0,
      protein: meal.nutrition['protein']?.toDouble() ?? 0.0,
      fat: meal.nutrition['fat']?.toDouble() ?? 0.0,
      carbs: meal.nutrition['carbs']?.toDouble() ?? 0.0,
      fiber: meal.nutrition['fiber']?.toDouble(),
      sugar: meal.nutrition['sugar']?.toDouble(),
      sodium: meal.nutrition['sodium']?.toDouble(),
      servingSize: 1.0,
      servingUnit: 'serving',
      additionalNutrients: Map<String, dynamic>.from(meal.nutrition),
    );

    // Create a FoodEntry with the FoodItem
    final foodEntry = FoodEntry(
      id: Uuid().v4(),
      description: meal.name,
      mealType: mealType,
      dateTime: DateTime.now(),
      nutritionInfo: Map<String, dynamic>.from(meal.nutrition),
      items: [foodItem],
    );

    // Navigate to the FoodNutritionDetailScreen
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => FoodNutritionDetailScreen(
          foodEntry: foodEntry,
          onSave: (updatedEntry) {
            // Get the FoodProvider and add the entry
            final foodProvider = Provider.of<FoodProvider>(context, listen: false);
            foodProvider.addFoodEntry(updatedEntry);
            
            // Show a success message
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('ƒê√£ th√™m "${meal.name}" v√†o nh·∫≠t k√Ω th·ª±c ph·∫©m'),
                duration: Duration(seconds: 2),
              ),
            );
          },
        ),
      ),
    );
  }

  // H√†m ki·ªÉm tra package name
  Future<void> _checkPackageName() async {
    try {
      WidgetsFlutterBinding.ensureInitialized();
      
      // In ra th√¥ng tin package name v√† c√°c th√¥ng tin quan tr·ªçng kh√°c
      print('üîç ƒêang ki·ªÉm tra th√¥ng tin ·ª©ng d·ª•ng...');
      
      // L·∫•y package name t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau ƒë·ªÉ so s√°nh
      final packageInfoPackageName = await _getPackageName();
      print('üì± Package Name t·ª´ PackageInfo: $packageInfoPackageName');
      
      // L·∫•y package name t·ª´ toString() c·ªßa context
      final contextPackageName = context.toString().contains('package:') 
          ? context.toString().split('package:')[1].split('/')[0]
          : 'kh√¥ng x√°c ƒë·ªãnh';
      print('üì± Package Name t·ª´ context: $contextPackageName');
      
      // So s√°nh c√°c package name
      final packageNameMismatch = packageInfoPackageName != contextPackageName && 
                                 packageInfoPackageName != 'unknown' && 
                                 contextPackageName != 'kh√¥ng x√°c ƒë·ªãnh';
      
      if (packageNameMismatch) {
        print('‚ö†Ô∏è C·∫¢NH B√ÅO: Ph√°t hi·ªán c√≥ nhi·ªÅu package name kh√°c nhau!');
        print('‚ö†Ô∏è ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y l·ªói khi kh·ªüi t·∫°o Firebase.');
      }
      
      // Ki·ªÉm tra Firebase
      try {
        final app = Firebase.app();
        print('üî• Firebase app name: ${app.name}');
        print('üî• Firebase options: ${app.options}');
        print('üî• Firebase project ID: ${app.options.projectId}');
        print('üî• Firebase Google app ID: ${app.options.appId}');
        
        // Ki·ªÉm tra xem options ƒë√£ ƒë√∫ng ch∆∞a
        final String firebaseAppId = app.options.appId;
        final String firebaseProjectId = app.options.projectId;
        
        final bool isCorrectConfig = firebaseAppId.contains('622073990105') && 
                                    (firebaseProjectId == 'openfood-test' || 
                                     firebaseProjectId == 'openfood-test-d26ae');
        
        // Hi·ªÉn th·ªã th√¥ng tin
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              'Package Name: $packageInfoPackageName\n'
              'Context Package: $contextPackageName\n'
              'Firebase c·∫•u h√¨nh: ${isCorrectConfig ? 'ƒê√∫ng ‚úÖ' : 'Sai ‚ùå'}\n'
              'Project ID: ${app.options.projectId}',
            ),
            backgroundColor: isCorrectConfig ? Colors.green : Colors.orange,
            duration: Duration(seconds: 5),
          ),
        );
      } catch (e) {
        print('‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o: $e');
        
        // T·∫°o Firebase options t∆∞·ªùng minh
        const androidApiKey = 'AIzaSyAgUhHU8wSJgO5MVNy95tMT07NEjzMOfz0';
        const projectId = 'openfood-test';
        const messagingSenderId = '622073990105';
        const appId = '1:622073990105:android:7ca0800c7e00e32ec4909d';
        
        // T·∫°o options v·ªõi package name ƒë√∫ng
        final options = FirebaseOptions(
          apiKey: androidApiKey,
          appId: appId,
          messagingSenderId: messagingSenderId,
          projectId: projectId,
          // Fix package name n·∫øu c·∫ßn
          androidClientId: packageInfoPackageName.isEmpty || packageInfoPackageName == 'unknown' 
              ? null 
              : '${packageInfoPackageName}.android_client',
        );
        
        // Hi·ªÉn th·ªã options s·∫Ω s·ª≠ d·ª•ng
        print('üî• S·∫Ω kh·ªüi t·∫°o Firebase v·ªõi options: $options');
        
        // Try initialize Firebase
        try {
          await Firebase.initializeApp(options: options);
          print('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng v·ªõi options t∆∞·ªùng minh!');
          
          // Reload everything
          _initializeFirebaseServices();
          
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng!\nƒêang t·∫£i l·∫°i d·ªØ li·ªáu...'),
              backgroundColor: Colors.green,
            ),
          );
        } catch (initError) {
          print('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase v·ªõi options: $initError');
          
          // Th·ª≠ kh·ªüi t·∫°o kh√¥ng c·∫ßn options
          try {
            await Firebase.initializeApp();
            print('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng kh√¥ng c·∫ßn options!');
            
            // Reload everything
            _initializeFirebaseServices();
            
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng!\nƒêang t·∫£i l·∫°i d·ªØ li·ªáu...'),
                backgroundColor: Colors.green,
              ),
            );
          } catch (noOptionsError) {
            print('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase kh√¥ng c·∫ßn options: $noOptionsError');
            
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text(
                  'Package Name: $packageInfoPackageName\n'
                  'Context Package: $contextPackageName\n'
                  'L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase\n'
                  'L·ªói c·ª• th·ªÉ: ${_getReadableErrorMessage(noOptionsError.toString())}',
                ),
                backgroundColor: Colors.red,
                duration: Duration(seconds: 10),
              ),
            );
          }
        }
      }
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra package name: $e');
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói khi ki·ªÉm tra: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
  
  // H√†m l·∫•y package name (s·ª≠ d·ª•ng package_info_plus)
  Future<String> _getPackageName() async {
    try {
      // Get package info
      PackageInfo packageInfo = await PackageInfo.fromPlatform();
      
      // Print all package information for debugging
      print('üì¶ App Name: ${packageInfo.appName}');
      print('üì¶ Package Name: ${packageInfo.packageName}');
      print('üì¶ Version: ${packageInfo.version}');
      print('üì¶ Build Number: ${packageInfo.buildNumber}');
      
      return packageInfo.packageName;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y package info: $e');
      return 'unknown';
    }
  }

  // H√†m ki·ªÉm tra k·∫øt n·ªëi Firebase v√† API
  Future<void> _checkFirebaseConnection() async {
    try {
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang ki·ªÉm tra
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒêang ki·ªÉm tra k·∫øt n·ªëi...'),
          duration: Duration(seconds: 2),
        ),
      );
      
      // Ki·ªÉm tra k·∫øt n·ªëi API
      bool apiConnected = false;
      String apiStatus = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi';
      try {
        apiConnected = await ApiService.checkConnection();
        apiStatus = apiConnected ? 'K·∫øt n·ªëi th√†nh c√¥ng' : 'Kh√¥ng th·ªÉ k·∫øt n·ªëi';
        print('üåê API Status: $apiStatus');
      } catch (apiError) {
        print('‚ùå L·ªói khi ki·ªÉm tra API: $apiError');
        apiStatus = 'L·ªói: ${apiError.toString()}';
      }
      
      // Ki·ªÉm tra l·∫°i xem Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
      bool firebaseConnected = false;
      String firebaseStatus = 'Ch∆∞a kh·ªüi t·∫°o';
      try {
        Firebase.app();
        print('‚úÖ Firebase.app() ho·∫°t ƒë·ªông');
        
        if (_firestoreService == null) {
          _firestoreService = FirestoreService();
          _isFirebaseInitialized = true;
          print('‚úÖ ƒê√£ kh·ªüi t·∫°o FirestoreService');
        }
        
        // Th·ª≠ g·ªçi m·ªôt ph∆∞∆°ng th·ª©c c·ªßa FirestoreService ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
        try {
          final userProfile = await _firestoreService!.getUserProfile();
          print('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Firebase');
          print('Firebase user profile: ${userProfile.toString()}');
          
          firebaseConnected = true;
          firebaseStatus = 'K·∫øt n·ªëi th√†nh c√¥ng';
          
          setState(() {
            _hasError = false;
            _isLoading = false;
          });
        } catch (e) {
          print('‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: $e');
          firebaseStatus = 'L·ªói: ${e.toString()}';
          throw e;
        }
      } catch (e) {
        print('‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c c·∫•u h√¨nh ch∆∞a ƒë√∫ng: $e');
        firebaseStatus = 'L·ªói: ${e.toString()}';
        
        // Th·ª≠ kh·ªüi t·∫°o l·∫°i Firebase
        try {
          print('üîÑ ƒêang th·ª≠ kh·ªüi t·∫°o l·∫°i Firebase...');
          await Firebase.initializeApp();
          print('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase th√†nh c√¥ng');
          
          // G√°n bi·∫øn to√†n c·ª•c
          main_app.isFirebaseInitialized = true;
          _isFirebaseInitialized = true;
          
          // Kh·ªüi t·∫°o FirestoreService
          _firestoreService = FirestoreService();
          
          firebaseConnected = true;
          firebaseStatus = 'ƒê√£ kh·ªüi t·∫°o th√†nh c√¥ng';
        } catch (initError) {
          print('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase: $initError');
          firebaseStatus = 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o: ${initError.toString()}';
          throw initError;
        }
      }
      
      // Hi·ªÉn th·ªã k·∫øt qu·∫£ ki·ªÉm tra
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text('K·∫øt qu·∫£ ki·ªÉm tra k·∫øt n·ªëi'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // API Status
              Row(
                children: [
                  Container(
                    width: 12,
                    height: 12,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: apiConnected ? Colors.green : Colors.red,
                    ),
                  ),
                  SizedBox(width: 8),
                  Text(
                    'API: ',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  Expanded(
                    child: Text(apiStatus),
                  ),
                ],
              ),
              SizedBox(height: 8),
              
              // Firebase Status
              Row(
                children: [
                  Container(
                    width: 12,
                    height: 12,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: firebaseConnected ? Colors.green : Colors.red,
                    ),
                  ),
                  SizedBox(width: 8),
                  Text(
                    'Firebase: ',
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  Expanded(
                    child: Text(firebaseStatus),
                  ),
                ],
              ),
              SizedBox(height: 16),
              
              // API URL
              Text(
                'API URL: ${app_config.apiBaseUrl}',
                style: TextStyle(fontSize: 12),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('ƒê√≥ng'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _loadMealPlan();
              },
              child: Text('T·∫£i l·∫°i d·ªØ li·ªáu'),
            ),
          ],
        ),
      );
      
      // T·∫£i l·∫°i d·ªØ li·ªáu n·∫øu ki·ªÉm tra th√†nh c√¥ng
      if (firebaseConnected || apiConnected) {
        _loadMealPlan();
      }
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi: $e');
      setState(() {
        _hasError = true;
        _errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${_getReadableErrorMessage(e.toString())}';
        _isLoading = false;
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói k·∫øt n·ªëi: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: Duration(seconds: 5),
        ),
      );
    }
  }

  // H√†m ki·ªÉm tra d·ªØ li·ªáu Firestore
  Future<void> _checkFirestoreData() async {
    try {
      // Ki·ªÉm tra xem Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
      try {
        final app = Firebase.app();
        print('‚úÖ Firebase.app() ho·∫°t ƒë·ªông, app name: ${app.name}');
        
        if (_firestoreService == null) {
          _firestoreService = FirestoreService();
          _isFirebaseInitialized = true;
          print('‚úÖ ƒê√£ kh·ªüi t·∫°o FirestoreService');
        }
        
        // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
        final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
        final isLoggedIn = authProvider.isAuthenticated;
        print('üë§ Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p: ${isLoggedIn ? "ƒê√£ ƒëƒÉng nh·∫≠p" : "Ch∆∞a ƒëƒÉng nh·∫≠p"}');
        
        // Ki·ªÉm tra n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p th√¨ th·ª≠ l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng
        Map<String, dynamic> userData = {};
        if (isLoggedIn) {
          try {
            userData = await _firestoreService!.getUserProfile();
            print('‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Firestore');
            print('D·ªØ li·ªáu: ${userData.toString()}');
          } catch (e) {
            print('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng: $e');
            userData = {'error': e.toString()};
          }
        }
        
        // Th·ª≠ l·∫•y d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn
        Map<String, dynamic> mealPlanData = {};
        try {
          if (isLoggedIn) {
            mealPlanData = await _firestoreService!.getWeeklyMealPlan();
            print('‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn t·ª´ Firestore');
            print('D·ªØ li·ªáu: ${mealPlanData.toString().substring(0, mealPlanData.toString().length > 200 ? 200 : mealPlanData.toString().length)}...');
          } else {
            mealPlanData = {'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p n√™n kh√¥ng th·ªÉ l·∫•y k·∫ø ho·∫°ch ƒÉn'};
          }
        } catch (e) {
          print('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn: $e');
          mealPlanData = {'error': e.toString()};
        }
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text('Tr·∫°ng th√°i d·ªØ li·ªáu Firebase'),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('Firebase ƒë√£ kh·ªüi t·∫°o: ${_isFirebaseInitialized ? "‚úÖ" : "‚ùå"}'),
                  SizedBox(height: 8),
                  Text('ƒê√£ ƒëƒÉng nh·∫≠p: ${isLoggedIn ? "‚úÖ" : "‚ùå"}'),
                  SizedBox(height: 16),
                  
                  Text('D·ªØ li·ªáu ng∆∞·ªùi d√πng:', style: TextStyle(fontWeight: FontWeight.bold)),
                  if (userData.isEmpty)
                    Text('Kh√¥ng c√≥ d·ªØ li·ªáu', style: TextStyle(color: Colors.red))
                  else if (userData.containsKey('error'))
                    Text('L·ªói: ${userData['error']}', style: TextStyle(color: Colors.red))
                  else
                    ...userData.entries.take(5).map((e) => Padding(
                      padding: const EdgeInsets.only(left: 16.0, top: 4.0),
                      child: Text('${e.key}: ${e.value}'),
                    )),
                    
                  SizedBox(height: 16),
                  Text('D·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn:', style: TextStyle(fontWeight: FontWeight.bold)),
                  if (mealPlanData.isEmpty)
                    Text('Kh√¥ng c√≥ d·ªØ li·ªáu', style: TextStyle(color: Colors.red))
                  else if (mealPlanData.containsKey('error'))
                    Text('L·ªói: ${mealPlanData['error']}', style: TextStyle(color: Colors.red))
                  else
                    Text('ƒê√£ nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn t·ª´ Firebase', style: TextStyle(color: Colors.green)),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('ƒê√≥ng'),
              ),
              if (isLoggedIn && (_mealPlan == null || mealPlanData.isNotEmpty))
                ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    _loadMealPlan();
                  },
                  child: Text('T·∫£i k·∫ø ho·∫°ch ƒÉn'),
                ),
            ],
          ),
        );
      } catch (e) {
        print('‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o: $e');
        
        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text('L·ªói Firebase'),
            content: Text('Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c c√≥ l·ªói: $e'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('ƒê√≥ng'),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _checkFirebaseConnection();
                },
                child: Text('Ki·ªÉm tra k·∫øt n·ªëi'),
              ),
            ],
          ),
        );
      }
    } catch (e) {
      print('‚ùå L·ªói chung khi ki·ªÉm tra d·ªØ li·ªáu Firestore: $e');
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói khi ki·ªÉm tra: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Hi·ªÉn th·ªã dialog c·∫•u h√¨nh API URL
  void _showApiConfig() {
    // Controller cho text field
    final apiUrlController = TextEditingController(
      text: app_config.apiOverrideUrl.isNotEmpty 
          ? app_config.apiOverrideUrl 
          : app_config.apiProductionUrl
    );
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('C·∫•u h√¨nh API'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('URL hi·ªán t·∫°i: ${app_config.apiBaseUrl}'),
              SizedBox(height: 16),
              TextField(
                controller: apiUrlController,
                decoration: InputDecoration(
                  labelText: 'API URL',
                  hintText: 'Nh·∫≠p URL m√°y ch·ªß API',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  ElevatedButton(
                    onPressed: () {
                      // S·ª≠ d·ª•ng URL local
                      apiUrlController.text = app_config.apiLocalUrl;
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                    ),
                    child: Text('Local'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      // S·ª≠ d·ª•ng URL production
                      apiUrlController.text = app_config.apiProductionUrl;
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                    ),
                    child: Text('Production'),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      // X√≥a URL (s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh)
                      apiUrlController.text = '';
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.grey,
                    ),
                    child: Text('Reset'),
                  ),
                ],
              ),
              SizedBox(height: 16),
              Row(
                children: [
                  Text('Bu·ªôc d√πng d·ªØ li·ªáu m·∫´u: '),
                  Switch(
                    value: app_config.ApiEndpoints.forceMockData,
                    onChanged: (value) {
                      setState(() {
                        app_config.ApiEndpoints.forceMockData = value;
                      });
                      Navigator.pop(context);
                      _showApiConfig(); // M·ªü l·∫°i dialog ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
                    },
                  ),
                ],
              ),
              
              // Th√™m h∆∞·ªõng d·∫´n API
              SizedBox(height: 16),
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'H∆∞·ªõng d·∫´n k·∫øt n·ªëi API',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8),
                    Text('1. Ch·∫°y FastAPI tr√™n m√°y t√≠nh c·ªßa b·∫°n'),
                    Text('2. Ki·ªÉm tra IP c·ªßa m√°y t√≠nh (ipconfig ho·∫∑c ifconfig)'),
                    Text('3. C·∫≠p nh·∫≠t URL local th√†nh http://YOUR_IP:8000'),
                    Text('4. ƒê·∫£m b·∫£o m√°y t√≠nh v√† ƒëi·ªán tho·∫°i c·ªßa b·∫°n k·∫øt n·ªëi c√πng m·ªôt m·∫°ng WiFi'),
                    SizedBox(height: 8),
                    Text('API status hi·ªán t·∫°i:'),
                    _buildApiStatus(),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('H·ªßy'),
          ),
          TextButton(
            onPressed: () => _showAvailableEndpoints(),
            child: Text('Ki·ªÉm tra Endpoints'),
          ),
          ElevatedButton(
            onPressed: () {
              // C·∫≠p nh·∫≠t URL
              app_config.apiOverrideUrl = apiUrlController.text.trim();
              print('‚úÖ ƒê√£ c·∫≠p nh·∫≠t API URL th√†nh: ${app_config.apiBaseUrl}');
              
              // Th√¥ng b√°o
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ c·∫≠p nh·∫≠t API URL th√†nh: ${app_config.apiBaseUrl}'),
                  backgroundColor: Colors.green,
                ),
              );
              
              Navigator.of(context).pop();
              
              // T·∫£i l·∫°i d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t URL
              _loadMealPlan();
            },
            child: Text('L∆∞u & T·∫£i l·∫°i'),
          ),
        ],
      ),
    );
  }
  
  // Widget hi·ªÉn th·ªã tr·∫°ng th√°i API
  Widget _buildApiStatus() {
    return FutureBuilder<bool>(
      future: ApiService.checkConnection(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Row(
            children: [
              SizedBox(
                width: 16, 
                height: 16, 
                child: CircularProgressIndicator(strokeWidth: 2)
              ),
              SizedBox(width: 8),
              Text('ƒêang ki·ªÉm tra k·∫øt n·ªëi...'),
            ],
          );
        }
        
        final isConnected = snapshot.data ?? false;
        return Row(
          children: [
            Container(
              width: 12,
              height: 12,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: isConnected ? Colors.green : Colors.red,
              ),
            ),
            SizedBox(width: 8),
            Text(
              isConnected 
                  ? 'K·∫øt n·ªëi th√†nh c√¥ng' 
                  : 'Kh√¥ng th·ªÉ k·∫øt n·ªëi',
              style: TextStyle(
                color: isConnected ? Colors.green : Colors.red,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        );
      },
    );
  }
  
  // Hi·ªÉn th·ªã danh s√°ch c√°c endpoint c√≥ s·∫µn
  void _showAvailableEndpoints() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('API Endpoints'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('C√°c endpoint c·∫ßn ƒë∆∞·ª£c c·∫•u h√¨nh tr√™n API:'),
              SizedBox(height: 8),
              
              // API endpoints
              Text('API Endpoints:', style: TextStyle(fontWeight: FontWeight.bold)),
              _buildEndpointListItem('/api/meal-plan/generate', 'T·∫°o k·∫ø ho·∫°ch ƒÉn u·ªëng h√†ng tu·∫ßn'),
              _buildEndpointListItem('/api/meal-plan/{user_id}', 'L·∫•y k·∫ø ho·∫°ch ƒÉn u·ªëng theo ng∆∞·ªùi d√πng'),
              _buildEndpointListItem('/api/replace-day', 'Thay th·∫ø m·ªôt ng√†y trong k·∫ø ho·∫°ch'),
              _buildEndpointListItem('/api/meal-plan/replace-meal', 'Thay th·∫ø m·ªôt b·ªØa ƒÉn c·ª• th·ªÉ'),
              _buildEndpointListItem('/api/user-profile', 'Qu·∫£n l√Ω h·ªì s∆° ng∆∞·ªùi d√πng'),
              _buildEndpointListItem('/check-ai-availability', 'Ki·ªÉm tra t√¨nh tr·∫°ng AI'),
              _buildEndpointListItem('/api-status', 'Ki·ªÉm tra tr·∫°ng th√°i API'),
              
              SizedBox(height: 16),
              
              // Firestore endpoints
              Text('Firestore Endpoints:', style: TextStyle(fontWeight: FontWeight.bold)),
              _buildEndpointListItem('/firestore/meal-plans', 'T·∫°o/Qu·∫£n l√Ω k·∫ø ho·∫°ch ƒÉn u·ªëng'),
              _buildEndpointListItem('/firestore/meal-plans/{plan_id}', 'L·∫•y/X√≥a k·∫ø ho·∫°ch ƒÉn u·ªëng theo ID'),
              _buildEndpointListItem('/firestore/users/{user_id}/meal-plans/date/{date}', 'K·∫ø ho·∫°ch ƒÉn u·ªëng theo ng√†y'),
              _buildEndpointListItem('/firestore/meal-plans/user/{user_id}', 'K·∫ø ho·∫°ch ƒÉn u·ªëng theo ng∆∞·ªùi d√πng'),
              _buildEndpointListItem('/firestore/latest-meal-plan/{user_id}', 'K·∫ø ho·∫°ch ƒÉn u·ªëng m·ªõi nh·∫•t'),
              
              SizedBox(height: 16),
              
              // Other endpoints
              Text('C√°c endpoint kh√°c:', style: TextStyle(fontWeight: FontWeight.bold)),
              _buildEndpointListItem('/generate-weekly-meal-demo', 'L·∫•y k·∫ø ho·∫°ch ƒÉn m·∫´u'),
              _buildEndpointListItem('/usda/search', 'T√¨m ki·∫øm th·ª±c ph·∫©m'),
              _buildEndpointListItem('/usda/food/{id}', 'Th√¥ng tin dinh d∆∞·ª°ng th·ª±c ph·∫©m'),
              
              SizedBox(height: 16),
              Text(
                'C√°c endpoint tr√™n c·∫ßn ƒë∆∞·ª£c c·∫•u h√¨nh trong FastAPI backend ƒë·ªÉ app ho·∫°t ƒë·ªông ch√≠nh x√°c.',
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }
  
  // Widget hi·ªÉn th·ªã m·ªôt endpoint
  Widget _buildEndpointListItem(String endpoint, String description) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Row(
        children: [
          Icon(Icons.api, size: 16, color: Colors.blue),
          SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(endpoint, style: TextStyle(fontWeight: FontWeight.bold)),
                Text(description, style: TextStyle(fontSize: 12, color: Colors.grey.shade700)),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  // Ph∆∞∆°ng th·ª©c ƒë·ªãnh d·∫°ng nguy√™n li·ªáu t·ª´ chu·ªói JSON
  Widget _buildFormattedIngredient(dynamic ingredient) {
    try {
      // N·∫øu ingredient l√† Map
      if (ingredient is Map) {
        final amount = ingredient['amount'];
        final name = ingredient['name'];
        if (amount != null && name != null) {
          return Text('$amount $name', style: TextStyle(fontSize: 14));
        }
      }
      
      // N·∫øu ingredient l√† String nh∆∞ng c√≥ ƒë·ªãnh d·∫°ng JSON
      else if (ingredient is String) {
        // Ki·ªÉm tra n·∫øu l√† chu·ªói JSON d·∫°ng {amount: X, name: Y}
        if (ingredient.contains('{') && ingredient.contains('}')) {
          // Tr√≠ch xu·∫•t amount v√† name t·ª´ chu·ªói
          final amountRegex = RegExp(r'amount: (.*?)[,}]');
          final nameRegex = RegExp(r'name: (.*?)[,}]');
          
          final amountMatch = amountRegex.firstMatch(ingredient);
          final nameMatch = nameRegex.firstMatch(ingredient);
          
          if (amountMatch != null && nameMatch != null) {
            final amount = amountMatch.group(1)?.trim();
            final name = nameMatch.group(1)?.trim();
            
            if (amount != null && name != null) {
              // X√≥a b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
              final cleanName = name.replaceAll('"', '').replaceAll("'", '');
              return Text('$amount $cleanName', style: TextStyle(fontSize: 14));
            }
          }
        }
        
        // N·∫øu l√† chu·ªói th√¥ng th∆∞·ªùng, hi·ªÉn th·ªã nguy√™n d·∫°ng
        return Text(ingredient, style: TextStyle(fontSize: 14));
      }
      
      // Tr∆∞·ªùng h·ª£p kh√°c, chuy·ªÉn ƒë·ªïi sang chu·ªói
      return Text(ingredient.toString(), style: TextStyle(fontSize: 14));
    } catch (e) {
      // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã nguy√™n li·ªáu g·ªëc
      return Text(ingredient.toString(), style: TextStyle(fontSize: 14));
    }
  }

  // H√†m chuy·ªÉn ƒë·ªïi s√¢u t·ª´ Map<dynamic, dynamic> sang Map<String, dynamic>
  Map<String, dynamic> _deepConvertMap(dynamic inputMap) {
    // N·∫øu input l√† null, tr·∫£ v·ªÅ map r·ªóng
    if (inputMap == null) {
      return {};
    }
    
    // ƒê·∫£m b·∫£o input l√† Map
    if (inputMap is! Map) {
      print('‚ö†Ô∏è ƒê·∫ßu v√†o kh√¥ng ph·∫£i Map: ${inputMap.runtimeType}');
      return {};
    }
    
    Map<String, dynamic> result = {};
    
    inputMap.forEach((key, value) {
      if (value is Map) {
        // N·∫øu value l√† Map, ƒë·ªá quy chuy·ªÉn ƒë·ªïi n√≥
        result[key.toString()] = _deepConvertMap(value);
      } else if (value is List) {
        // N·∫øu value l√† List, chuy·ªÉn ƒë·ªïi t·ª´ng ph·∫ßn t·ª≠ trong list
        result[key.toString()] = _convertList(value);
      } else {
        // N·∫øu value l√† gi√° tr·ªã nguy√™n th·ªßy, gi·ªØ nguy√™n
        result[key.toString()] = value;
      }
    });
    
    return result;
  }
  
  // H√†m chuy·ªÉn ƒë·ªïi List
  List<dynamic> _convertList(dynamic inputList) {
    // N·∫øu input kh√¥ng ph·∫£i List, tr·∫£ v·ªÅ list r·ªóng
    if (inputList == null) {
      return [];
    }
    
    // ƒê·∫£m b·∫£o input l√† List
    if (inputList is! List) {
      print('‚ö†Ô∏è ƒê·∫ßu v√†o kh√¥ng ph·∫£i List: ${inputList.runtimeType}');
      return [];
    }
    
    return inputList.map((item) {
      if (item is Map) {
        return _deepConvertMap(item);
      } else if (item is List) {
        return _convertList(item);
      } else {
        return item;
      }
    }).toList();
  }

  // H√†m t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
  Future<void> _generateNewMealPlan() async {
    try {
      setState(() {
        _isLoading = true;
        _hasError = false;
        _errorMessage = '';
      });
      
      // Ki·ªÉm tra xem c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }
      
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh m·ª•c ti√™u dinh d∆∞·ª°ng
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final userId = FirebaseAuth.instance.currentUser?.uid;
      
      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }
      
      // L·∫•y m·ª•c ti√™u dinh d∆∞·ª°ng ho·∫∑c s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
      final caloriesTarget = userDataProvider.tdeeCalories > 0 
          ? userDataProvider.tdeeCalories 
          : app_config.defaultCaloriesTarget;
      final proteinTarget = userDataProvider.tdeeProtein > 0 
          ? userDataProvider.tdeeProtein 
          : app_config.defaultProteinTarget;
      final fatTarget = userDataProvider.tdeeFat > 0 
          ? userDataProvider.tdeeFat 
          : app_config.defaultFatTarget;
      final carbsTarget = userDataProvider.tdeeCarbs > 0 
          ? userDataProvider.tdeeCarbs
          : app_config.defaultCarbsTarget;
      
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o k·∫ø ho·∫°ch
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi...'),
          duration: Duration(seconds: 2),
        ),
      );
      
      // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/generate ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
      final headers = await ApiService.getAuthHeaders();
      
      // T·∫°o d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng cho API
      final requestData = {
        'user_id': userId,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': true,
      };
      
      // Th√™m preferences d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (userDataProvider.preferences != null && userDataProvider.preferences.isNotEmpty) {
        requestData['preferences'] = userDataProvider.preferences;
      }
      
      // Th√™m allergies d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (userDataProvider.allergies != null && userDataProvider.allergies.isNotEmpty) {
        requestData['allergies'] = userDataProvider.allergies;
      }
      
      // Th√™m cuisine_style n·∫øu c√≥
      if (userDataProvider.cuisineStyle != null && userDataProvider.cuisineStyle!.isNotEmpty) {
        requestData['cuisine_style'] = userDataProvider.cuisineStyle!;
      }
      
      final generateUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.generateMealPlan}');
      
      print('üîÑ ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi t·ª´ API: $generateUrl');
      print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');
      
      try {
        final response = await http.post(
          generateUrl,
          headers: {
            ...headers,
            'Content-Type': 'application/json',
          },
          body: jsonEncode(requestData),
        ).timeout(
          Duration(seconds: 60),  // TƒÉng timeout l√™n 60 gi√¢y
          onTimeout: () {
            print('‚è±Ô∏è Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
            throw Exception('Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
          },
        );
        
        // In ra to√†n b·ªô th√¥ng tin v·ªÅ response
        print('üîç Response status: ${response.statusCode}');
        print('üîç Response body: ${response.body}');
        print('üîç Response headers: ${response.headers}');
        
        if (response.statusCode == 200 || response.statusCode == 201) {
          print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi th√†nh c√¥ng');
          
          // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi, ƒëang ch·ªù c·∫≠p nh·∫≠t t·ª´ Firebase...'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 3),
            ),
          );
          
          // ƒê·ª£i l√¢u h∆°n ƒë·ªÉ ƒë·∫£m b·∫£o Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
          await Future.delayed(Duration(seconds: 5));
          
          // ƒê·ªçc d·ªØ li·ªáu t·ª´ latest_meal_plans tr∆∞·ªõc
          final latestDocSnapshot = await FirebaseFirestore.instance
              .collection('latest_meal_plans')
              .doc(userId)
              .get();
          
          if (latestDocSnapshot.exists && latestDocSnapshot.data() != null) {
            final result = latestDocSnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans');
            
            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });
            return;
          }
          
          // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
          print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒÉn trong latest_meal_plans, ki·ªÉm tra meal_plans');
          final docSnapshot = await FirebaseFirestore.instance
              .collection('meal_plans')
              .doc(userId)
              .get();
          
          if (docSnapshot.exists && docSnapshot.data() != null) {
            final result = docSnapshot.data()!;
            print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ meal_plans');
            
            setState(() {
              _mealPlan = MealPlan.fromJson(result);
              _isLoading = false;
              _hasError = false;
            });
          } else {
            // N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firestore, c√≥ th·ªÉ API ƒëang x·ª≠ l√Ω
            print('‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y d·ªØ li·ªáu trong Firestore, ƒë·ª£i th√™m...');
            
            // ƒê·ª£i th√™m th·ªùi gian (tƒÉng l√™n 5 gi√¢y)
            await Future.delayed(Duration(seconds: 5));
            
            // Th·ª≠ l·∫°i l·∫ßn ƒë·∫ßu - ki·ªÉm tra latest_meal_plans tr∆∞·ªõc
            final latestRetrySnapshot = await FirebaseFirestore.instance
                .collection('latest_meal_plans')
                .doc(userId)
                .get();
                
            if (latestRetrySnapshot.exists && latestRetrySnapshot.data() != null) {
              final result = latestRetrySnapshot.data()!;
              print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans sau khi th·ª≠ l·∫°i');
              
              setState(() {
                _mealPlan = MealPlan.fromJson(result);
                _isLoading = false;
                _hasError = false;
              });
              return;
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
            final retrySnapshot = await FirebaseFirestore.instance
                .collection('meal_plans')
                .doc(userId)
                .get();
            
            if (retrySnapshot.exists && retrySnapshot.data() != null) {
              final result = retrySnapshot.data()!;
              print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ meal_plans sau khi th·ª≠ l·∫°i');
              
              setState(() {
                _mealPlan = MealPlan.fromJson(result);
                _isLoading = false;
                _hasError = false;
              });
            } else {
              // V·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ l·∫°i l·∫ßn th·ª© hai
              print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firestore sau l·∫ßn th·ª≠ ƒë·∫ßu, th·ª≠ l·∫ßn cu·ªëi...');
              
              // ƒê·ª£i th√™m th·ªùi gian (tƒÉng l√™n 8 gi√¢y)
              await Future.delayed(Duration(seconds: 8));
              
              // Th·ª≠ l·∫°i l·∫ßn cu·ªëi - ki·ªÉm tra latest_meal_plans tr∆∞·ªõc
              final latestFinalRetrySnapshot = await FirebaseFirestore.instance
                  .collection('latest_meal_plans')
                  .doc(userId)
                  .get();
                  
              if (latestFinalRetrySnapshot.exists && latestFinalRetrySnapshot.data() != null) {
                final result = latestFinalRetrySnapshot.data()!;
                print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ latest_meal_plans sau l·∫ßn th·ª≠ cu·ªëi');
                
                setState(() {
                  _mealPlan = MealPlan.fromJson(result);
                  _isLoading = false;
                  _hasError = false;
                });
                return;
              }
              
              // N·∫øu kh√¥ng t√¨m th·∫•y trong latest_meal_plans, ki·ªÉm tra meal_plans
              final finalRetrySnapshot = await FirebaseFirestore.instance
                  .collection('meal_plans')
                  .doc(userId)
                  .get();
                  
              if (finalRetrySnapshot.exists && finalRetrySnapshot.data() != null) {
                final result = finalRetrySnapshot.data()!;
                print('‚úÖ ƒê√£ t·∫£i k·∫ø ho·∫°ch m·ªõi t·ª´ meal_plans sau l·∫ßn th·ª≠ cu·ªëi');
                
                setState(() {
                  _mealPlan = MealPlan.fromJson(result);
                  _isLoading = false;
                  _hasError = false;
                });
              } else {
                // V·∫´n kh√¥ng t√¨m th·∫•y, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
                print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firestore sau nhi·ªÅu l·∫ßn th·ª≠, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
                _loadMockData();
              }
            }
          }
        } else if (response.statusCode == 422) {
          // L·ªói d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
          print('‚ùå L·ªói 422 - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${response.body}');
          
          // Ph√¢n t√≠ch l·ªói chi ti·∫øt
          try {
            final errorData = jsonDecode(response.body);
            print('‚ùå Chi ti·∫øt l·ªói JSON: $errorData');
            
            if (errorData['detail'] is List) {
              for (var error in errorData['detail']) {
                print('‚ùå L·ªói tr∆∞·ªùng: ${error['loc']}, Lo·∫°i: ${error['type']}, Th√¥ng b√°o: ${error['msg']}');
              }
            } else {
              print('‚ùå Chi ti·∫øt l·ªói: ${errorData['detail']}');
            }
            
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('L·ªói d·ªØ li·ªáu: ${errorData['detail']}'),
                backgroundColor: Colors.red,
                duration: Duration(seconds: 5),
              ),
            );
          } catch (e) {
            print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
          }
          
          throw Exception('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: Vui l√≤ng ki·ªÉm tra l·∫°i');
        } else if (response.statusCode == 500) {
          // L·ªói server
          print('‚ùå L·ªói server: ${response.statusCode} - ${response.body}');
          
          // Ph√¢n t√≠ch l·ªói chi ti·∫øt
          String errorMessage = 'L·ªói server';
          try {
            final errorData = jsonDecode(response.body);
            if (errorData['detail'] != null) {
              errorMessage = errorData['detail'];
              
              // Ki·ªÉm tra n·∫øu l√† l·ªói module 'services'
              if (errorMessage.contains("module 'services' has no attribute")) {
                errorMessage = 'L·ªói c·∫•u h√¨nh server: Thi·∫øu module x·ª≠ l√Ω b·ªØa ƒÉn';
                
                // Hi·ªÉn th·ªã th√¥ng b√°o h∆∞·ªõng d·∫´n cho developer
                print('‚ö†Ô∏è L·ªñI BACKEND: C·∫ßn ki·ªÉm tra file services.py v√† th√™m h√†m generate_meal');
              }
            }
          } catch (e) {
            print('Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªói: $e');
          }
          
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('L·ªói server: $errorMessage\n\nƒêang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase...'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 5),
            ),
          );
          
          // Th·ª≠ t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase
          print('‚ö†Ô∏è ƒêang t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firebase sau l·ªói server...');
          await _loadMealPlan();
          
          // N·∫øu kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firebase, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
          if (_mealPlan == null) {
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong Firebase, ƒëang t·∫£i d·ªØ li·ªáu m·∫´u...');
            _loadMockData();
          }
          
          return; // Kh√¥ng throw exception n·ªØa
        } else if (response.statusCode == 403) {
          // L·ªói x√°c th·ª±c
          print('‚ùå L·ªói x√°c th·ª±c: ${response.statusCode} - ${response.body}');
          throw Exception('L·ªói x√°c th·ª±c: Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        } else {
          // L·ªói kh√°c
          print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode} - ${response.body}');
          throw Exception('L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${response.statusCode}');
        }
      } catch (e) {
        print('‚ùå‚ùå‚ùå L·ªói khi g·ªçi API: $e');
        
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = 'Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${e.toString()}';
        });
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${e.toString()}'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 5),
          ),
        );
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: $e');
      
      setState(() {
        _isLoading = false;
        _hasError = true;
        _errorMessage = 'Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${e.toString()}';
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi: ${e.toString()}'),
          backgroundColor: Colors.red,
          duration: Duration(seconds: 5),
        ),
      );
    }
  }

  // Ki·ªÉm tra tr√πng l·∫∑p m√≥n ƒÉn trong k·∫ø ho·∫°ch tu·∫ßn
  Future<bool> _checkDuplicateMeals() async {
    if (_mealPlan == null || _mealPlan!.weeklyPlan.isEmpty) {
      return false;
    }
    
    print('üîç ƒêang ki·ªÉm tra tr√πng l·∫∑p m√≥n ƒÉn trong k·∫ø ho·∫°ch tu·∫ßn...');
    
    // L∆∞u tr·ªØ t√™n m√≥n ƒÉn theo lo·∫°i b·ªØa
    Map<String, Set<String>> mealsByType = {
      'B·ªØa s√°ng': {},
      'B·ªØa tr∆∞a': {},
      'B·ªØa t·ªëi': {},
    };
    
    // ƒê·∫øm s·ªë l∆∞·ª£ng tr√πng l·∫∑p
    int duplicateCount = 0;
    int totalMeals = 0;
    
    // Ki·ªÉm tra t·ª´ng ng√†y
    for (String day in _mealPlan!.weeklyPlan.keys) {
      final dayPlan = _mealPlan!.weeklyPlan[day];
      if (dayPlan == null) continue;
      
      // Ki·ªÉm tra t·ª´ng lo·∫°i b·ªØa
      for (String mealType in dayPlan.meals.keys) {
        final meals = dayPlan.meals[mealType];
        if (meals == null || meals.isEmpty) continue;
        
        // L·∫•y m√≥n ƒÉn ƒë·∫ßu ti√™n trong danh s√°ch
        final meal = meals.first;
        totalMeals++;
        
        // Ki·ªÉm tra n·∫øu m√≥n ƒÉn ƒë√£ t·ªìn t·∫°i trong set
        if (mealsByType.containsKey(mealType) && 
            mealsByType[mealType]!.contains(meal.name)) {
          duplicateCount++;
        } else if (mealsByType.containsKey(mealType)) {
          // Th√™m m√≥n ƒÉn v√†o set n·∫øu ch∆∞a t·ªìn t·∫°i
          mealsByType[mealType]!.add(meal.name);
        }
      }
    }
    
    // T√≠nh t·ª∑ l·ªá tr√πng l·∫∑p
    double duplicateRate = totalMeals > 0 ? duplicateCount / totalMeals : 0;
    print('üìä T·ª∑ l·ªá tr√πng l·∫∑p m√≥n ƒÉn: ${(duplicateRate * 100).toStringAsFixed(1)}% ($duplicateCount/$totalMeals)');
    
    // N·∫øu t·ª∑ l·ªá tr√πng l·∫∑p > 30%, c·∫ßn t·∫°o k·∫ø ho·∫°ch m·ªõi
    return duplicateRate > 0.3;
  }
  
  // T·ª± ƒë·ªông t·∫°o k·∫ø ho·∫°ch m·ªõi n·∫øu ph√°t hi·ªán tr√πng l·∫∑p
  Future<void> _autoGenerateIfDuplicated() async {
    try {
      bool hasDuplicates = await _checkDuplicateMeals();
      
      if (hasDuplicates) {
        print('‚ö†Ô∏è Ph√°t hi·ªán nhi·ªÅu m√≥n ƒÉn tr√πng l·∫∑p trong k·∫ø ho·∫°ch tu·∫ßn');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Ph√°t hi·ªán nhi·ªÅu m√≥n ƒÉn tr√πng l·∫∑p, ƒëang t·∫°o k·∫ø ho·∫°ch ƒëa d·∫°ng h∆°n...'),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 3),
            ),
          );
        }
        
        // T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi tham s·ªë ƒë·∫∑c bi·ªát ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        await _generateNewMealPlanWithDiversityOption();
      }
    } catch (e) {
      print('‚ùå L·ªói khi ki·ªÉm tra tr√πng l·∫∑p m√≥n ƒÉn: $e');
    }
  }
  
  // T·∫°o k·∫ø ho·∫°ch m·ªõi v·ªõi t√πy ch·ªçn ƒëa d·∫°ng h√≥a m√≥n ƒÉn
  Future<void> _generateNewMealPlanWithDiversityOption() async {
    try {
      setState(() {
        _isLoading = true;
        _hasError = false;
        _errorMessage = '';
      });
      
      // Ki·ªÉm tra xem c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
      final authProvider = Provider.of<UserAuthProvider>(context, listen: false);
      if (!authProvider.isAuthenticated) {
        throw Exception('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');
      }
      
      // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh m·ª•c ti√™u dinh d∆∞·ª°ng
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final userId = FirebaseAuth.instance.currentUser?.uid;
      
      if (userId == null) {
        throw Exception('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng');
      }
      
      // L·∫•y m·ª•c ti√™u dinh d∆∞·ª°ng ho·∫∑c s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
      final caloriesTarget = userDataProvider.tdeeCalories > 0 
          ? userDataProvider.tdeeCalories 
          : app_config.defaultCaloriesTarget;
      final proteinTarget = userDataProvider.tdeeProtein > 0 
          ? userDataProvider.tdeeProtein 
          : app_config.defaultProteinTarget;
      final fatTarget = userDataProvider.tdeeFat > 0 
          ? userDataProvider.tdeeFat 
          : app_config.defaultFatTarget;
      final carbsTarget = userDataProvider.tdeeCarbs > 0 
          ? userDataProvider.tdeeCarbs
          : app_config.defaultCarbsTarget;
      
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o k·∫ø ho·∫°ch
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng h∆°n...'),
            duration: Duration(seconds: 2),
          ),
        );
      }
      
      // S·ª≠ d·ª•ng endpoint POST /api/meal-plan/generate ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi
      final headers = await ApiService.getAuthHeaders();
      
      // T·∫°o d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng cho API
      final requestData = {
        'user_id': userId,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': true,
        'ensure_diversity': true, // Th√™m tham s·ªë ƒë·∫∑c bi·ªát ƒë·ªÉ tr√°nh tr√πng l·∫∑p
      };
      
      // Th√™m preferences d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (userDataProvider.preferences != null && userDataProvider.preferences.isNotEmpty) {
        requestData['preferences'] = userDataProvider.preferences;
      }
      
      // Th√™m allergies d∆∞·ªõi d·∫°ng chu·ªói n·∫øu c√≥
      if (userDataProvider.allergies != null && userDataProvider.allergies.isNotEmpty) {
        requestData['allergies'] = userDataProvider.allergies;
      }
      
      // Th√™m cuisine_style n·∫øu c√≥
      if (userDataProvider.cuisineStyle != null && userDataProvider.cuisineStyle!.isNotEmpty) {
        requestData['cuisine_style'] = userDataProvider.cuisineStyle!;
      }
      
      final generateUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.generateMealPlan}');
      
      print('üîÑ ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng t·ª´ API: $generateUrl');
      print('üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: ${jsonEncode(requestData)}');
      
      final response = await http.post(
        generateUrl,
        headers: {
          ...headers,
          'Content-Type': 'application/json',
        },
        body: jsonEncode(requestData),
      ).timeout(
        Duration(seconds: 60),  // TƒÉng timeout l√™n 60 gi√¢y
        onTimeout: () {
          print('‚è±Ô∏è Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
          throw Exception('Timeout khi t·∫°o k·∫ø ho·∫°ch ƒÉn m·ªõi');
        },
      );
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        print('‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng th√†nh c√¥ng');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('ƒê√£ t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng, ƒëang ch·ªù c·∫≠p nh·∫≠t...'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 3),
            ),
          );
        }
        
        // ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ Firebase c·∫≠p nh·∫≠t d·ªØ li·ªáu
        await Future.delayed(Duration(seconds: 5));
        
        // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ Firestore
        await _loadMealPlan();
        
      } else {
        print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng: ${response.statusCode}');
        throw Exception('L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng: $e');
      
      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi
      String errorMessage = 'Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng';
      Color errorColor = Colors.red;
      
      // Ki·ªÉm tra lo·∫°i l·ªói c·ª• th·ªÉ
      if (e.toString().contains('SocketException') || 
          e.toString().contains('Connection refused') ||
          e.toString().contains('Failed host lookup')) {
        errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c li√™n h·ªá h·ªó tr·ª£.';
        errorColor = Colors.orange;
      } else {
        errorMessage = 'Kh√¥ng th·ªÉ t·∫°o k·∫ø ho·∫°ch ƒÉn ƒëa d·∫°ng: ${e.toString()}';
      }
      
      if (mounted) {
        setState(() {
          _isLoading = false;
          _hasError = true;
          _errorMessage = errorMessage;
        });
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: errorColor,
            duration: Duration(seconds: 5),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }
} 