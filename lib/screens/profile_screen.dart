import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import '../utils/constants.dart';
import 'package:provider/provider.dart';
import '../providers/user_data_provider.dart';
import '../utils/tdee_calculator.dart';
import '../services/firestore_service.dart';
// Add imports for onboarding pages
import '../screens/onboarding/activity_level_page.dart';
import '../screens/onboarding/health_condition_page.dart';
import '../screens/onboarding/target_weight_page.dart';
import '../screens/onboarding/weight_gain_pace_page.dart';
import '../styles/onboarding_styles.dart';
import '../screens/settings_screen.dart';
import 'onboarding/gender_selection_page.dart';
import 'onboarding/age_selection_page.dart';
import 'onboarding/height_selection_page.dart';
import 'onboarding/weight_selection_page.dart';
import 'onboarding/activity_level_page.dart';
import 'onboarding/diet_goal_page.dart';
import '../services/auth_service.dart';

// Add extension to add custom properties to UserDataProvider
extension UserDataProviderExtension on UserDataProvider {
  String get name => "L√™ Anh T√∫"; // Default name if not available
  double get initialWeight => weightKg; // Use current weight if initial not set
  double get targetWeight => targetWeightKg; // Use the proper getter from UserDataProvider
  
  void updateWeight(double weight) {
    // Call the setWeight method from UserDataProvider
    setWeight(weight);
  }
}

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu ng∆∞·ªùi d√πng
  double _weight = 54.0;
  String _name = "L√™ Anh T√∫";
  int _age = 23;
  double _tdee = 2275;
  double _targetCalories = 2782;
  double _weeklyWeightChange = 0.46;
  List<FlSpot> _weightHistory = [];
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }

  // T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Provider
  Future<void> _loadUserData() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      final authService = Provider.of<AuthService>(context, listen: false);
      
      // Ki·ªÉm tra v√† ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase n·∫øu c·∫ßn
      if (authService.isAuthenticated) {
        // ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase v√†o UserDataProvider
        try {
          await authService.syncUserDataToProvider(userDataProvider);
          print('‚úÖ ƒê√£ ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase v√†o UserDataProvider trong ProfileScreen');
        } catch (e) {
          print('‚ö†Ô∏è L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase: $e');
          // Ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªØ li·ªáu hi·ªán c√≥ trong UserDataProvider
        }
      }
      
      // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n t·ª´ Provider
      final weight = userDataProvider.weightKg;
      final height = userDataProvider.heightCm;
      final age = userDataProvider.age;
      final gender = userDataProvider.gender;
      final activity = userDataProvider.activityLevel;
      final goal = userDataProvider.goal;
      final pace = userDataProvider.pace;
      final userName = userDataProvider.name;
      
      // T√≠nh to√°n TDEE v√† c√°c gi√° tr·ªã dinh d∆∞·ª°ng
      final calculator = TDEECalculator(
        gender: gender,
        age: age,
        heightCm: height,
        weightKg: weight,
        activityLevel: activity,
        goal: goal,
        pace: pace,
      );
      
      // T√≠nh to√°n TDEE v√† nhu c·∫ßu calo h√†ng ng√†y
      final tdee = calculator.calculateBaseTDEE();
      
      // S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ getConsistentCalorieGoal() ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
      final dailyCalories = userDataProvider.getConsistentCalorieGoal();
      
      // T·∫°o gi·∫£ l·ªãch s·ª≠ c√¢n n·∫∑ng n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
      final spotList = <FlSpot>[];
      // L·ªãch s·ª≠ 7 ng√†y t·ª´ hi·ªán t·∫°i (gi·∫£ l·∫≠p)
      final baseWeight = weight;
      double changeRate = pace;
      
      if (goal == "Gi·∫£m c√¢n") {
        changeRate = -changeRate;
      } else if (goal == "Duy tr√¨ c√¢n n·∫∑ng") {
        changeRate = 0;
      }
      
      // T·∫°o l·ªãch s·ª≠ c√¢n n·∫∑ng trong 7 tu·∫ßn g·∫ßn ƒë√¢y (m√¥ ph·ªèng)
      final weeklyChange = changeRate / 7.0;
      for (int i = 0; i < 7; i++) {
        final weekWeight = baseWeight - (weeklyChange * (6 - i) * 7);
        spotList.add(FlSpot(i.toDouble(), weekWeight));
      }
        
      // C·∫≠p nh·∫≠t d·ªØ li·ªáu
      setState(() {
        _weight = weight;
        _age = age;
        _name = userName.isNotEmpty ? userName : "Ng∆∞·ªùi d√πng";
        _tdee = tdee;
        _targetCalories = dailyCalories.toDouble();
        _weeklyWeightChange = pace;
        _weightHistory = spotList;
        _isLoading = false;
      });
      
      print('‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng th√†nh c√¥ng trong ProfileScreen');
      print('üë§ T√™n: $_name, Tu·ªïi: $_age, C√¢n n·∫∑ng: $_weight kg');
      print('üî• TDEE: $_tdee kcal, M·ª•c ti√™u: $_targetCalories kcal');
    } catch (e) {
      print('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Center(
        child: CircularProgressIndicator(
          color: AppColors.primary,
        ),
      );
    }
    
    return SingleChildScrollView(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildUserInfoHeader(),
          SizedBox(height: 24),
          _buildGoalOverview(),
          SizedBox(height: 24),
          _buildWeightUpdateNotification(),
          SizedBox(height: 24),
          _buildWeightHistoryChart(),
        ],
      ),
    );
  }

  // Card th√¥ng tin ng∆∞·ªùi d√πng
  Widget _buildUserInfoHeader() {
    // T√≠nh to√°n ph·∫ßn trƒÉm ho√†n th√†nh d·ª±a tr√™n m·ª•c ti√™u
    final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
    final targetWeight = userDataProvider.targetWeight;
    
    double progressValue = 0.7; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    
    if (targetWeight > 0) {
      final startWeight = userDataProvider.initialWeight > 0 ? 
          userDataProvider.initialWeight : userDataProvider.weightKg;
      
      final totalChange = targetWeight - startWeight;
      final currentChange = _weight - startWeight;
      
      if (totalChange != 0) {
        progressValue = currentChange / totalChange;
        
        // Gi·ªõi h·∫°n gi√° tr·ªã t·ª´ 0 ƒë·∫øn 1
        progressValue = progressValue.clamp(0.0, 1.0);
      }
    }
    
    return Card(
      elevation: 4,
      shadowColor: Colors.black.withAlpha(51),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                // Weight info
                Flexible(
                  flex: 1,
                  child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Icon(Icons.scale, size: 32, color: AppColors.textPrimary),
                    SizedBox(height: 4),
                    Text(
                      "${_weight.toStringAsFixed(1)} kg",
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                  ),
                ),
                
                // User info with avatar
                Flexible(
                  flex: 2,
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                  children: [
                    CircleAvatar(
                      radius: 24,
                      backgroundColor: Colors.grey.shade300,
                      child: Icon(Icons.person, size: 24, color: Colors.grey.shade700),
                    ),
                    SizedBox(width: 12),
                      Flexible(
                        child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "$_name,",
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                          ),
                              overflow: TextOverflow.ellipsis,
                        ),
                        Text(
                          "$_age",
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.grey.shade700,
                          ),
                        ),
                      ],
                        ),
                    ),
                  ],
                  ),
                ),
                
                // Settings button
                IconButton(
                  icon: Icon(Icons.settings, color: AppColors.textSecondary),
                  onPressed: () {
                    // Navigate to settings screen
                    Navigator.of(context).push(
                      MaterialPageRoute(
                        builder: (context) => SettingsScreen(),
                      ),
                    ).then((_) => _loadUserData());
                  },
                ),
              ],
            ),
            SizedBox(height: 16),
            
            // Progress indicator
            ClipRRect(
              borderRadius: BorderRadius.circular(3),
              child: LinearProgressIndicator(
                value: progressValue,
                backgroundColor: Colors.grey.shade200,
                valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF00BFA6)),
                minHeight: 6,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // T·ªïng quan m·ª•c ti√™u
  Widget _buildGoalOverview() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 4, vertical: 8),
          child: Row(
            children: [
              Icon(Icons.restaurant_menu, size: 24, color: AppColors.textPrimary),
              SizedBox(width: 8),
              Flexible(
                child: Text(
                  "T·ªïng quan m·ª•c ti√™u",
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                  overflow: TextOverflow.ellipsis,
                ),
              ),
              SizedBox(width: 8),
              OutlinedButton.icon(
                onPressed: () => _navigateToProfileUpdate(),
                icon: Icon(Icons.edit, size: 16),
                label: Text("C·∫≠p nh·∫≠t"),
                style: OutlinedButton.styleFrom(
                  foregroundColor: AppColors.primary,
                  side: BorderSide(color: AppColors.primary),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  minimumSize: Size(0, 0),
                ),
              ),
            ],
          ),
        ),
        SizedBox(height: 12),
        
        // Three cards in a row
        Row(
          children: [
            Expanded(
              child: _buildInfoCard(
                icon: Icons.local_fire_department,
                iconColor: Colors.orange,
                title: "TDEE",
                value: "${_tdee.round()} kcal",
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: _buildInfoCard(
                icon: Icons.speed,
                iconColor: Colors.blue,
                title: _getWeightChangeText(),
                value: "${_weeklyWeightChange} kg/tu·∫ßn",
              ),
            ),
            SizedBox(width: 12),
            Expanded(
              child: _buildInfoCard(
                icon: Icons.whatshot,
                iconColor: Colors.deepOrange,
                title: "M·ª•c ti√™u",
                value: "${_targetCalories.round()} kcal",
              ),
            ),
          ],
        ),
        SizedBox(height: 24),
        
        // Weight trend line chart
        Container(
          height: 220,
          padding: EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withAlpha(13),
                blurRadius: 10,
                offset: Offset(0, 4),
              ),
            ],
          ),
          child: Stack(
            children: [
              _buildWeightTrendChart(),
              Positioned(
                top: 70,
                right: 40,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.blue.withAlpha(26),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.blue.withAlpha(128), width: 1),
                  ),
                  child: Text(
                    'Th·∫ø a chiui',
                    style: TextStyle(
                      color: Colors.blue,
                      fontSize: 12,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // Helper to format weight change text
  String _getWeightChangeText() {
    final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
    final goal = userDataProvider.goal;
    
    if (goal == "TƒÉng c√¢n") {
      return "TƒÉng c√¢n";
    } else if (goal == "Gi·∫£m c√¢n") {
      return "Gi·∫£m c√¢n";
    } else {
      return "Duy tr√¨";
    }
  }

  // Helper method to build info cards
  Widget _buildInfoCard({
    required IconData icon,
    required Color iconColor,
    required String title,
    required String value,
  }) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(icon, color: iconColor, size: 24),
            SizedBox(height: 8),
            Text(
              title,
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey.shade600,
              ),
            ),
            SizedBox(height: 4),
            Text(
              value,
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
              ),
              overflow: TextOverflow.ellipsis,
            ),
          ],
        ),
      ),
    );
  }

  // Weight trend chart
  Widget _buildWeightTrendChart() {
    // T√≠nh to√°n min v√† max cho bi·ªÉu ƒë·ªì
    double minY = 50.0;
    double maxY = 56.0;
    
    if (_weightHistory.isNotEmpty) {
      // T√¨m gi√° tr·ªã min v√† max t·ª´ d·ªØ li·ªáu
      final values = _weightHistory.map((spot) => spot.y).toList();
      minY = values.reduce((min, val) => min < val ? min : val) - 2;
      maxY = values.reduce((max, val) => max > val ? max : val) + 2;
    }
    
    return LineChart(
      LineChartData(
        gridData: FlGridData(
          show: true,
          drawVerticalLine: true,
          horizontalInterval: 1,
          verticalInterval: 1,
          getDrawingHorizontalLine: (value) {
            return FlLine(
              color: Colors.grey.shade200,
              strokeWidth: 1,
            );
          },
          getDrawingVerticalLine: (value) {
            return FlLine(
              color: Colors.grey.shade200,
              strokeWidth: 1,
            );
          },
        ),
        titlesData: FlTitlesData(
          show: true,
          rightTitles: AxisTitles(
            sideTitles: SideTitles(showTitles: false),
          ),
          topTitles: AxisTitles(
            sideTitles: SideTitles(showTitles: false),
          ),
          bottomTitles: AxisTitles(
            sideTitles: SideTitles(
              showTitles: true,
              reservedSize: 30,
              interval: 1,
              getTitlesWidget: (value, meta) {
                const titles = ['th√°ng 5 10', '', 'Th6', '', 'Th7', '', 'Th8 09'];
                int index = value.toInt();
                if (index >= 0 && index < titles.length) {
                  return Padding(
                    padding: const EdgeInsets.only(top: 8.0),
                    child: Text(
                      titles[index],
                      style: TextStyle(
                        color: Colors.grey.shade600,
                        fontSize: 10,
                      ),
                    ),
                  );
                }
                return const SizedBox();
              },
            ),
          ),
          leftTitles: AxisTitles(
            sideTitles: SideTitles(
              showTitles: true,
              interval: 1,
              getTitlesWidget: (value, meta) {
                return Text(
                  '${value.toInt()} kg',
                  style: TextStyle(
                    color: Colors.grey.shade600,
                    fontSize: 10,
                  ),
                );
              },
              reservedSize: 42,
            ),
          ),
        ),
        borderData: FlBorderData(
          show: true,
          border: Border.all(color: Colors.grey.shade300, width: 1),
        ),
        minX: 0,
        maxX: 6,
        minY: minY,
        maxY: maxY,
        // Add a special line for the "Th·∫ø a chiui" point
        extraLinesData: ExtraLinesData(
          horizontalLines: [
            HorizontalLine(
              y: _weightHistory.isNotEmpty ? _weightHistory[4].y : 53.5,
              color: Colors.blue.withAlpha(128),
              strokeWidth: 1,
              dashArray: [5, 5],
            ),
          ],
        ),
        lineBarsData: [
          LineChartBarData(
            spots: _weightHistory.isEmpty ? [
              FlSpot(0, 52),
              FlSpot(1, 52.5),
              FlSpot(2, 53),
              FlSpot(3, 52.8),
              FlSpot(4, 53.5),
              FlSpot(5, 53.8),
              FlSpot(6, 54),
            ] : _weightHistory,
            isCurved: true,
            gradient: LinearGradient(
              colors: [Colors.orange, Colors.green],
            ),
            barWidth: 3,
            isStrokeCapRound: true,
            dotData: FlDotData(
              show: true,
              getDotPainter: (spot, percent, barData, index) {
                return FlDotCirclePainter(
                  radius: 4,
                  color: Colors.white,
                  strokeWidth: 2,
                  strokeColor: index == 4 ? Colors.blue : barData.gradient!.colors[1],
                );
              },
            ),
            belowBarData: BarAreaData(
              show: true,
              gradient: LinearGradient(
                colors: [
                  Colors.orange.withAlpha(77),
                  Colors.green.withAlpha(77),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Th√¥ng b√°o c·∫≠p nh·∫≠t c√¢n n·∫∑ng
  Widget _buildWeightUpdateNotification() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Color(0xFFE3F2FD),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(
            Icons.auto_awesome,
            color: Color(0xFF1565C0),
            size: 24,
          ),
          SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "AI mu·ªën b·∫°n c·∫≠p nh·∫≠t c√¢n n·∫∑ng",
                  style: TextStyle(
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF1565C0),
                    fontSize: 14,
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  "ƒê·ªÉ tr√≠ tu·ªá nh√¢n t·∫°o t√≠nh to√°n nhu c·∫ßu calo v√† ch·∫•t dinh d∆∞·ª°ng h√†ng ng√†y c·ªßa b·∫°n, vui l√≤ng c·∫≠p nh·∫≠t c√¢n n·∫∑ng c·ªßa b·∫°n",
                  style: TextStyle(
                    color: Color(0xFF1565C0),
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ c√¢n n·∫∑ng
  Widget _buildWeightHistoryChart() {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Flexible(
                  child: Text(
                    "C√¢n n·∫∑ng c·ªßa b·∫°n",
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                SizedBox(width: 8),
                OutlinedButton.icon(
                  onPressed: () {
                    // Show weight update dialog
                    _showWeightUpdateDialog();
                  },
                  icon: Icon(Icons.add, size: 16),
                  label: Text("C·∫≠p nh·∫≠t"),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Color(0xFF00BFA6),
                    side: BorderSide(color: Color(0xFF00BFA6)),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    minimumSize: Size(0, 0),
                  ),
                ),
              ],
            ),
            SizedBox(height: 16),
            SizedBox(
              height: 200,
              child: _buildAreaChart(),
            ),
            SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  "üèñÔ∏è K·ª≥ ngh·ªâ",
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey.shade700,
                  ),
                ),
              ],
            ),
            SizedBox(height: 16),
            // Th√™m n√∫t t√≠nh to√°n l·∫°i TDEE
            ListTile(
              leading: Icon(Icons.refresh, color: Colors.green),
              title: Text('T√≠nh to√°n l·∫°i TDEE'),
              subtitle: Text('C·∫≠p nh·∫≠t l·∫°i m·ª•c ti√™u calo d·ª±a tr√™n th√¥ng tin hi·ªán t·∫°i'),
              onTap: () async {
                // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
                final shouldRecalculate = await showDialog<bool>(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Text('T√≠nh to√°n l·∫°i TDEE'),
                    content: Text(
                      'B·∫°n c√≥ mu·ªën t√≠nh to√°n l·∫°i m·ª•c ti√™u calo d·ª±a tr√™n th√¥ng tin hi·ªán t·∫°i kh√¥ng?\n\n'
                      'Thao t√°c n√†y s·∫Ω c·∫≠p nh·∫≠t m·ª•c ti√™u calo v√† c√°c ch·ªâ s·ªë dinh d∆∞·ª°ng c·ªßa b·∫°n.'
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(false),
                        child: Text('H·ªßy'),
                      ),
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(true),
                        child: Text('T√≠nh to√°n l·∫°i'),
                      ),
                    ],
                  ),
                ) ?? false;
                
                if (shouldRecalculate) {
                  // L·∫•y UserDataProvider
                  final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
                  
                  // Hi·ªÉn th·ªã loading indicator
                  showDialog(
                    context: context,
                    barrierDismissible: false,
                    builder: (context) => Center(
                      child: CircularProgressIndicator(),
                    ),
                  );
                  
                  // T√≠nh to√°n l·∫°i TDEE
                  await _recalculateTDEEAfterWeightUpdate(userDataProvider, _weight);
                  
                  // ƒê√≥ng loading indicator
                  Navigator.of(context).pop();
                  
                  // Hi·ªÉn th·ªã k·∫øt qu·∫£
                  if (!context.mounted) return;
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('ƒê√£ c·∫≠p nh·∫≠t m·ª•c ti√™u calo: ${userDataProvider.tdeeCalories.round()} kcal'),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  // Dialog c·∫≠p nh·∫≠t c√¢n n·∫∑ng
  void _showWeightUpdateDialog() {
    double newWeight = _weight;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('C·∫≠p nh·∫≠t c√¢n n·∫∑ng'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('C√¢n n·∫∑ng hi·ªán t·∫°i: $_weight kg'),
            SizedBox(height: 16),
            TextField(
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              decoration: InputDecoration(
                labelText: 'C√¢n n·∫∑ng m·ªõi (kg)',
                border: OutlineInputBorder(),
              ),
              onChanged: (value) {
                try {
                  newWeight = double.parse(value);
                } catch (e) {
                  // Kh√¥ng l√†m g√¨ n·∫øu gi√° tr·ªã kh√¥ng h·ª£p l·ªá
                }
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () {
              // C·∫≠p nh·∫≠t c√¢n n·∫∑ng m·ªõi
              final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
              userDataProvider.updateWeight(newWeight);
              
              // L∆∞u l√™n Firestore n·∫øu c√≥ th·ªÉ
              try {
                FirestoreService().saveUserProfile({'weightKg': newWeight});
              } catch (e) {
                print('Kh√¥ng th·ªÉ l∆∞u c√¢n n·∫∑ng l√™n Firestore: $e');
              }
              
              // Recalculate TDEE after weight update
              _recalculateTDEEAfterWeightUpdate(userDataProvider, newWeight);
              
              // C·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu tr√™n giao di·ªán
              _loadUserData();
              
              Navigator.pop(context);
              
              // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('ƒê√£ c·∫≠p nh·∫≠t c√¢n n·∫∑ng th√†nh c√¥ng!'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppColors.primary,
            ),
            child: Text('C·∫≠p nh·∫≠t'),
          ),
        ],
      ),
    );
  }

  // Recalculate TDEE after weight update
  Future<void> _recalculateTDEEAfterWeightUpdate(UserDataProvider userDataProvider, double newWeight) async {
    // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c forceRecalculateTDEE ƒë·ªÉ t√≠nh to√°n l·∫°i TDEE t·ª´ ƒë·∫ßu
    await userDataProvider.forceRecalculateTDEE();
    
    // ƒê·ªìng b·ªô d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß v·ªõi backend sau khi c·∫≠p nh·∫≠t TDEE
    await userDataProvider.sendToApi();
    
    // L·∫•y gi√° tr·ªã calo m·ª•c ti√™u nh·∫•t qu√°n
    final consistentCalorieGoal = userDataProvider.getConsistentCalorieGoal();
    
    // Hi·ªÉn th·ªã th√¥ng b√°o v·ªÅ m·ª•c ti√™u calo m·ªõi
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('ƒê√£ c·∫≠p nh·∫≠t m·ª•c ti√™u calo: $consistentCalorieGoal kcal'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  // Area chart for weight history
  Widget _buildAreaChart() {
    return LineChart(
      LineChartData(
        gridData: FlGridData(
          show: true,
          drawVerticalLine: true,
          horizontalInterval: 5,
          verticalInterval: 1,
          getDrawingHorizontalLine: (value) {
            return FlLine(
              color: Colors.grey.shade200,
              strokeWidth: 1,
            );
          },
          getDrawingVerticalLine: (value) {
            return FlLine(
              color: Colors.grey.shade200,
              strokeWidth: 1,
            );
          },
        ),
        titlesData: FlTitlesData(
          show: true,
          rightTitles: AxisTitles(
            sideTitles: SideTitles(showTitles: false),
          ),
          topTitles: AxisTitles(
            sideTitles: SideTitles(showTitles: false),
          ),
          bottomTitles: AxisTitles(
            sideTitles: SideTitles(
              showTitles: true,
              reservedSize: 30,
              interval: 1,
              getTitlesWidget: (value, meta) {
                const days = ["T2", "T3", "T4", "T5", "T6", "T7", "CN"];
                int index = value.toInt();
                if (index >= 0 && index < days.length) {
                  return Padding(
                    padding: const EdgeInsets.only(top: 8.0),
                    child: Text(
                      days[index],
                      style: TextStyle(
                        color: Colors.grey.shade600,
                        fontSize: 10,
                      ),
                    ),
                  );
                }
                return const SizedBox();
              },
            ),
          ),
          leftTitles: AxisTitles(
            sideTitles: SideTitles(
              showTitles: true,
              interval: 5,
              getTitlesWidget: (value, meta) {
                return Text(
                  '${value.toInt()} kg',
                  style: TextStyle(
                    color: Colors.grey.shade600,
                    fontSize: 10,
                  ),
                );
              },
              reservedSize: 40,
            ),
          ),
        ),
        borderData: FlBorderData(
          show: true,
          border: Border.all(color: Colors.grey.shade300, width: 1),
        ),
        minX: 0,
        maxX: 6,
        minY: 40,
        maxY: 60,
        lineBarsData: [
          LineChartBarData(
            spots: _weightHistory.isEmpty ? [
              FlSpot(0, 54),
              FlSpot(1, 54),
              FlSpot(2, 54.2),
              FlSpot(3, 54.3),
              FlSpot(4, 54.2),
              FlSpot(5, 54.4),
              FlSpot(6, 54.5),
            ] : _weightHistory,
            isCurved: true,
            gradient: LinearGradient(
              colors: [Color(0xFF00BFA6), Color(0xFF00BFA6).withAlpha(128)],
            ),
            barWidth: 3,
            isStrokeCapRound: true,
            dotData: FlDotData(show: false),
            belowBarData: BarAreaData(
              show: true,
              gradient: LinearGradient(
                colors: [
                  Color(0xFF00BFA6).withAlpha(102),
                  Color(0xFF00BFA6).withAlpha(0),
                ],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Function to navigate through the profile update flow
  void _navigateToProfileUpdate() async {
    // Start the sequential navigation flow through onboarding pages
    final result = await Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => ProfileUpdateFlow(initialStep: 'name'),
      ),
    );
    
    // If we got a result back, refresh the profile data
    if (result == true) {
      _loadUserData();
    }
  }

  // Save goal settings
  Future<void> _saveGoalSettings() async {
    final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
    
    // L·∫•y gi√° tr·ªã hi·ªán t·∫°i t·ª´ userDataProvider thay v√¨ s·ª≠ d·ª•ng bi·∫øn kh√¥ng t·ªìn t·∫°i
    String goal = userDataProvider.goal;
    double pace = userDataProvider.pace;
    
    // C·∫≠p nh·∫≠t m·ª•c ti√™u v√† t·ªëc ƒë·ªô s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi
    await userDataProvider.updateUserGoal(
      goal: goal,
      pace: pace,
    );
    
    // Hi·ªÉn th·ªã th√¥ng b√°o
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('M·ª•c ti√™u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng'),
        backgroundColor: Theme.of(context).colorScheme.primary,
      ),
    );
    
    // ƒê√≥ng dialog
    Navigator.of(context).pop();
  }

  // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√¥ng qua API
  Future<bool> _updateUserProfileViaApi(Map<String, dynamic> userData) async {
    try {
      // Hi·ªÉn th·ªã loading indicator
      setState(() {
        _isLoading = true;
      });
      
      // L·∫•y AuthService t·ª´ Provider
      final authService = Provider.of<AuthService>(context, listen: false);
      
      // G·ªçi ph∆∞∆°ng th·ª©c updateFullUserProfile t·ª´ AuthService ƒë·ªÉ c·∫≠p nh·∫≠t tr·ª±c ti·∫øp v·ªõi Firestore
      final success = await authService.updateFullUserProfile(
        // Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng t·ª´ userData sang tham s·ªë ri√™ng l·∫ª
        displayName: userData['display_name'],
        photoURL: userData['photo_url'],
        age: userData['age'],
        gender: userData['gender'],
        heightCm: userData['height_cm'],
        weightKg: userData['weight_kg'],
        targetWeightKg: userData['target_weight_kg'],
        activityLevel: userData['activity_level'],
        goal: userData['goal'],
        pace: userData['pace'],
        dietRestrictions: userData['diet_restrictions'] != null ? 
          List<String>.from(userData['diet_restrictions']) : null,
        healthConditions: userData['health_conditions'] != null ? 
          List<String>.from(userData['health_conditions']) : null,
        measurementSystem: userData['measurement_system'],
        nutritionGoals: userData['nutrition_goals'],
      );
      
      // ·∫®n loading indicator
      setState(() {
        _isLoading = false;
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i: ${authService.errorMessage}'),
            backgroundColor: Colors.red,
          ),
        );
      }
      
      return success;
    } catch (e) {
      // ·∫®n loading indicator
      setState(() {
        _isLoading = false;
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: $e'),
          backgroundColor: Colors.red,
        ),
      );
      
      return false;
    }
  }

  // Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t to√†n b·ªô th√¥ng tin ng∆∞·ªùi d√πng
  Future<bool> _updateFullUserProfile({
    String? displayName,
    String? photoURL,
    int? age,
    String? gender,
    double? heightCm,
    double? weightKg,
    double? targetWeightKg,
    String? activityLevel,
    String? goal,
    double? pace,
    List<String>? dietRestrictions,
    List<String>? healthConditions,
    String? measurementSystem,
    Map<String, dynamic>? nutritionGoals,
  }) async {
    try {
      // Hi·ªÉn th·ªã loading indicator
      setState(() {
        _isLoading = true;
      });
      
      // L·∫•y AuthService t·ª´ Provider
      final authService = Provider.of<AuthService>(context, listen: false);
      
      // G·ªçi ph∆∞∆°ng th·ª©c updateFullUserProfile t·ª´ AuthService
      final success = await authService.updateFullUserProfile(
        displayName: displayName,
        photoURL: photoURL,
        age: age,
        gender: gender,
        heightCm: heightCm,
        weightKg: weightKg,
        targetWeightKg: targetWeightKg,
        activityLevel: activityLevel,
        goal: goal,
        pace: pace,
        dietRestrictions: dietRestrictions,
        healthConditions: healthConditions,
        measurementSystem: measurementSystem,
        nutritionGoals: nutritionGoals,
      );
      
      // ·∫®n loading indicator
      setState(() {
        _isLoading = false;
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£
      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i: ${authService.errorMessage}'),
            backgroundColor: Colors.red,
          ),
        );
      }
      
      return success;
    } catch (e) {
      // ·∫®n loading indicator
      setState(() {
        _isLoading = false;
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: $e'),
          backgroundColor: Colors.red,
        ),
      );
      
      return false;
    }
  }
}

// Widget to handle navigation to specific onboarding screens for updating user profile data
class ProfileUpdateFlow extends StatelessWidget {
  final String initialStep;
  
  const ProfileUpdateFlow({
    Key? key, 
    required this.initialStep,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final userDataProvider = Provider.of<UserDataProvider>(context);
    final _profileScreenState = context.findAncestorStateOfType<_ProfileScreenState>();
    
    // Map initialStep to the appropriate page
    Widget pageContent;
    String pageTitle;
    
    switch (initialStep) {
      case 'name':
        pageTitle = 'C·∫≠p nh·∫≠t t√™n';
        pageContent = _buildNameUpdatePage(context, userDataProvider, _profileScreenState);
        break;
      case 'age':
        pageTitle = 'C·∫≠p nh·∫≠t tu·ªïi';
        pageContent = _buildAgeUpdatePage(context, userDataProvider, _profileScreenState);
        break;
      case 'gender':
        pageTitle = 'C·∫≠p nh·∫≠t gi·ªõi t√≠nh';
        pageContent = _buildGenderUpdatePage(context, userDataProvider, _profileScreenState);
        break;
      case 'height':
        pageTitle = 'C·∫≠p nh·∫≠t chi·ªÅu cao';
        pageContent = _buildHeightUpdatePage(context, userDataProvider, _profileScreenState);
        break;
      case 'weight':
        pageTitle = 'C·∫≠p nh·∫≠t c√¢n n·∫∑ng';
        pageContent = _buildWeightUpdatePage(context, userDataProvider, _profileScreenState);
        break;
      case 'activity':
        pageTitle = 'C·∫≠p nh·∫≠t m·ª©c ƒë·ªô ho·∫°t ƒë·ªông';
        pageContent = ActivityLevelPage(updateMode: true);
        break;
      case 'goal':
        pageTitle = 'C·∫≠p nh·∫≠t m·ª•c ti√™u';
        pageContent = DietGoalPage(updateMode: true);
        break;
      default:
        pageTitle = 'C·∫≠p nh·∫≠t th√¥ng tin';
        pageContent = _buildDefaultUpdatePage(context);
    }
    
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text(pageTitle),
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () => Navigator.of(context).pop(),
        ),
        elevation: 0,
        backgroundColor: Colors.transparent,
        foregroundColor: Colors.black,
      ),
      body: SafeArea(
        child: pageContent,
      ),
    );
  }
  
  // Page to update user name
  Widget _buildNameUpdatePage(BuildContext context, UserDataProvider userDataProvider, _ProfileScreenState? profileScreenState) {
    final TextEditingController nameController = TextEditingController(text: userDataProvider.name);
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Nh·∫≠p t√™n c·ªßa b·∫°n',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'T√™n n√†y s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong ·ª©ng d·ª•ng.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 24),
            TextField(
              controller: nameController,
              decoration: InputDecoration(
                labelText: 'T√™n',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              textCapitalization: TextCapitalization.words,
            ),
            SizedBox(height: 32), // Fixed height instead of Spacer
            Container(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () async {
                  if (nameController.text.trim().isNotEmpty) {
                    final newName = nameController.text.trim();
                    
                    // C·∫≠p nh·∫≠t t√™n trong UserDataProvider
                    userDataProvider.setName(newName);
                    
                    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√¥ng qua API
                    if (profileScreenState != null) {
                      // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t to√†n b·ªô th√¥ng tin
                      await profileScreenState._updateFullUserProfile(
                        displayName: newName,
                      );
                    }
                    
                    Navigator.of(context).pop();
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                child: Text(
                  'C·∫≠p nh·∫≠t',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Page to update user age
  Widget _buildAgeUpdatePage(BuildContext context, UserDataProvider userDataProvider, _ProfileScreenState? profileScreenState) {
    final TextEditingController ageController = TextEditingController(text: userDataProvider.age.toString());
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'C·∫≠p nh·∫≠t tu·ªïi c·ªßa b·∫°n',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'Tu·ªïi c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i t√≠nh to√°n nhu c·∫ßu dinh d∆∞·ª°ng ph√π h·ª£p.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 24),
            TextField(
              controller: ageController,
              decoration: InputDecoration(
                labelText: 'Tu·ªïi',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 32),
            Container(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () async {
                  if (ageController.text.isNotEmpty) {
                    try {
                      final int newAge = int.parse(ageController.text);
                      
                      if (newAge > 0 && newAge < 120) {
                        // C·∫≠p nh·∫≠t tu·ªïi trong UserDataProvider
                        userDataProvider.setAge(newAge);
                        
                        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√¥ng qua API
                        if (profileScreenState != null) {
                          await profileScreenState._updateFullUserProfile(
                            age: newAge,
                          );
                        }
                        
                        Navigator.of(context).pop();
                      } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                            content: Text('Vui l√≤ng nh·∫≠p tu·ªïi h·ª£p l·ªá (1-120)'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      }
                    } catch (e) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('Vui l√≤ng nh·∫≠p tu·ªïi h·ª£p l·ªá'),
                          backgroundColor: Colors.red,
                        ),
                      );
                    }
                  }
                },
                style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                child: Text(
                  'C·∫≠p nh·∫≠t',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
          ],
        ),
                      ),
                    );
  }
  
  // Page to update user gender
  Widget _buildGenderUpdatePage(BuildContext context, UserDataProvider userDataProvider, _ProfileScreenState? profileScreenState) {
    String selectedGender = userDataProvider.gender;
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'C·∫≠p nh·∫≠t gi·ªõi t√≠nh c·ªßa b·∫°n',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'Gi·ªõi t√≠nh sinh h·ªçc gi√∫p ch√∫ng t√¥i t√≠nh to√°n nhu c·∫ßu dinh d∆∞·ª°ng ph√π h·ª£p.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 24),
            StatefulBuilder(
              builder: (context, setState) {
                return Column(
                  children: [
                    RadioListTile<String>(
                      title: Text('Nam'),
                      value: 'Nam',
                      groupValue: selectedGender,
                      onChanged: (value) {
                        setState(() {
                          selectedGender = value!;
                        });
                      },
                    ),
                    RadioListTile<String>(
                      title: Text('N·ªØ'),
                      value: 'N·ªØ',
                      groupValue: selectedGender,
                      onChanged: (value) {
                        setState(() {
                          selectedGender = value!;
                        });
                      },
                    ),
                  ],
                );
              }
            ),
            SizedBox(height: 32),
            Container(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () async {
                  // C·∫≠p nh·∫≠t gi·ªõi t√≠nh trong UserDataProvider
                  userDataProvider.setGender(selectedGender);
                  
                  // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√¥ng qua API
                  if (profileScreenState != null) {
                    await profileScreenState._updateFullUserProfile(
                      gender: selectedGender,
                    );
                  }
                  
                  Navigator.of(context).pop();
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                child: Text(
                  'C·∫≠p nh·∫≠t',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Page to update user height
  Widget _buildHeightUpdatePage(BuildContext context, UserDataProvider userDataProvider, _ProfileScreenState? profileScreenState) {
    final TextEditingController heightController = TextEditingController(text: userDataProvider.heightCm.toString());
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'C·∫≠p nh·∫≠t chi·ªÅu cao c·ªßa b·∫°n',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'Chi·ªÅu cao c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i t√≠nh to√°n nhu c·∫ßu dinh d∆∞·ª°ng ph√π h·ª£p.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 24),
            TextField(
              controller: heightController,
              decoration: InputDecoration(
                labelText: 'Chi·ªÅu cao (cm)',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 32),
            Container(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () async {
                  if (heightController.text.isNotEmpty) {
                    try {
                      final double newHeight = double.parse(heightController.text);
                      
                      if (newHeight > 50 && newHeight < 250) {
                        // C·∫≠p nh·∫≠t chi·ªÅu cao trong UserDataProvider
                        userDataProvider.setHeight(newHeight);
                        
                        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√¥ng qua API
                        if (profileScreenState != null) {
                          await profileScreenState._updateFullUserProfile(
                            heightCm: newHeight,
                          );
                        }
                        
                        Navigator.of(context).pop();
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Vui l√≤ng nh·∫≠p chi·ªÅu cao h·ª£p l·ªá (50-250 cm)'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      }
                    } catch (e) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('Vui l√≤ng nh·∫≠p chi·ªÅu cao h·ª£p l·ªá'),
                          backgroundColor: Colors.red,
                        ),
                      );
                    }
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                child: Text(
                  'C·∫≠p nh·∫≠t',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Page to update user weight
  Widget _buildWeightUpdatePage(BuildContext context, UserDataProvider userDataProvider, _ProfileScreenState? profileScreenState) {
    final TextEditingController weightController = TextEditingController(text: userDataProvider.weightKg.toString());
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'C·∫≠p nh·∫≠t c√¢n n·∫∑ng c·ªßa b·∫°n',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'C√¢n n·∫∑ng c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i t√≠nh to√°n nhu c·∫ßu dinh d∆∞·ª°ng ph√π h·ª£p.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey[600],
              ),
            ),
            SizedBox(height: 24),
            TextField(
              controller: weightController,
              decoration: InputDecoration(
                labelText: 'C√¢n n·∫∑ng (kg)',
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 32),
            Container(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () async {
                  if (weightController.text.isNotEmpty) {
                    try {
                      final double newWeight = double.parse(weightController.text);
                      
                      if (newWeight > 20 && newWeight < 300) {
                        // C·∫≠p nh·∫≠t c√¢n n·∫∑ng trong UserDataProvider
                        userDataProvider.setWeight(newWeight);
                        
                        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√¥ng qua API
                        if (profileScreenState != null) {
                          await profileScreenState._updateFullUserProfile(
                            weightKg: newWeight,
                          );
                          
                          // T√≠nh to√°n l·∫°i TDEE sau khi c·∫≠p nh·∫≠t c√¢n n·∫∑ng
                          await profileScreenState._recalculateTDEEAfterWeightUpdate(userDataProvider, newWeight);
                        }
                        
                        Navigator.of(context).pop();
                      } else {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text('Vui l√≤ng nh·∫≠p c√¢n n·∫∑ng h·ª£p l·ªá (20-300 kg)'),
                            backgroundColor: Colors.red,
                          ),
                        );
                      }
                    } catch (e) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('Vui l√≤ng nh·∫≠p c√¢n n·∫∑ng h·ª£p l·ªá'),
                          backgroundColor: Colors.red,
                        ),
                      );
                    }
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                  padding: EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                child: Text(
                  'C·∫≠p nh·∫≠t',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  // Default update page if no specific page is defined
  Widget _buildDefaultUpdatePage(BuildContext context) {
    return Center(
      child: SingleChildScrollView(
        child: Padding(
          padding: EdgeInsets.symmetric(vertical: 20, horizontal: 16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.construction,
                size: 80,
                color: Colors.orange,
              ),
              SizedBox(height: 16),
              Text(
                'Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 8),
              Text(
                'Vui l√≤ng th·ª≠ l·∫°i sau.',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 24),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text('Quay l·∫°i'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
