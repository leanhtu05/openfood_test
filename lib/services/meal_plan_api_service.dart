import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import '../models/meal_plan.dart';
import '../utils/constants.dart';
import 'package:flutter/foundation.dart';
import '../utils/config.dart' as app_config;
import 'package:firebase_auth/firebase_auth.dart';

class MealPlanApiService {
  // URL c∆° s·ªü c·ªßa API
  static String get baseUrl => app_config.apiBaseUrl;
  
  // Th·ªùi gian ch·ªù t·ªëi ƒëa cho c√°c API request
  static const Duration apiTimeout = Duration(seconds: 15);
  
  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra k·∫øt n·ªëi v·ªõi API
  static Future<bool> checkApiConnection() async {
    try {
      debugPrint('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi API t·∫°i: $baseUrl');
      final response = await http.get(Uri.parse('$baseUrl/')).timeout(
        const Duration(seconds: 3), // Gi·∫£m timeout xu·ªëng 3 gi√¢y ƒë·ªÉ nhanh h∆°n
        onTimeout: () {
          debugPrint('‚è±Ô∏è Timeout khi ki·ªÉm tra k·∫øt n·ªëi API');
          return http.Response('Timeout', 408);
        },
      );
      
      // Ghi log k·∫øt qu·∫£
      final isConnected = response.statusCode == 200 || response.statusCode == 404;
      debugPrint('üìä K·∫øt qu·∫£ ki·ªÉm tra k·∫øt n·ªëi API: ${isConnected ? "‚úÖ K·∫øt n·ªëi th√†nh c√¥ng (${response.statusCode})" : "‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c (${response.statusCode})"}');
      
      // Ch·∫•p nh·∫≠n 200 OK ho·∫∑c 404 Not Found (server ho·∫°t ƒë·ªông nh∆∞ng kh√¥ng c√≥ route /)
      return isConnected;
    } catch (e) {
      // X√°c ƒë·ªãnh lo·∫°i l·ªói c·ª• th·ªÉ ƒë·ªÉ ghi log chi ti·∫øt h∆°n
      String errorType = "Kh√¥ng x√°c ƒë·ªãnh";
      if (e.toString().contains('SocketException')) {
        errorType = "L·ªói Socket - Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß";
      } else if (e.toString().contains('HttpException')) {
        errorType = "L·ªói HTTP - Kh√¥ng t√¨m th·∫•y m√°y ch·ªß";
      } else if (e.toString().contains('FormatException')) {
        errorType = "L·ªói ƒë·ªãnh d·∫°ng - Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá";
      } else if (e.toString().contains('Timeout')) {
        errorType = "Timeout - M√°y ch·ªß kh√¥ng ph·∫£n h·ªìi k·ªãp th·ªùi";
      }
      
      debugPrint('‚ùå L·ªói k·∫øt n·ªëi API: $errorType - Chi ti·∫øt: $e');
      return false;
    }
  }
  
  // Ki·ªÉm tra t√¨nh tr·∫°ng AI
  static Future<Map<String, dynamic>> checkAIAvailability() async {
    try {
      final response = await http.get(Uri.parse('$baseUrl/api-status')).timeout(
        const Duration(seconds: 5),
        onTimeout: () => http.Response('{"ai_available":false,"error":"Timeout"}', 408),
      );
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        return {'ai_available': false, 'error': 'Status code: ${response.statusCode}'};
      }
    } catch (e) {
      print('AI status check error: $e');
      return {'ai_available': false, 'error': e.toString()};
    }
  }
  
  // Ki·ªÉm tra m·ªôt endpoint c·ª• th·ªÉ
  static Future<bool> checkEndpoint(String endpoint) async {
    try {
      final response = await http.get(Uri.parse('$baseUrl$endpoint')).timeout(
        const Duration(seconds: 5),
        onTimeout: () => http.Response('Timeout', 408),
      );
      
      // N·∫øu server tr·∫£ v·ªÅ 200 OK ho·∫∑c 404 Not Found, server v·∫´n ho·∫°t ƒë·ªông
      // N·∫øu l√† endpoint POST, c√≥ th·ªÉ server s·∫Ω tr·∫£ v·ªÅ l·ªói n·∫øu g·ªçi b·∫±ng GET
      return response.statusCode == 200 || 
             response.statusCode == 404 || 
             response.statusCode == 405; // Method Not Allowed c≈©ng ok
    } catch (e) {
      print('Endpoint check error: $e');
      return false;
    }
  }
  
  // T·∫°o k·∫ø ho·∫°ch tu·∫ßn c√° nh√¢n h√≥a
  static Future<Map<String, dynamic>> generatePersonalizedWeeklyMealPlan({
    required double caloriesTarget,
    required double proteinTarget,
    required double fatTarget,
    required double carbsTarget,
    List<String> preferences = const [],
    List<String> allergies = const [],
    String? cuisineStyle,
    bool useAI = false,
  }) async {
    try {
      // Chu·∫©n b·ªã th√¥ng tin dinh d∆∞·ª°ng
      final nutritionTarget = {
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
      };
      
      // Chu·∫©n b·ªã URL v·ªõi query parameters
      final uri = Uri.parse('$baseUrl/generate-weekly-meal-personalized')
        .replace(queryParameters: {
          'user_id': 'flutter_app',
          'use_ai': useAI.toString(),
        });
      
      // Chu·∫©n b·ªã request body
      final requestBody = json.encode({
        ...nutritionTarget,
        'preferences': preferences,
        'allergies': allergies,
        'cuisine_style': cuisineStyle,
      });
      
      // G·ª≠i request
      final response = await http.post(
        uri,
        headers: {'Content-Type': 'application/json'},
        body: requestBody,
      ).timeout(
        const Duration(seconds: 30),
        onTimeout: () => http.Response('{"error":"Request timeout"}', 408),
      );
      
      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        return responseData['meal_plan'];
      } else {
        final errorMsg = response.body;
        print('API error: [${response.statusCode}] $errorMsg');
        throw Exception('API Error: ${response.statusCode}');
      }
    } catch (e) {
      print('Failed to generate meal plan: $e');
      throw Exception('Failed to generate meal plan: $e');
    }
  }
  
  // Thay th·∫ø m·ªôt ng√†y trong k·∫ø ho·∫°ch
  static Future<Map<String, dynamic>> replaceDay({
    required Map<String, dynamic> replaceRequest,
    List<String> preferences = const [],
    List<String> allergies = const [],
    String? cuisineStyle,
    bool useAI = false,
  }) async {
    try {
      // Chu·∫©n b·ªã URL v·ªõi query parameters
      final uri = Uri.parse('$baseUrl/replace-day-personalized')
        .replace(queryParameters: {
          'user_id': 'flutter_app',
          'use_ai': useAI.toString(),
        });
      
      // Chu·∫©n b·ªã request body
      final requestBody = json.encode({
        ...replaceRequest,
        'preferences': preferences,
        'allergies': allergies,
        'cuisine_style': cuisineStyle,
      });
      
      // G·ª≠i request
      final response = await http.post(
        uri,
        headers: {'Content-Type': 'application/json'},
        body: requestBody,
      ).timeout(
        const Duration(seconds: 30),
        onTimeout: () => http.Response('{"error":"Request timeout"}', 408),
      );
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        final errorMsg = response.body;
        print('API error: [${response.statusCode}] $errorMsg');
        throw Exception('API Error: ${response.statusCode}');
      }
    } catch (e) {
      print('Failed to replace day: $e');
      throw Exception('Failed to replace day: $e');
    }
  }
  
  // T·∫°o k·∫ø ho·∫°ch b·ªØa ƒÉn h√†ng tu·∫ßn
  static Future<Map<String, dynamic>> generateWeeklyMealPlan({
    double? caloriesTarget = 2000.0,
    double? proteinTarget = 120.0,
    double? fatTarget = 65.0,
    double? carbsTarget = 250.0,
    bool useAI = true,
    String? userId,
  }) async {
    try {
      Map<String, dynamic> requestData = {
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': useAI,
      };
      
      if (userId != null && userId.isNotEmpty) {
        requestData['user_id'] = userId;
      }
      
      debugPrint('ƒêang g·ª≠i y√™u c·∫ßu t·∫°o k·∫ø ho·∫°ch ƒÉn...');
      final response = await http.post(
        Uri.parse('${baseUrl}${app_config.ApiEndpoints.generateMealPlan}'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(requestData),
      );
      
      if (response.statusCode == 200) {
        debugPrint('T·∫°o k·∫ø ho·∫°ch ƒÉn th√†nh c√¥ng!');
        return json.decode(response.body);
      } else {
        debugPrint('L·ªói khi t·∫°o k·∫ø ho·∫°ch ƒÉn: ${response.statusCode} ${response.body}');
        return getMockMealPlan();
      }
    } catch (e) {
      debugPrint('Exception khi t·∫°o k·∫ø ho·∫°ch ƒÉn: $e');
      return getMockMealPlan();
    }
  }
  
  // Thay th·∫ø k·∫ø ho·∫°ch cho m·ªôt ng√†y
  static Future<Map<String, dynamic>> replaceDayMealPlan({
    required String day,
    double? caloriesTarget = 2000.0,
    double? proteinTarget = 120.0,
    double? fatTarget = 65.0,
    double? carbsTarget = 250.0,
    bool useAI = true,
    String? userId,
    List<String>? preferences,
    List<String>? allergies,
  }) async {
    try {
      Map<String, dynamic> requestData = {
        'day_of_week': day,
        'calories_target': caloriesTarget,
        'protein_target': proteinTarget,
        'fat_target': fatTarget,
        'carbs_target': carbsTarget,
        'use_ai': useAI,
      };
      
      if (userId != null) {
        requestData['user_id'] = userId;
      }
      
      if (preferences != null && preferences.isNotEmpty) {
        requestData['preferences'] = preferences;
      }
      
      if (allergies != null && allergies.isNotEmpty) {
        requestData['allergies'] = allergies;
      }
      
      final response = await http.post(
        Uri.parse('${baseUrl}${app_config.ApiEndpoints.replaceDay}'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(requestData),
      );
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        debugPrint('L·ªói khi thay th·∫ø b·ªØa ƒÉn: ${response.statusCode} ${response.body}');
        return _getMockDayMealPlan(day);
      }
    } catch (e) {
      debugPrint('Exception khi thay th·∫ø ng√†y: $e');
      return _getMockDayMealPlan(day);
    }
  }
  
  // Replace a specific meal in the meal plan
  static Future<Map<String, dynamic>> replaceMeal({
    required String day,
    required String mealType,
    double? caloriesTarget,
    double? proteinTarget,
    double? fatTarget,
    double? carbsTarget,
    bool useAI = true,
    String? userId,
  }) async {
    try {
      Map<String, dynamic> requestData = {
        'day_of_week': day,
        'meal_type': mealType,
        'use_ai': useAI,
      };

      if (caloriesTarget != null) requestData['calories_target'] = caloriesTarget;
      if (proteinTarget != null) requestData['protein_target'] = proteinTarget;
      if (fatTarget != null) requestData['fat_target'] = fatTarget;
      if (carbsTarget != null) requestData['carbs_target'] = carbsTarget;
      if (userId != null) requestData['user_id'] = userId;
      
      final response = await http.post(
        Uri.parse('${baseUrl}${app_config.ApiEndpoints.replaceMeal}'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: json.encode(requestData),
      );
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        debugPrint('L·ªói khi thay th·∫ø b·ªØa ƒÉn: ${response.statusCode} ${response.body}');
        return _getMockMeal(mealType);
      }
    } catch (e) {
      debugPrint('Exception khi thay th·∫ø b·ªØa ƒÉn: $e');
      return _getMockMeal(mealType);
    }
  }
  
  // L·∫•y d·ªØ li·ªáu m·∫´u cho k·∫ø ho·∫°ch ƒÉn
  static Future<Map<String, dynamic>> getMockMealPlan() async {
    try {
      // ƒê·ªçc t·ª´ API mock data endpoint
      final response = await http.get(Uri.parse('${baseUrl}/generate-weekly-meal-demo'));
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      } else {
        // Fallback to hardcoded data
        return _getHardcodedMockData();
      }
    } catch (e) {
      debugPrint('L·ªói khi l·∫•y d·ªØ li·ªáu m·∫´u: $e');
      return _getHardcodedMockData();
    }
  }
  
  // D·ªØ li·ªáu m·∫´u cho m·ªôt ng√†y
  static Map<String, dynamic> _getMockDayMealPlan(String day) {
    // Tr·∫£ v·ªÅ c·∫•u tr√∫c d·ªØ li·ªáu cho m·ªôt ng√†y t·ª´ d·ªØ li·ªáu m·∫´u
    return {
      'day_of_week': day,
      'meals': {
        'B·ªØa s√°ng': [
          {
            'name': 'B√°nh m√¨ tr·ª©ng',
            'description': 'B√°nh m√¨ k·∫πp tr·ª©ng ·ªëp la v·ªõi rau x√† l√°ch v√† c√† chua',
            'ingredients': [
              'B√°nh m√¨', 'Tr·ª©ng g√†', 'X√† l√°ch', 'C√† chua', 'D·∫ßu √¥ liu'
            ],
            'nutrition': {
              'calories': 350,
              'protein': 15,
              'fat': 12,
              'carbs': 45,
            }
          }
        ],
        'B·ªØa tr∆∞a': [
          {
            'name': 'C∆°m g√† x·ªëi m·ª°',
            'description': 'C∆°m v·ªõi g√† chi√™n gi√≤n ph·ªß n∆∞·ªõc m·∫Øm chua ng·ªçt',
            'ingredients': [
              'C∆°m tr·∫Øng', 'ƒê√πi g√†', 'N∆∞·ªõc m·∫Øm', 'ƒê∆∞·ªùng', 'T·ªèi', '·ªöt'
            ],
            'nutrition': {
              'calories': 650,
              'protein': 35,
              'fat': 20,
              'carbs': 75,
            }
          }
        ],
        'B·ªØa t·ªëi': [
          {
            'name': 'Canh c√° n·∫•u chua',
            'description': 'Canh chua ng·ªçt v·ªõi c√° di√™u h·ªìng v√† rau th∆°m',
            'ingredients': [
              'C√° di√™u h·ªìng', 'Me chua', 'ƒê·∫≠u b·∫Øp', 'C√† chua', 'Th∆°m', 'Rau ng·ªï', 'Gi√°'
            ],
            'nutrition': {
              'calories': 400,
              'protein': 30,
              'fat': 10,
              'carbs': 35,
            }
          }
        ],
      },
      'nutrition_summary': {
        'calories': 1400,
        'protein': 80,
        'fat': 42,
        'carbs': 155,
      }
    };
  }

  // D·ªØ li·ªáu m·∫´u cho m·ªôt b·ªØa ƒÉn
  static Map<String, dynamic> _getMockMeal(String mealType) {
    String mealName;
    Map<String, dynamic> nutritionInfo;
    List<String> ingredients;
    String description;
    
    switch (mealType) {
      case 'B·ªØa s√°ng':
        mealName = 'Ch√°o tr·∫Øng v·ªõi tr·ª©ng b·∫Øc th·∫£o';
        description = 'Ch√°o tr·∫Øng n·∫•u m·ªÅm v·ªõi tr·ª©ng b·∫Øc th·∫£o b·ªï d∆∞·ª°ng';
        ingredients = ['G·∫°o', 'Tr·ª©ng b·∫Øc th·∫£o', 'H√†nh l√°', 'Ti√™u', 'N∆∞·ªõc m·∫Øm'];
        nutritionInfo = {
          'calories': 300,
          'protein': 12,
          'fat': 8,
          'carbs': 45,
        };
        break;
        
      case 'B·ªØa tr∆∞a':
        mealName = 'B√∫n b√≤ Hu·∫ø';
        description = 'B√∫n b√≤ Hu·∫ø cay th∆°m v·ªõi gi√≤ heo v√† th·ªãt b√≤';
        ingredients = ['B√∫n', 'Th·ªãt b√≤', 'Gi√≤ heo', 'M·∫Øm ru·ªëc', 'S·∫£', '·ªöt', 'Rau th∆°m'];
        nutritionInfo = {
          'calories': 550,
          'protein': 30,
          'fat': 15,
          'carbs': 65,
        };
        break;
        
      case 'B·ªØa t·ªëi':
        mealName = 'C√° kho t·ªô';
        description = 'C√° kho t·ªô ƒë·∫≠m ƒë√† v·ªõi n∆∞·ªõc m·∫Øm v√† th·ªãt ba ch·ªâ';
        ingredients = ['C√° l√≥c', 'Th·ªãt ba ch·ªâ', 'N∆∞·ªõc m·∫Øm', 'ƒê∆∞·ªùng', 'Ti√™u', '·ªöt'];
        nutritionInfo = {
          'calories': 450,
          'protein': 35,
          'fat': 20,
          'carbs': 10,
        };
        break;
        
      default:
        mealName = 'M√≥n ƒÉn m·∫´u';
        description = 'M√≥n ƒÉn m·∫´u cho demo';
        ingredients = ['Th√†nh ph·∫ßn 1', 'Th√†nh ph·∫ßn 2', 'Th√†nh ph·∫ßn 3'];
        nutritionInfo = {
          'calories': 400,
          'protein': 20,
          'fat': 15,
          'carbs': 40,
        };
    }
    
    return {
      'meal': {
        'name': mealName,
        'description': description,
        'ingredients': ingredients,
        'nutrition': nutritionInfo,
      }
    };
  }

  // Hardcoded mock data
  static Map<String, dynamic> _getHardcodedMockData() {
    return {
      'id': 'mock-meal-plan-001',
      'user_id': 'default-user',
      'created_at': DateTime.now().toIso8601String(),
      'weekly_plan': {
        'Monday': _getMockDayMealPlan('Th·ª© 2'),
        'Tuesday': _getMockDayMealPlan('Th·ª© 3'),
        'Wednesday': _getMockDayMealPlan('Th·ª© 4'),
        'Thursday': _getMockDayMealPlan('Th·ª© 5'),
        'Friday': _getMockDayMealPlan('Th·ª© 6'),
        'Saturday': _getMockDayMealPlan('Th·ª© 7'),
        'Sunday': _getMockDayMealPlan('Ch·ªß Nh·∫≠t'),
      },
      'nutrition_targets': {
        'calories_target': 2000,
        'protein_target': 120,
        'fat_target': 65,
        'carbs_target': 250,
      },
    };
  }
} 