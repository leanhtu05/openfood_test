import 'dart:convert';
import 'package:http/http.dart' as http;
import 'youtube_data_api_service.dart';

class VietnameseVideoService {
  // Singleton pattern
  static final VietnameseVideoService _instance = VietnameseVideoService._internal();
  factory VietnameseVideoService() => _instance;
  VietnameseVideoService._internal();

  final YouTubeDataAPIService _youtubeAPI = YouTubeDataAPIService();

  // Database video ti·∫øng Vi·ªát ƒë√£ verify
  static final Map<String, List<Map<String, String>>> _vietnameseVideos = {
    'Ph·ªü B√≤': [
      {
        'title': 'C√°ch N·∫•u PH·ªû B√í H√† N·ªôi Chu·∫©n V·ªã - B·∫øp Nh√†',
        'videoId': 'BlSpEbJ-o1g',
        'channel': 'B·∫øp Nh√† Vi·ªát',
        'language': 'vi',
        'region': 'VN',
      },
    ],
    'Ph·ªü G√†': [
      {
        'title': 'PH·ªû G√Ä c√°ch n·∫•u d·ªÖ ƒë∆°n gi·∫£n h∆°n m√† ngon chu·∫©n v·ªã',
        'videoId': 'RJdGI7zSYVM',
        'channel': 'B·∫øp Nh√† Vi·ªát',
        'language': 'vi',
        'region': 'VN',
      },
    ],
    'Ph·ªü G√† N·∫•u D·ª´a Mi·ªÅn T√¢y': [
      {
        'title': 'Ph·ªü G√† N·∫•u D·ª´a Mi·ªÅn T√¢y - H∆∞∆°ng V·ªã ƒê·∫∑c Tr∆∞ng',
        'videoId': 'RJdGI7zSYVM',
        'channel': 'B·∫øp Nh√† Mi·ªÅn T√¢y',
        'language': 'vi',
        'region': 'VN',
      },
      {
        'title': 'C√† Ri G√† D·ª´a Mi·ªÅn T√¢y - T∆∞∆°ng T·ª± Ph·ªü G√† D·ª´a',
        'videoId': 'A3oxHoYhoOs',
        'channel': 'M√≥n Ngon Mi·ªÅn T√¢y',
        'language': 'vi',
        'region': 'VN',
      },
    ],
    'B√∫n Ch·∫£': [
      {
        'title': 'C√°ch L√†m B√öN CH·∫¢ H√† N·ªôi Chu·∫©n V·ªã',
        'videoId': 'dQw4w9WgXcQ', // Placeholder - c·∫ßn thay b·∫±ng video th·ª±c
        'channel': 'M√≥n Ngon H√† N·ªôi',
        'language': 'vi',
        'region': 'VN',
      },
    ],
    'C∆°m T·∫•m': [
      {
        'title': 'C√°ch L√†m C∆†M T·∫§M S∆∞·ªùn N∆∞·ªõng S√†i G√≤n',
        'videoId': 'M7lc1UVf-VE', // Placeholder - c·∫ßn thay b·∫±ng video th·ª±c
        'channel': 'M√≥n Ngon S√†i G√≤n',
        'language': 'vi',
        'region': 'VN',
      },
    ],
  };

  // T·ª´ kh√≥a t√¨m ki·∫øm ti·∫øng Vi·ªát cho t·ª´ng m√≥n
  static final Map<String, List<String>> _vietnameseSearchTerms = {
    'Ph·ªü B√≤': [
      'c√°ch n·∫•u ph·ªü b√≤ H√† N·ªôi ngon',
      'ph·ªü b√≤ chu·∫©n v·ªã truy·ªÅn th·ªëng',
      'h∆∞·ªõng d·∫´n n·∫•u ph·ªü b√≤',
    ],
    'Ph·ªü G√†': [
      'c√°ch n·∫•u ph·ªü g√† ngon',
      'ph·ªü g√† H√† N·ªôi chu·∫©n v·ªã',
      'h∆∞·ªõng d·∫´n n·∫•u ph·ªü g√†',
    ],
    'Ph·ªü G√† N·∫•u D·ª´a Mi·ªÅn T√¢y': [
      'ph·ªü g√† n·∫•u d·ª´a mi·ªÅn T√¢y',
      'c√°ch n·∫•u ph·ªü g√† d·ª´a',
      'ph·ªü g√† d·ª´a chu·∫©n v·ªã mi·ªÅn T√¢y',
    ],
    'B√∫n Ch·∫£': [
      'c√°ch l√†m b√∫n ch·∫£ H√† N·ªôi',
      'b√∫n ch·∫£ Obama ƒÉn',
      'h∆∞·ªõng d·∫´n l√†m b√∫n ch·∫£',
    ],
    'C∆°m T·∫•m': [
      'c√°ch l√†m c∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng',
      'c∆°m t·∫•m S√†i G√≤n chu·∫©n v·ªã',
      'h∆∞·ªõng d·∫´n l√†m c∆°m t·∫•m',
    ],
    'B√°nh M√¨': [
      'c√°ch l√†m b√°nh m√¨ Vi·ªát Nam',
      'b√°nh m√¨ th·ªãt n∆∞·ªõng',
      'h∆∞·ªõng d·∫´n l√†m b√°nh m√¨',
    ],
    'G·ªèi Cu·ªën': [
      'c√°ch cu·ªën g·ªèi cu·ªën t√¥m th·ªãt',
      'g·ªèi cu·ªën mi·ªÅn Nam',
      'h∆∞·ªõng d·∫´n cu·ªën g·ªèi cu·ªën',
    ],
    'Canh Chua': [
      'c√°ch n·∫•u canh chua c√°',
      'canh chua mi·ªÅn T√¢y',
      'h∆∞·ªõng d·∫´n n·∫•u canh chua',
    ],
  };

  // L·∫•y video ti·∫øng Vi·ªát cho m√≥n ƒÉn
  Future<List<Map<String, String>>> getVietnameseVideosForDish(String dishName) async {
    try {
      print('üáªüá≥ Getting Vietnamese videos for: $dishName');

      // Ki·ªÉm tra database local tr∆∞·ªõc
      if (_vietnameseVideos.containsKey(dishName)) {
        final videos = _vietnameseVideos[dishName]!;
        
        // Enrich v·ªõi data th·ª±c t·ª´ YouTube
        final enrichedVideos = <Map<String, String>>[];
        for (final video in videos) {
          final videoId = video['videoId']!;
          final realData = await _youtubeAPI.getVideoDetails(videoId);
          
          if (realData != null && _isVietnameseContent(realData)) {
            // Merge data th·ª±c v·ªõi data local
            final enrichedVideo = Map<String, String>.from(video);
            enrichedVideo.addAll(realData);
            enrichedVideos.add(enrichedVideo);
            print('‚úÖ Vietnamese video: ${realData['title']}');
          } else {
            // Fallback to original data
            enrichedVideos.add(video);
            print('‚ö†Ô∏è Using fallback Vietnamese data for: ${video['title']}');
          }
        }
        
        return enrichedVideos;
      }

      // N·∫øu kh√¥ng c√≥, t√¨m ki·∫øm video ti·∫øng Vi·ªát
      return await _searchVietnameseVideos(dishName);

    } catch (e) {
      print('‚ùå Error getting Vietnamese videos: $e');
      return _createVietnameseSearchVideos(dishName);
    }
  }

  // T√¨m ki·∫øm video ti·∫øng Vi·ªát tr√™n YouTube
  Future<List<Map<String, String>>> _searchVietnameseVideos(String dishName) async {
    try {
      final searchTerms = _vietnameseSearchTerms[dishName] ?? ['$dishName ti·∫øng Vi·ªát'];
      final allVideos = <Map<String, String>>[];

      for (final searchTerm in searchTerms) {
        final videos = await _youtubeAPI.searchVideos(searchTerm, maxResults: 3);
        
        // Filter ch·ªâ video ti·∫øng Vi·ªát
        final vietnameseVideos = videos.where((video) => _isVietnameseContent(video)).toList();
        allVideos.addAll(vietnameseVideos);
        
        if (allVideos.length >= 5) break; // ƒê·ªß video r·ªìi
      }

      if (allVideos.isNotEmpty) {
        print('‚úÖ Found ${allVideos.length} Vietnamese videos for $dishName');
        return allVideos.take(5).toList();
      }

      return _createVietnameseSearchVideos(dishName);

    } catch (e) {
      print('‚ùå Error searching Vietnamese videos: $e');
      return _createVietnameseSearchVideos(dishName);
    }
  }

  // Ki·ªÉm tra n·ªôi dung c√≥ ph·∫£i ti·∫øng Vi·ªát kh√¥ng
  bool _isVietnameseContent(Map<String, String> video) {
    final title = video['title']?.toLowerCase() ?? '';
    final description = video['description']?.toLowerCase() ?? '';
    final channel = video['channel']?.toLowerCase() ?? '';

    // T·ª´ kh√≥a ti·∫øng Vi·ªát
    final vietnameseKeywords = [
      'c√°ch', 'n·∫•u', 'l√†m', 'h∆∞·ªõng d·∫´n', 'b√≠ quy·∫øt', 'ngon', 'chu·∫©n v·ªã',
      'mi·ªÅn', 'vi·ªát nam', 'h√† n·ªôi', 's√†i g√≤n', 'mi·ªÅn t√¢y', 'mi·ªÅn b·∫Øc',
      'b·∫øp', 'm√≥n', 'ƒÉn', 'th∆°m', 'ƒë·∫≠m ƒë√†', 'truy·ªÅn th·ªëng',
    ];

    // T·ª´ kh√≥a ti·∫øng Anh (lo·∫°i b·ªè)
    final englishKeywords = [
      'recipe', 'how to', 'cooking', 'tutorial', 'authentic', 'traditional',
      'vietnamese', 'vietnam', 'hanoi', 'saigon', 'best', 'easy',
    ];

    // ƒê·∫øm t·ª´ kh√≥a ti·∫øng Vi·ªát
    int vietnameseCount = 0;
    for (final keyword in vietnameseKeywords) {
      if (title.contains(keyword) || description.contains(keyword) || channel.contains(keyword)) {
        vietnameseCount++;
      }
    }

    // ƒê·∫øm t·ª´ kh√≥a ti·∫øng Anh
    int englishCount = 0;
    for (final keyword in englishKeywords) {
      if (title.contains(keyword) || description.contains(keyword)) {
        englishCount++;
      }
    }

    // ∆Øu ti√™n ti·∫øng Vi·ªát n·∫øu c√≥ nhi·ªÅu t·ª´ kh√≥a ti·∫øng Vi·ªát h∆°n
    return vietnameseCount > englishCount;
  }

  // T·∫°o video search ti·∫øng Vi·ªát
  List<Map<String, String>> _createVietnameseSearchVideos(String dishName) {
    final searchTerms = _vietnameseSearchTerms[dishName] ?? ['$dishName ti·∫øng Vi·ªát'];
    
    return searchTerms.map((term) => {
      'title': 'T√¨m ki·∫øm: "$term"',
      'videoId': 'SEARCH_YOUTUBE_VN',
      'channel': 'YouTube Vi·ªát Nam',
      'duration': '‚àû',
      'views': 'Nhi·ªÅu video',
      'description': 'T√¨m ki·∫øm video ti·∫øng Vi·ªát v·ªÅ $dishName',
      'language': 'vi',
      'region': 'VN',
    }).toList();
  }

  // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm ti·∫øng Vi·ªát
  String getVietnameseSearchQuery(String dishName) {
    final searchTerms = _vietnameseSearchTerms[dishName];
    if (searchTerms != null && searchTerms.isNotEmpty) {
      return searchTerms.first;
    }
    return 'c√°ch n·∫•u $dishName ngon ti·∫øng Vi·ªát';
  }

  // Validate video c√≥ ph·∫£i ti·∫øng Vi·ªát kh√¥ng
  Future<bool> isVietnameseVideo(String videoId) async {
    try {
      final videoData = await _youtubeAPI.getVideoDetails(videoId);
      if (videoData != null) {
        return _isVietnameseContent(videoData);
      }
      return false;
    } catch (e) {
      return false;
    }
  }

  // L·∫•y video ti·∫øng Vi·ªát trending
  Future<List<Map<String, String>>> getTrendingVietnameseVideos() async {
    try {
      final trendingVideos = await _youtubeAPI.getTrendingCookingVideos(maxResults: 20);
      
      // Filter ch·ªâ video ti·∫øng Vi·ªát
      final vietnameseVideos = trendingVideos.where((video) => _isVietnameseContent(video)).toList();
      
      print('‚úÖ Found ${vietnameseVideos.length} trending Vietnamese cooking videos');
      return vietnameseVideos.take(10).toList();
      
    } catch (e) {
      print('‚ùå Error getting trending Vietnamese videos: $e');
      return [];
    }
  }

  // Th√™m video ti·∫øng Vi·ªát v√†o database
  void addVietnameseVideo(String dishName, Map<String, String> video) {
    if (!_vietnameseVideos.containsKey(dishName)) {
      _vietnameseVideos[dishName] = [];
    }
    
    // Th√™m language v√† region tags
    video['language'] = 'vi';
    video['region'] = 'VN';
    
    _vietnameseVideos[dishName]!.add(video);
    print('‚úÖ Added Vietnamese video for $dishName: ${video['title']}');
  }
}
