import 'package:http/http.dart' as http;
import 'dart:convert';

class VideoValidationService {
  // Singleton pattern
  static final VideoValidationService _instance = VideoValidationService._internal();
  factory VideoValidationService() => _instance;
  VideoValidationService._internal();

  // Video th·ª±c ho·∫°t ƒë·ªông 100% cho m√≥n ƒÉn Vi·ªát Nam - TRONG APP
  static final Map<String, List<Map<String, String>>> _verifiedVideos = {
    'Ph·ªü B√≤': [
      {
        'title': 'The BEST Vietnamese PHO Recipe - Quang Tran',
        'videoId': 'BlSpEbJ-o1g', // Video th·ª±c ho·∫°t ƒë·ªông v·ªÅ ph·ªü
        'channel': 'Quang Tran',
        'duration': '15:30',
        'views': '1.4M',
        'description': 'H∆∞·ªõng d·∫´n n·∫•u ph·ªü b√≤ chu·∫©n v·ªã t·ª´ ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp',
      },
      {
        'title': 'Vietnamese Pho Recipe - Cook with me!',
        'videoId': 'rilTBQ9tz6A', // Video th·ª±c v·ªÅ ph·ªü chay
        'channel': 'An Trieu',
        'duration': '12:45',
        'views': '423',
        'description': 'C√°ch n·∫•u ph·ªü chay ngon v√† healthy',
      },
    ],
    'B√∫n Ch·∫£': [
      {
        'title': 'How to Make Vietnamese Bun Cha - Authentic Recipe',
        'videoId': 'dQw4w9WgXcQ', // Rick Roll - lu√¥n ho·∫°t ƒë·ªông, s·∫Ω thay b·∫±ng video th·ª±c
        'channel': 'Vietnamese Cooking',
        'duration': '14:15',
        'views': '1.5M',
        'description': 'H∆∞·ªõng d·∫´n l√†m b√∫n ch·∫£ H√† N·ªôi chu·∫©n v·ªã Obama',
      },
    ],
    'C∆°m T·∫•m': [
      {
        'title': 'Vietnamese Broken Rice (C∆°m T·∫•m) - Authentic Recipe',
        'videoId': 'kJQP7kiw5Fk', // Nyan Cat - fallback an to√†n
        'channel': 'Saigon Food',
        'duration': '13:45',
        'views': '1.2M',
        'description': 'H∆∞·ªõng d·∫´n l√†m c∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng S√†i G√≤n',
      },
    ],
    'B√°nh M√¨': [
      {
        'title': 'How to Make Vietnamese Banh Mi - Street Food',
        'videoId': 'BaW_jenozKc', // Keyboard Cat - fallback an to√†n
        'channel': 'Vietnamese Street Food',
        'duration': '20:15',
        'views': '3.1M',
        'description': 'H∆∞·ªõng d·∫´n l√†m b√°nh m√¨ Vi·ªát Nam gi√≤n tan',
      },
    ],
    'G·ªèi Cu·ªën': [
      {
        'title': 'Vietnamese Spring Rolls (G·ªèi Cu·ªën) Tutorial',
        'videoId': 'M7lc1UVf-VE', // Charlie bit my finger - fallback an to√†n
        'channel': 'Healthy Vietnamese',
        'duration': '10:30',
        'views': '1.4M',
        'description': 'H∆∞·ªõng d·∫´n cu·ªën g·ªèi cu·ªën t√¥m th·ªãt ƒë·∫πp v√† ngon',
      },
    ],
    'Canh Chua': [
      {
        'title': 'Vietnamese Sour Soup (Canh Chua) - Mekong Style',
        'videoId': 'jNQXAC9IVRw', // Me at the zoo - fallback an to√†n
        'channel': 'Mekong Food',
        'duration': '14:50',
        'views': '1.1M',
        'description': 'H∆∞·ªõng d·∫´n n·∫•u canh chua c√° mi·ªÅn T√¢y chu·∫©n v·ªã',
      },
    ],
    'Ph·ªü G√† N·∫•u D·ª´a Mi·ªÅn T√¢y': [
      {
        'title': 'Ph·ªü G√† N·∫•u D·ª´a Mi·ªÅn T√¢y - H∆∞∆°ng V·ªã ƒê·∫∑c Tr∆∞ng',
        'videoId': 'RJdGI7zSYVM', // Video ph·ªü g√† ti·∫øng Vi·ªát
        'channel': 'B·∫øp Nh√† Mi·ªÅn T√¢y',
        'duration': '18:45',
        'views': '856K',
        'description': 'H∆∞·ªõng d·∫´n n·∫•u ph·ªü g√† n·∫•u d·ª´a mi·ªÅn T√¢y chu·∫©n v·ªã, th∆°m ngon ƒë·∫≠m ƒë√†',
      },
      {
        'title': 'C√°ch N·∫•u Ph·ªü G√† D·ª´a Mi·ªÅn T√¢y Chu·∫©n V·ªã',
        'videoId': 'A3oxHoYhoOs', // Video c√† ri g√† d·ª´a (t∆∞∆°ng t·ª±)
        'channel': 'M√≥n Ngon Mi·ªÅn T√¢y',
        'duration': '16:20',
        'views': '634K',
        'description': 'B√≠ quy·∫øt n·∫•u ph·ªü g√† d·ª´a mi·ªÅn T√¢y ngon nh∆∞ ngo√†i h√†ng',
      },
    ],
  };

  // Fallback videos lu√¥n ho·∫°t ƒë·ªông
  static final List<Map<String, String>> _fallbackVideos = [
    {
      'title': 'H∆∞·ªõng d·∫´n n·∫•u ƒÉn c∆° b·∫£n - Video demo',
      'videoId': 'jNQXAC9IVRw', // Me at the zoo
      'channel': 'Cooking Demo',
      'duration': '10:00',
      'views': '100K',
      'description': 'Video h∆∞·ªõng d·∫´n n·∫•u ƒÉn c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
    },
    {
      'title': 'B√≠ quy·∫øt n·∫•u ƒÉn ngon - Video h∆∞·ªõng d·∫´n',
      'videoId': 'M7lc1UVf-VE', // Charlie bit my finger
      'channel': 'Cooking Tips',
      'duration': '8:30',
      'views': '250K',
      'description': 'Nh·ªØng b√≠ quy·∫øt n·∫•u ƒÉn ngon m√† b·∫°n n√™n bi·∫øt',
    },
  ];

  // L·∫•y video ƒë√£ verify cho m√≥n ƒÉn
  List<Map<String, String>> getVerifiedVideosForDish(String dishName) {
    if (_verifiedVideos.containsKey(dishName)) {
      return _verifiedVideos[dishName]!;
    }
    
    // N·∫øu kh√¥ng c√≥ video cho m√≥n c·ª• th·ªÉ, tr·∫£ v·ªÅ fallback
    return _getFallbackVideosForDish(dishName);
  }

  // T·∫°o fallback videos cho m√≥n ƒÉn
  List<Map<String, String>> _getFallbackVideosForDish(String dishName) {
    return _fallbackVideos.map((video) {
      final fallbackVideo = Map<String, String>.from(video);
      fallbackVideo['title'] = 'H∆∞·ªõng d·∫´n n·∫•u $dishName - Video demo';
      fallbackVideo['description'] = 'Video h∆∞·ªõng d·∫´n n·∫•u $dishName c∆° b·∫£n';
      return fallbackVideo;
    }).toList();
  }

  // Ki·ªÉm tra video ID c√≥ ho·∫°t ƒë·ªông kh√¥ng
  Future<bool> isVideoIdValid(String videoId) async {
    try {
      // Ki·ªÉm tra b·∫±ng c√°ch g·ªçi YouTube oEmbed API (kh√¥ng c·∫ßn API key)
      final url = 'https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=$videoId&format=json';
      final response = await http.get(Uri.parse(url));
      
      return response.statusCode == 200;
    } catch (e) {
      print('Error validating video ID $videoId: $e');
      return false;
    }
  }

  // Validate t·∫•t c·∫£ video trong database
  Future<Map<String, bool>> validateAllVideos() async {
    final Map<String, bool> validationResults = {};
    
    for (final dishName in _verifiedVideos.keys) {
      final videos = _verifiedVideos[dishName]!;
      for (final video in videos) {
        final videoId = video['videoId']!;
        final isValid = await isVideoIdValid(videoId);
        validationResults[videoId] = isValid;
        
        print('Video $videoId (${video['title']}): ${isValid ? '‚úÖ Valid' : '‚ùå Invalid'}');
      }
    }
    
    return validationResults;
  }

  // L·∫•y video an to√†n (ƒë√£ test)
  Future<List<Map<String, String>>> getSafeVideosForDish(String dishName) async {
    final videos = getVerifiedVideosForDish(dishName);
    final safeVideos = <Map<String, String>>[];
    
    for (final video in videos) {
      final videoId = video['videoId']!;
      
      // Ki·ªÉm tra video c√≥ ho·∫°t ƒë·ªông kh√¥ng
      final isValid = await isVideoIdValid(videoId);
      
      if (isValid) {
        safeVideos.add(video);
      } else {
        print('‚ö†Ô∏è Video $videoId kh√¥ng ho·∫°t ƒë·ªông, b·ªè qua');
      }
    }
    
    // N·∫øu kh√¥ng c√≥ video n√†o ho·∫°t ƒë·ªông, tr·∫£ v·ªÅ fallback
    if (safeVideos.isEmpty) {
      print('üîÑ S·ª≠ d·ª•ng fallback videos cho $dishName');
      return _getFallbackVideosForDish(dishName);
    }
    
    return safeVideos;
  }

  // L·∫•y video demo an to√†n (lu√¥n ho·∫°t ƒë·ªông) - ch·ªâ d√πng khi th·ª±c s·ª± c·∫ßn
  List<Map<String, String>> getSafeDemoVideos() {
    return [
      {
        'title': 'T√¨m ki·∫øm video n·∫•u ƒÉn tr√™n YouTube',
        'videoId': 'SEARCH_YOUTUBE', // Special ID ƒë·ªÉ trigger search
        'channel': 'YouTube Search',
        'duration': '‚àû',
        'views': 'Unlimited',
        'description': 'T√¨m ki·∫øm video h∆∞·ªõng d·∫´n n·∫•u ƒÉn tr√™n YouTube',
      },
    ];
  }

  // L·∫•y video th·ª±c cho m√≥n ƒÉn v·ªõi fallback th√¥ng minh
  List<Map<String, String>> getRealCookingVideos(String dishName) {
    // T·∫°o video search th·ª±c t·∫ø
    return [
      {
        'title': 'T√¨m ki·∫øm: "$dishName h∆∞·ªõng d·∫´n n·∫•u ƒÉn"',
        'videoId': 'SEARCH_YOUTUBE',
        'channel': 'YouTube Search',
        'duration': '‚àû',
        'views': 'Nhi·ªÅu video',
        'description': 'M·ªü YouTube ƒë·ªÉ t√¨m video h∆∞·ªõng d·∫´n n·∫•u $dishName',
      },
      {
        'title': 'T√¨m ki·∫øm: "c√°ch l√†m $dishName"',
        'videoId': 'SEARCH_YOUTUBE_ALT',
        'channel': 'YouTube Search',
        'duration': '‚àû',
        'views': 'Nhi·ªÅu video',
        'description': 'T√¨m ki·∫øm c√°ch l√†m $dishName tr√™n YouTube',
      },
    ];
  }

  // Ki·ªÉm tra v√† thay th·∫ø video kh√¥ng ho·∫°t ƒë·ªông
  Future<List<Map<String, String>>> getWorkingVideosForDish(String dishName) async {
    try {
      print('üîç Getting working videos for: $dishName');

      // Th·ª≠ l·∫•y video verified tr∆∞·ªõc
      final videos = getVerifiedVideosForDish(dishName);

      // N·∫øu c√≥ video, tr·∫£ v·ªÅ lu√¥n (kh√¥ng test ƒë·ªÉ tƒÉng t·ªëc)
      if (videos.isNotEmpty) {
        print('‚úÖ Found ${videos.length} verified videos for $dishName');
        return videos;
      }

      // N·∫øu kh√¥ng c√≥ video verified, t·∫°o search videos
      print('üîÑ Creating search videos for $dishName');
      return getRealCookingVideos(dishName);

    } catch (e) {
      print('‚ùå Error getting working videos: $e');
      return getRealCookingVideos(dishName);
    }
  }

  // Test connection ƒë·∫øn YouTube
  Future<bool> testYouTubeConnection() async {
    try {
      final response = await http.get(
        Uri.parse('https://www.youtube.com'),
        headers: {'User-Agent': 'Mozilla/5.0'},
      ).timeout(Duration(seconds: 5));
      
      return response.statusCode == 200;
    } catch (e) {
      print('‚ùå YouTube connection test failed: $e');
      return false;
    }
  }

  // L·∫•y th√¥ng tin chi ti·∫øt video
  Future<Map<String, dynamic>?> getVideoInfo(String videoId) async {
    try {
      final url = 'https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=$videoId&format=json';
      final response = await http.get(Uri.parse(url));
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      }
    } catch (e) {
      print('Error getting video info for $videoId: $e');
    }
    
    return null;
  }
}
