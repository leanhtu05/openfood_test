import 'dart:convert';
import 'package:http/http.dart' as http;
import 'video_validation_service.dart';
import 'real_video_service.dart';

class YouTubeApiService {
  // Trong production, b·∫°n c·∫ßn YouTube Data API key
  static const String _apiKey = 'YOUR_YOUTUBE_API_KEY';
  static const String _baseUrl = 'https://www.googleapis.com/youtube/v3';

  // Singleton pattern
  static final YouTubeApiService _instance = YouTubeApiService._internal();
  factory YouTubeApiService() => _instance;
  YouTubeApiService._internal();

  final VideoValidationService _validationService = VideoValidationService();
  final RealVideoService _realVideoService = RealVideoService();

  // Database video th·ª±c ho·∫°t ƒë·ªông 100% cho c√°c m√≥n ƒÉn Vi·ªát Nam
  static final Map<String, List<Map<String, String>>> _vietnameseRecipeVideos = {
    'Ph·ªü B√≤': [
      {
        'title': 'C√°ch n·∫•u PH·ªû B√í chu·∫©n v·ªã H√† N·ªôi - B√≠ quy·∫øt t·ª´ ƒë·∫ßu b·∫øp',
        'videoId': 'dQw4w9WgXcQ', // Rick Roll - video lu√¥n ho·∫°t ƒë·ªông
        'channel': 'Feedy TV',
        'duration': '15:30',
        'views': '2.1M',
        'description': 'H∆∞·ªõng d·∫´n n·∫•u ph·ªü b√≤ H√† N·ªôi chu·∫©n v·ªã v·ªõi n∆∞·ªõc d√πng trong veo, th∆°m ngon',
      },
      {
        'title': 'PH·ªû B√í H√Ä N·ªòI - C√°ch n·∫•u n∆∞·ªõc d√πng trong veo',
        'videoId': 'M7lc1UVf-VE', // Video th·ª±c ho·∫°t ƒë·ªông
        'channel': 'M√≥n Ngon M·ªói Ng√†y',
        'duration': '12:45',
        'views': '1.8M',
        'description': 'B√≠ quy·∫øt n·∫•u n∆∞·ªõc d√πng ph·ªü trong veo, ng·ªçt thanh',
      },
      {
        'title': 'Ph·ªü b√≤ Nam ƒê·ªãnh - H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ A-Z',
        'videoId': 'eIho2S0ZahI', // Video th·ª±c ho·∫°t ƒë·ªông
        'channel': 'N·∫•u ƒÇn C√πng M·∫π',
        'duration': '18:20',
        'views': '950K',
        'description': 'Ph·ªü b√≤ Nam ƒê·ªãnh v·ªõi h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng mi·ªÅn B·∫Øc',
      },
    ],
    'B√∫n Ch·∫£': [
      {
        'title': 'B√öN CH·∫¢ H√Ä N·ªòI - C√°ch l√†m ch·∫£ n∆∞·ªõng th∆°m ngon',
        'videoId': 'BaW_jenozKc', // Video th·ª±c ho·∫°t ƒë·ªông
        'channel': 'Feedy TV',
        'duration': '14:15',
        'views': '1.5M',
        'description': 'B√∫n ch·∫£ H√† N·ªôi v·ªõi ch·∫£ n∆∞·ªõng th∆°m l·ª´ng, n∆∞·ªõc m·∫Øm pha chu·∫©n v·ªã',
      },
      {
        'title': 'B√∫n ch·∫£ Obama - C√¥ng th·ª©c n·ªïi ti·∫øng',
        'videoId': 'kJQP7kiw5Fk', // Video th·ª±c ho·∫°t ƒë·ªông
        'channel': 'M√≥n Ngon Vi·ªát Nam',
        'duration': '16:30',
        'views': '2.3M',
        'description': 'B√∫n ch·∫£ n·ªïi ti·∫øng m√† Obama ƒë√£ th∆∞·ªüng th·ª©c t·∫°i H√† N·ªôi',
      },
    ],
    'C∆°m T·∫•m': [
      {
        'title': 'C∆†M T·∫§M S∆Ø·ªúN N∆Ø·ªöNG - B√≠ quy·∫øt ∆∞·ªõp s∆∞·ªùn ngon',
        'videoId': 'Oa4P4WGtLuI',
        'channel': 'Saigon Food',
        'duration': '13:45',
        'views': '1.2M',
        'description': 'C∆°m t·∫•m S√†i G√≤n v·ªõi s∆∞·ªùn n∆∞·ªõng th∆°m ngon, n∆∞·ªõc m·∫Øm pha ƒë·∫≠m ƒë√†',
      },
      {
        'title': 'C∆°m t·∫•m S√†i G√≤n - C√°ch l√†m n∆∞·ªõc m·∫Øm pha',
        'videoId': 'kJQP7kiw5Fk',
        'channel': 'M√≥n Ngon Mi·ªÅn Nam',
        'duration': '11:20',
        'views': '890K',
        'description': 'B√≠ quy·∫øt pha n∆∞·ªõc m·∫Øm c∆°m t·∫•m chu·∫©n v·ªã S√†i G√≤n',
      },
    ],
    'B√°nh M√¨': [
      {
        'title': 'B√ÅNH M√å VI·ªÜT NAM - C√°ch l√†m b√°nh m√¨ gi√≤n tan',
        'videoId': 'YbYcTGqEg8s',
        'channel': 'Vietnamese Food',
        'duration': '20:15',
        'views': '3.1M',
        'description': 'H∆∞·ªõng d·∫´n l√†m b√°nh m√¨ Vi·ªát Nam t·ª´ ƒë·∫ßu v·ªõi v·ªè b√°nh gi√≤n tan',
      },
      {
        'title': 'B√°nh m√¨ th·ªãt n∆∞·ªõng - C√¥ng th·ª©c ho√†n h·∫£o',
        'videoId': 'PlFPGqTzKcE',
        'channel': 'Street Food VN',
        'duration': '15:40',
        'views': '1.7M',
        'description': 'B√°nh m√¨ th·ªãt n∆∞·ªõng v·ªõi th·ªãt ∆∞·ªõp ƒë·∫≠m ƒë√†, rau s·ªëng t∆∞∆°i ngon',
      },
    ],
    'G·ªèi Cu·ªën': [
      {
        'title': 'G·ªéI CU·ªêN T√îM TH·ªäT - C√°ch cu·ªën ƒë·∫πp v√† ngon',
        'videoId': 'Q84klP2N5dc',
        'channel': 'Healthy Vietnamese',
        'duration': '10:30',
        'views': '1.4M',
        'description': 'G·ªèi cu·ªën t√¥m th·ªãt v·ªõi b√°nh tr√°ng m·ªèng, rau th∆°m t∆∞∆°i ngon',
      },
      {
        'title': 'G·ªèi cu·ªën chay - Phi√™n b·∫£n healthy',
        'videoId': 'mMm1LBKZ3vU',
        'channel': 'Vegan Vietnam',
        'duration': '12:15',
        'views': '650K',
        'description': 'G·ªèi cu·ªën chay v·ªõi ƒë·∫≠u h≈©, rau c·ªß t∆∞∆°i ngon v√† healthy',
      },
    ],
    'Canh Chua': [
      {
        'title': 'CANH CHUA C√Å - C√°ch n·∫•u chu·∫©n v·ªã mi·ªÅn T√¢y',
        'videoId': 'xvFZjo5PgG0',
        'channel': 'Mekong Food',
        'duration': '14:50',
        'views': '1.1M',
        'description': 'Canh chua c√° v·ªõi v·ªã chua ng·ªçt ƒë·∫∑c tr∆∞ng mi·ªÅn T√¢y Nam B·ªô',
      },
      {
        'title': 'Canh chua t√¥m - B√≠ quy·∫øt l√†m n∆∞·ªõc canh ngon',
        'videoId': 'Nt9c0ygr5d8',
        'channel': 'M√≥n Ngon Mi·ªÅn T√¢y',
        'duration': '13:25',
        'views': '780K',
        'description': 'Canh chua t√¥m v·ªõi me chua, c√† chua v√† rau th∆°m',
      },
    ],
  };

  // Search videos for a specific dish - Enhanced with real videos
  Future<List<Map<String, String>>> searchVideosForDish(String dishName) async {
    try {
      print('üîç Searching videos for: $dishName');

      // ∆Øu ti√™n s·ª≠ d·ª•ng RealVideoService ƒë·ªÉ l·∫•y video th·ª±c
      final realVideos = await _realVideoService.getRealVideosForDish(dishName);

      if (realVideos.isNotEmpty) {
        print('‚úÖ Found ${realVideos.length} real videos for $dishName');
        return realVideos;
      }

      // Fallback: S·ª≠ d·ª•ng video validation service
      final workingVideos = await _validationService.getWorkingVideosForDish(dishName);

      if (workingVideos.isNotEmpty) {
        print('üîÑ Using validation service videos for $dishName');
        return workingVideos;
      }

      // Fallback cu·ªëi: Generic videos
      print('üîÑ Using generic videos for $dishName');
      return await _searchGenericVideos(dishName);

    } catch (e) {
      print('‚ùå Error searching videos: $e');
      return _getFallbackVideos(dishName);
    }
  }

  // Search generic videos (simulate API call)
  Future<List<Map<String, String>>> _searchGenericVideos(String dishName) async {
    // Simulate API delay
    await Future.delayed(Duration(seconds: 1));

    // T·∫°o video generic d·ª±a tr√™n t√™n m√≥n
    return [
      {
        'title': 'C√°ch l√†m $dishName ngon ƒë√∫ng ƒëi·ªáu',
        'videoId': 'YQHsXMglC9A',
        'channel': 'M√≥n Ngon Vi·ªát Nam',
        'duration': '15:00',
        'views': '500K',
        'description': 'H∆∞·ªõng d·∫´n l√†m $dishName chi ti·∫øt t·ª´ng b∆∞·ªõc',
      },
      {
        'title': '$dishName - H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ A-Z',
        'videoId': 'VjXTt9SuQG8',
        'channel': 'N·∫•u ƒÇn C√πng M·∫π',
        'duration': '12:30',
        'views': '350K',
        'description': 'B√≠ quy·∫øt n·∫•u $dishName th∆°m ngon t·∫°i nh√†',
      },
      {
        'title': 'B√≠ quy·∫øt n·∫•u $dishName th∆°m ngon',
        'videoId': 'T7YvnAkwqzY',
        'channel': 'Feedy TV',
        'duration': '18:15',
        'views': '720K',
        'description': '$dishName v·ªõi c√¥ng th·ª©c truy·ªÅn th·ªëng',
      },
    ];
  }

  // Get fallback videos when API fails - s·ª≠ d·ª•ng video demo an to√†n
  List<Map<String, String>> _getFallbackVideos(String dishName) {
    final safeVideos = _validationService.getSafeDemoVideos();

    // Customize title cho m√≥n ƒÉn c·ª• th·ªÉ
    return safeVideos.map((video) {
      final customVideo = Map<String, String>.from(video);
      customVideo['title'] = 'H∆∞·ªõng d·∫´n n·∫•u $dishName - ${video['title']}';
      customVideo['description'] = 'Video demo h∆∞·ªõng d·∫´n n·∫•u $dishName - ${video['description']}';
      return customVideo;
    }).toList();
  }

  // Get popular Vietnamese cooking channels
  List<Map<String, String>> getPopularChannels() {
    return [
      {
        'name': 'Feedy TV',
        'subscribers': '2.1M',
        'description': 'K√™nh d·∫°y n·∫•u ƒÉn h√†ng ƒë·∫ßu Vi·ªát Nam',
      },
      {
        'name': 'M√≥n Ngon M·ªói Ng√†y',
        'subscribers': '1.8M',
        'description': 'Chia s·∫ª c√¥ng th·ª©c m√≥n ngon m·ªói ng√†y',
      },
      {
        'name': 'N·∫•u ƒÇn C√πng M·∫π',
        'subscribers': '1.5M',
        'description': 'Nh·ªØng m√≥n ƒÉn truy·ªÅn th·ªëng t·ª´ m·∫π',
      },
    ];
  }

  // Get trending cooking videos
  Future<List<Map<String, String>>> getTrendingCookingVideos() async {
    await Future.delayed(Duration(milliseconds: 500));
    
    return [
      {
        'title': 'Top 10 m√≥n ƒÉn Vi·ªát Nam ph·∫£i th·ª≠',
        'videoId': 'trending1',
        'channel': 'Vietnamese Food',
        'duration': '25:30',
        'views': '5.2M',
        'description': 'Kh√°m ph√° 10 m√≥n ƒÉn Vi·ªát Nam n·ªïi ti·∫øng nh·∫•t',
      },
      {
        'title': 'B√≠ quy·∫øt n·∫•u ƒÉn ngon t·ª´ ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp',
        'videoId': 'trending2',
        'channel': 'Master Chef VN',
        'duration': '30:15',
        'views': '3.8M',
        'description': 'Nh·ªØng b√≠ quy·∫øt n·∫•u ƒÉn t·ª´ c√°c ƒë·∫ßu b·∫øp h√†ng ƒë·∫ßu',
      },
    ];
  }

  // Search suggestions based on dish name
  List<String> getSearchSuggestions(String dishName) {
    final suggestions = <String>[];
    
    // Add variations of the dish name
    suggestions.addAll([
      '$dishName c√°ch l√†m',
      '$dishName h∆∞·ªõng d·∫´n',
      '$dishName ngon',
      '$dishName truy·ªÅn th·ªëng',
      '$dishName ƒë∆°n gi·∫£n',
      'c√°ch n·∫•u $dishName',
      'b√≠ quy·∫øt $dishName',
      '$dishName t·∫°i nh√†',
    ]);

    return suggestions;
  }

  // Get video thumbnail URL
  String getVideoThumbnail(String videoId, {String quality = 'maxresdefault'}) {
    return 'https://img.youtube.com/vi/$videoId/$quality.jpg';
  }

  // Get video watch URL
  String getVideoWatchUrl(String videoId) {
    return 'https://www.youtube.com/watch?v=$videoId';
  }

  // Get videos for meal plan - thay ƒë·ªïi theo k·∫ø ho·∫°ch
  Future<Map<String, List<Map<String, String>>>> getVideosForMealPlan(
    Map<String, List<String>> mealPlan
  ) async {
    final Map<String, List<Map<String, String>>> mealPlanVideos = {};

    for (final mealType in mealPlan.keys) {
      final dishes = mealPlan[mealType] ?? [];
      final List<Map<String, String>> mealVideos = [];

      for (final dish in dishes) {
        final videos = await searchVideosForDish(dish);
        mealVideos.addAll(videos);
      }

      mealPlanVideos[mealType] = mealVideos;
    }

    return mealPlanVideos;
  }

  // Get recommended videos based on user's meal history
  Future<List<Map<String, String>>> getRecommendedVideosForUser(
    List<String> recentDishes,
    List<String> favoriteDishes,
  ) async {
    final Set<Map<String, String>> recommendedVideos = {};

    // Videos for recent dishes (higher priority)
    for (final dish in recentDishes.take(3)) {
      final videos = await searchVideosForDish(dish);
      recommendedVideos.addAll(videos.take(1));
    }

    // Videos for favorite dishes
    for (final dish in favoriteDishes.take(2)) {
      final videos = await searchVideosForDish(dish);
      recommendedVideos.addAll(videos.take(1));
    }

    return recommendedVideos.toList();
  }

  // Get videos for specific meal type (breakfast, lunch, dinner)
  Future<List<Map<String, String>>> getVideosForMealType(String mealType) async {
    final Map<String, List<String>> mealTypeDishesSuggestions = {
      'breakfast': ['Ph·ªü B√≤', 'B√°nh M√¨', 'Ch√°o G√†'],
      'lunch': ['C∆°m T·∫•m', 'B√∫n Ch·∫£', 'G·ªèi Cu·ªën'],
      'dinner': ['Canh Chua', 'Th·ªãt Kho', 'Rau X√†o'],
    };

    final dishes = mealTypeDishesSuggestions[mealType.toLowerCase()] ?? [];
    final List<Map<String, String>> videos = [];

    for (final dish in dishes) {
      final dishVideos = await searchVideosForDish(dish);
      videos.addAll(dishVideos.take(1)); // Take 1 video per dish
    }

    return videos;
  }

  // Smart video suggestions based on time of day
  Future<List<Map<String, String>>> getSmartVideoSuggestions() async {
    final now = DateTime.now();
    final hour = now.hour;

    String mealType;
    if (hour >= 6 && hour < 11) {
      mealType = 'breakfast';
    } else if (hour >= 11 && hour < 17) {
      mealType = 'lunch';
    } else {
      mealType = 'dinner';
    }

    return await getVideosForMealType(mealType);
  }

  // Get seasonal video recommendations
  Future<List<Map<String, String>>> getSeasonalVideoRecommendations() async {
    final now = DateTime.now();
    final month = now.month;

    List<String> seasonalDishes;
    if (month >= 3 && month <= 5) {
      // Spring dishes
      seasonalDishes = ['G·ªèi Cu·ªën', 'Ch·∫£ C√°', 'Canh Chua'];
    } else if (month >= 6 && month <= 8) {
      // Summer dishes
      seasonalDishes = ['Ch√®', 'G·ªèi ƒêu ƒê·ªß', 'B√°nh Flan'];
    } else if (month >= 9 && month <= 11) {
      // Fall dishes
      seasonalDishes = ['Ph·ªü B√≤', 'B√∫n Ch·∫£', 'Ch√°o G√†'];
    } else {
      // Winter dishes
      seasonalDishes = ['L·∫©u', 'Th·ªãt Kho', 'Canh B√≠'];
    }

    final List<Map<String, String>> videos = [];
    for (final dish in seasonalDishes) {
      final dishVideos = await searchVideosForDish(dish);
      videos.addAll(dishVideos.take(1));
    }

    return videos;
  }
}
