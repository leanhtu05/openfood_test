import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class FirestoreInitializer {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> initializeFirestoreCollections() async {
    try {
      await _createUserStructure();
      await _createFoodItemsCollection();
      await _createExerciseTypesCollection();
      await _createLatestMealPlansStructure();
      await _createNutritionCacheCollection();
      debugPrint('üî• Kh·ªüi t·∫°o Firestore collections th√†nh c√¥ng');
    } catch (e) {
      debugPrint('‚ùå L·ªói khi kh·ªüi t·∫°o Firestore collections: $e');
      rethrow;
    }
  }

  // T·∫°o c·∫•u tr√∫c User
  Future<void> _createUserStructure() async {
    // T·∫°o user m·∫´u ƒë·ªÉ minh h·ªça c·∫•u tr√∫c
    final sampleUserRef = _firestore.collection('users').doc('sample_user_structure');
    final userDoc = await sampleUserRef.get();
    
    if (!userDoc.exists) {
      await sampleUserRef.set({
        'uid': 'sample_user_structure',
        'email': 'sample@email.com',
        'displayName': 'Sample User',
        'photoURL': '',
        'gender': 'Nam',
        'age': 30,
        'heightCm': 170.0,
        'weightKg': 65.0,
        'activityLevel': 'Ho·∫°t ƒë·ªông v·ª´a ph·∫£i',
        'goal': 'Duy tr√¨ c√¢n n·∫∑ng',
        'dietPreference': 'balanced',
        'dietRestrictions': ['Kh√¥ng c√≥'],
        'healthConditions': ['Kh√¥ng c√≥'],
        'tdeeValues': {
          'calories': 2000.0,
          'protein': 120.0,
          'carbs': 200.0,
          'fat': 65.0
        },
        'createdAt': FieldValue.serverTimestamp(),
        'lastLoginAt': FieldValue.serverTimestamp(),
        'isAnonymous': false,
        'isStructureSample': true, // ƒê·ªÉ ƒë√°nh d·∫•u ƒë√¢y l√† m·∫´u
      });
      
      // T·∫°o m·∫´u daily_logs
      await sampleUserRef.collection('daily_logs').doc('sample_date').set({
        'date': '2023-08-01',
        'meals': [
          {
            'id': 'sample_meal_1',
            'name': 'C∆°m g√†',
            'mealType': 'lunch',
            'servingSize': 1,
            'servingUnit': 'ph·∫ßn',
            'calories': 450,
            'protein': 25,
            'carbs': 60,
            'fat': 12,
            'imageUrl': '',
            'timeConsumed': Timestamp.now()
          }
        ],
        'waterIntake': 2000,
        'exercises': [
          {
            'id': 'sample_exercise_1',
            'name': 'Ch·∫°y b·ªô',
            'duration': 30,
            'caloriesBurned': 250,
            'type': 'cardio',
            'timePerformed': Timestamp.now()
          }
        ],
        'weight': 65.0,
        'notes': 'Ghi ch√∫ m·∫´u',
        'dailySummary': {
          'totalCaloriesConsumed': 1800,
          'totalCaloriesBurned': 250,
          'netCalories': 1550,
          'totalProtein': 85,
          'totalCarbs': 230,
          'totalFat': 55
        }
      });
      
      debugPrint('‚úÖ ƒê√£ t·∫°o c·∫•u tr√∫c users v√† daily_logs m·∫´u');
    } else {
      debugPrint('üìù C·∫•u tr√∫c users ƒë√£ t·ªìn t·∫°i');
    }
  }

  // T·∫°o collection food_items v·ªõi d·ªØ li·ªáu m·∫´u
  Future<void> _createFoodItemsCollection() async {
    final foodItemsRef = _firestore.collection('food_items');
    final foodItemsSnapshot = await foodItemsRef.limit(1).get();
    
    // Ch·ªâ t·∫°o n·∫øu collection tr·ªëng
    if (foodItemsSnapshot.docs.isEmpty) {
      // Danh s√°ch c√°c th·ª±c ph·∫©m c∆° b·∫£n
      final basicFoods = [
        {
          'name': 'C∆°m tr·∫Øng',
          'nameLower': 'com trang',
          'nameEn': 'White rice',
          'category': 'Tinh b·ªôt',
          'nutrition': {
            'calories': 130,
            'protein': 2.7,
            'fat': 0.3,
            'carbs': 28.2,
            'fiber': 0.4,
            'sugar': 0.1,
            'sodium': 1,
            'cholesterol': 0,
          },
          'servingSize': 100,
          'servingUnit': 'g',
          'source': 'USDA',
          'searchTerms': ['c∆°m', 'g·∫°o', 'rice', 'staple'],
        },
        {
          'name': 'Th·ªãt g√†',
          'nameLower': 'thit ga',
          'nameEn': 'Chicken breast',
          'category': 'Protein',
          'nutrition': {
            'calories': 165,
            'protein': 31,
            'fat': 3.6,
            'carbs': 0,
            'fiber': 0,
            'sugar': 0,
            'sodium': 74,
            'cholesterol': 85,
          },
          'servingSize': 100,
          'servingUnit': 'g',
          'source': 'USDA',
          'searchTerms': ['g√†', 'th·ªãt g√†', 'chicken'],
        },
        {
          'name': 'Rau c·∫£i xanh',
          'nameLower': 'rau cai xanh',
          'nameEn': 'Green vegetables',
          'category': 'Rau c·ªß',
          'nutrition': {
            'calories': 25,
            'protein': 2.1,
            'fat': 0.3,
            'carbs': 4.3,
            'fiber': 2.5,
            'sugar': 1.2,
            'sodium': 28,
            'cholesterol': 0,
          },
          'servingSize': 100,
          'servingUnit': 'g',
          'source': 'USDA',
          'searchTerms': ['rau', 'c·∫£i', 'rau xanh', 'vegetables'],
        },
      ];
      
      // Th√™m c√°c th·ª±c ph·∫©m v√†o collection
      for (var food in basicFoods) {
        await foodItemsRef.add(food);
      }
      
      debugPrint('‚úÖ ƒê√£ t·∫°o collection food_items v·ªõi ${basicFoods.length} th·ª±c ph·∫©m c∆° b·∫£n');
    } else {
      debugPrint('üìù Collection food_items ƒë√£ t·ªìn t·∫°i');
    }
  }

  // T·∫°o collection exercise_types v·ªõi d·ªØ li·ªáu m·∫´u
  Future<void> _createExerciseTypesCollection() async {
    final exerciseRef = _firestore.collection('exercise_types');
    final exerciseSnapshot = await exerciseRef.limit(1).get();
    
    // Ch·ªâ t·∫°o n·∫øu collection tr·ªëng
    if (exerciseSnapshot.docs.isEmpty) {
      // Danh s√°ch c√°c b√†i t·∫≠p c∆° b·∫£n
      final basicExercises = [
        {
          'name': 'Ch·∫°y b·ªô',
          'category': 'cardio',
          'caloriesBurnedPerMinute': {
            '50kg': 8.3,
            '60kg': 10.0,
            '70kg': 11.7,
            '80kg': 13.3,
            '90kg': 15.0,
            '100kg': 16.7,
          },
          'description': 'Ch·∫°y b·ªô v·ªõi t·ªëc ƒë·ªô trung b√¨nh',
          'imageUrl': '',
        },
        {
          'name': 'ƒê·∫°p xe',
          'category': 'cardio',
          'caloriesBurnedPerMinute': {
            '50kg': 5.0,
            '60kg': 6.0,
            '70kg': 7.0,
            '80kg': 8.0,
            '90kg': 9.0,
            '100kg': 10.0,
          },
          'description': 'ƒê·∫°p xe v·ªõi t·ªëc ƒë·ªô trung b√¨nh',
          'imageUrl': '',
        },
        {
          'name': 'Plank',
          'category': 'strength',
          'caloriesBurnedPerMinute': {
            '50kg': 3.0,
            '60kg': 3.5,
            '70kg': 4.0,
            '80kg': 4.5,
            '90kg': 5.0,
            '100kg': 5.5,
          },
          'description': 'T∆∞ th·∫ø plank gi·ªØ thƒÉng b·∫±ng',
          'imageUrl': '',
        },
      ];
      
      // Th√™m c√°c b√†i t·∫≠p v√†o collection
      for (var exercise in basicExercises) {
        await exerciseRef.add(exercise);
      }
      
      debugPrint('‚úÖ ƒê√£ t·∫°o collection exercise_types v·ªõi ${basicExercises.length} b√†i t·∫≠p c∆° b·∫£n');
    } else {
      debugPrint('üìù Collection exercise_types ƒë√£ t·ªìn t·∫°i');
    }
  }

  // T·∫°o c·∫•u tr√∫c latest_meal_plans
  Future<void> _createLatestMealPlansStructure() async {
    final latestMealPlansRef = _firestore.collection('latest_meal_plans').doc('sample_structure');
    final mealPlanDoc = await latestMealPlansRef.get();
    
    if (!mealPlanDoc.exists) {
      // T·∫°o m·∫´u meal plan
      await latestMealPlansRef.set({
        'user_id': 'sample_user',
        'name': 'K·∫ø ho·∫°ch ƒÉn u·ªëng m·∫´u',
        'startDate': FieldValue.serverTimestamp(),
        'endDate': Timestamp.fromDate(DateTime.now().add(const Duration(days: 7))),
        'weekly_plan': {
          'Th·ª© 2': {
            'day_of_week': 'Th·ª© 2',
            'meals': {
              'breakfast': [
                {
                  'name': 'B√°nh m√¨ tr·ª©ng',
                  'calories': 350,
                  'protein': 15,
                  'fat': 12,
                  'carbs': 45,
                  'ingredients': ['b√°nh m√¨', 'tr·ª©ng g√†', 'rau x√† l√°ch'],
                  'imageUrl': ''
                }
              ],
              'lunch': [
                {
                  'name': 'C∆°m g√†',
                  'calories': 450,
                  'protein': 25,
                  'fat': 10,
                  'carbs': 65,
                  'ingredients': ['c∆°m', 'th·ªãt g√†', 'rau c·∫£i'],
                  'imageUrl': ''
                }
              ],
              'dinner': [
                {
                  'name': 'B√∫n ch·∫£',
                  'calories': 400,
                  'protein': 22,
                  'fat': 15,
                  'carbs': 50,
                  'ingredients': ['b√∫n', 'th·ªãt l·ª£n', 'rau s·ªëng'],
                  'imageUrl': ''
                }
              ]
            },
            'nutrition_summary': {
              'calories': 1200,
              'protein': 62,
              'fat': 37,
              'carbs': 160
            }
          }
        },
        'nutritionTargets': {
          'calories_target': 2000,
          'protein_target': 120,
          'carbs_target': 200,
          'fat_target': 65
        },
        'preferences': ['√çt mu·ªëi', 'Nhi·ªÅu rau'],
        'allergies': ['H·∫£i s·∫£n'],
        'cuisineStyle': 'Vi·ªát Nam',
        'timestamp': FieldValue.serverTimestamp(),
        'isStructureSample': true,
      });
      
      // T·∫°o m·∫´u meal plan collection
      await _firestore.collection('meal_plans').add({
        'user_id': 'sample_user',
        'name': 'K·∫ø ho·∫°ch ƒÉn u·ªëng m·∫´u trong collection meal_plans',
        'startDate': FieldValue.serverTimestamp(),
        'endDate': Timestamp.fromDate(DateTime.now().add(const Duration(days: 7))),
        'weekly_plan': {
          'Th·ª© 2': {
            'day_of_week': 'Th·ª© 2',
            'meals': {
              'breakfast': [
                {
                  'name': 'Ph·ªü g√†',
                  'calories': 380,
                  'protein': 22,
                  'fat': 10,
                  'carbs': 55,
                  'ingredients': ['b√°nh ph·ªü', 'th·ªãt g√†', 'h√†nh ng√≤'],
                  'imageUrl': ''
                }
              ]
            },
          }
        },
        'isStructureSample': true,
      });
      
      debugPrint('‚úÖ ƒê√£ t·∫°o c·∫•u tr√∫c meal_plans v√† latest_meal_plans m·∫´u');
    } else {
      debugPrint('üìù C·∫•u tr√∫c meal_plans ƒë√£ t·ªìn t·∫°i');
    }
  }

  // T·∫°o collection nutrition_cache
  Future<void> _createNutritionCacheCollection() async {
    final cacheRef = _firestore.collection('nutrition_cache');
    final cacheSnapshot = await cacheRef.limit(1).get();
    
    if (cacheSnapshot.docs.isEmpty) {
      // T·∫°o m·∫´u cache entry
      await cacheRef.doc('sample_cache_thit_ga').set({
        'data': {
          'name': 'Th·ªãt g√†',
          'calories': 165,
          'protein': 31,
          'fat': 3.6,
          'carbs': 0,
        },
        'timestamp': FieldValue.serverTimestamp(),
        'expiresAt': Timestamp.fromDate(DateTime.now().add(const Duration(days: 30))),
        'source': 'USDA',
        'query': 'th·ªãt g√†',
        'isStructureSample': true,
      });
      
      // T·∫°o m·∫´u AI suggestion
      await _firestore.collection('ai_suggestions').add({
        'userId': 'sample_user',
        'type': 'meal',
        'content': 'B·∫°n n√™n tƒÉng l∆∞·ª£ng protein v√†o b·ªØa s√°ng ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªß nƒÉng l∆∞·ª£ng cho c·∫£ ng√†y.',
        'context': {
          'query': 'T√¥i c·∫ßn g·ª£i √Ω b·ªØa s√°ng',
          'userProfile': {
            'goal': 'TƒÉng c∆°',
            'age': 28
          },
          'nutritionContext': {
            'currentProtein': 80,
            'targetProtein': 120
          }
        },
        'suggestedMeals': [
          {
            'name': 'B√°nh m√¨ tr·ª©ng g√† v√† s·ªØa',
            'calories': 450,
            'protein': 25,
            'carbs': 45,
            'fat': 18
          }
        ],
        'timestamp': FieldValue.serverTimestamp(),
        'isImplemented': false,
        'isStructureSample': true,
      });
      
      debugPrint('‚úÖ ƒê√£ t·∫°o collection nutrition_cache v√† ai_suggestions m·∫´u');
    } else {
      debugPrint('üìù Collection nutrition_cache ƒë√£ t·ªìn t·∫°i');
    }
  }
} 