import 'dart:convert';
import 'package:http/http.dart' as http;

/// Service AI ƒë·ªÉ ph√¢n t√≠ch gi√° c·∫£ th·ª±c ph·∫©m th√¥ng minh
/// G·ªçi backend FastAPI endpoints thay v√¨ x·ª≠ l√Ω local
class PriceAIAnalysisService {
  // Th·ª≠ nhi·ªÅu backend URLs ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh kh·∫£ d·ª•ng
  static const List<String> _backendUrls = [
    'https://backend-openfood.onrender.com', // Primary Render backend
    'http://localhost:8000', // Local development
  ];

  // Render backend c√≥ th·ªÉ sleep, c·∫ßn th·ªùi gian wake-up
  static const int _renderWakeupTimeoutSeconds = 30;

  static String? _workingUrl;

  final Map<String, String> _headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'User-Agent': 'OpenFood-Flutter-App/1.0',
  };

  /// Wake-up Render backend n·∫øu ƒëang sleep
  Future<bool> _wakeupRenderBackend(String url) async {
    try {
      print('üåÖ ƒêang wake-up Render backend...');

      // G·ªçi endpoint ƒë∆°n gi·∫£n ƒë·ªÉ wake-up
      final response = await http.get(
        Uri.parse('$url/'),
        headers: _headers,
      ).timeout(Duration(seconds: _renderWakeupTimeoutSeconds));

      // Ch·ªù th√™m m·ªôt ch√∫t ƒë·ªÉ backend kh·ªüi ƒë·ªông ho√†n to√†n
      await Future.delayed(Duration(seconds: 2));

      print('‚úÖ Render backend ƒë√£ ƒë∆∞·ª£c wake-up');
      return true;
    } catch (e) {
      print('‚ùå Kh√¥ng th·ªÉ wake-up Render backend: $e');
      return false;
    }
  }

  /// T√¨m backend URL ho·∫°t ƒë·ªông v·ªõi x·ª≠ l√Ω Render wake-up
  Future<String?> _findWorkingBackend() async {
    if (_workingUrl != null) {
      // Ki·ªÉm tra l·∫°i working URL ƒë·ªÉ ƒë·∫£m b·∫£o v·∫´n ho·∫°t ƒë·ªông
      try {
        final response = await http.get(
          Uri.parse('$_workingUrl/ai-price/health'),
          headers: _headers,
        ).timeout(Duration(seconds: 5));

        if (response.statusCode == 200) {
          return _workingUrl;
        } else {
          print('‚ö†Ô∏è Working URL kh√¥ng c√≤n ho·∫°t ƒë·ªông, t√¨m l·∫°i...');
          _workingUrl = null;
        }
      } catch (e) {
        print('‚ö†Ô∏è Working URL l·ªói: $e, t√¨m l·∫°i...');
        _workingUrl = null;
      }
    }

    for (final url in _backendUrls) {
      try {
        print('üîç ƒêang ki·ªÉm tra backend: $url');

        // X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho Render backend (c√≥ th·ªÉ ƒëang sleep)
        final isRenderBackend = url.contains('render.com');
        final timeoutSeconds = isRenderBackend ? _renderWakeupTimeoutSeconds : 10;

        if (isRenderBackend) {
          print('‚è∞ Render backend c√≥ th·ªÉ ƒëang sleep, ch·ªù wake-up (${timeoutSeconds}s)...');
        }

        final response = await http.get(
          Uri.parse('$url/ai-price/health'),
          headers: _headers,
        ).timeout(Duration(seconds: timeoutSeconds));

        if (response.statusCode == 200) {
          print('‚úÖ Backend ho·∫°t ƒë·ªông: $url');
          _workingUrl = url;
          return url;
        } else {
          print('‚ùå Backend tr·∫£ v·ªÅ status ${response.statusCode}: $url');
        }
      } catch (e) {
        print('‚ùå Backend kh√¥ng ho·∫°t ƒë·ªông: $url - $e');
        continue;
      }
    }

    print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y backend n√†o ho·∫°t ƒë·ªông, s·ª≠ d·ª•ng fallback');
    return null;
  }

  /// Ph√¢n t√≠ch xu h∆∞·ªõng gi√° c·∫£
  Future<Map<String, dynamic>> analyzePriceTrends({
    String? category,
    int daysBack = 30,
  }) async {
    try {
      final baseUrl = await _findWorkingBackend();
      if (baseUrl == null) {
        return _getFallbackTrendAnalysis();
      }

      final requestBody = {
        'category': category,
        'days_back': daysBack,
      };

      final response = await http.post(
        Uri.parse('$baseUrl/ai-price/analyze-trends'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(Duration(seconds: 10));

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Backend error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå L·ªói ph√¢n t√≠ch xu h∆∞·ªõng: $e');
      return _getFallbackTrendAnalysis();
    }
  }

  /// D·ª± ƒëo√°n gi√° c·∫£ trong t∆∞∆°ng lai
  Future<Map<String, dynamic>> predictFuturePrices({
    required String foodName,
    int daysAhead = 7,
  }) async {
    try {
      final baseUrl = await _findWorkingBackend();
      if (baseUrl == null) {
        return _getFallbackPrediction(foodName);
      }

      final requestBody = {
        'food_name': foodName,
        'days_ahead': daysAhead,
      };

      final response = await http.post(
        Uri.parse('$baseUrl/ai-price/predict-price'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(Duration(seconds: 10));

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Backend error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå L·ªói d·ª± ƒëo√°n gi√°: $e');
      return _getFallbackPrediction(foodName);
    }
  }

  /// Ph√¢n t√≠ch m√πa v·ª• v√† xu h∆∞·ªõng theo th·ªùi gian
  Future<Map<String, dynamic>> analyzeSeasonalTrends(String? category) async {
    try {
      final baseUrl = await _findWorkingBackend();
      if (baseUrl == null) {
        return _getFallbackSeasonalAnalysis();
      }

      final requestBody = {
        'category': category,
        'current_month': DateTime.now().month,
      };

      final response = await http.post(
        Uri.parse('$baseUrl/ai-price/analyze-seasonal'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(Duration(seconds: 10));

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Backend error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå L·ªói ph√¢n t√≠ch m√πa v·ª•: $e');
      return _getFallbackSeasonalAnalysis();
    }
  }

  /// Ph√¢n t√≠ch th√¥ng minh cho grocery list
  Future<Map<String, dynamic>> analyzeGroceryListIntelligently(
    List<Map<String, dynamic>> groceryItems, {
    double? budgetLimit,
  }) async {
    try {
      final baseUrl = await _findWorkingBackend();
      if (baseUrl == null) {
        print('‚ö†Ô∏è Kh√¥ng c√≥ backend, s·ª≠ d·ª•ng ph√¢n t√≠ch local n√¢ng cao');
        return _getEnhancedLocalAnalysis(groceryItems, budgetLimit);
      }

      final requestBody = {
        'grocery_items': groceryItems,
        'budget_limit': budgetLimit,
        'analysis_type': 'comprehensive',
        'include_ai_insights': true,
      };

      print('ü§ñ G·ª≠i ${groceryItems.length} items t·ªõi AI backend: $baseUrl');

      final response = await http.post(
        Uri.parse('$baseUrl/ai-price/optimize-grocery'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(Duration(seconds: 15));

      if (response.statusCode == 200) {
        final result = jsonDecode(response.body);
        print('‚úÖ Nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch AI th√†nh c√¥ng');
        return result;
      } else {
        print('‚ùå Backend error: ${response.statusCode}');
        throw Exception('Backend error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå L·ªói ph√¢n t√≠ch grocery: $e');
      return _getEnhancedLocalAnalysis(groceryItems, budgetLimit);
    }
  }

  /// T·∫°o insights th√¥ng minh v·ªÅ th·ªã tr∆∞·ªùng
  Future<Map<String, dynamic>> generateMarketInsights({
    String? region,
    bool includeTrends = true,
  }) async {
    try {
      final baseUrl = await _findWorkingBackend();
      if (baseUrl == null) {
        return _getFallbackMarketInsights();
      }

      final requestBody = {
        'region': region,
        'include_trends': includeTrends,
      };

      final response = await http.post(
        Uri.parse('$baseUrl/ai-price/market-insights'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(Duration(seconds: 10));

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Backend error: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå L·ªói t·∫°o market insights: $e');
      return _getFallbackMarketInsights();
    }
  }

  /// Test backend connection v·ªõi wake-up support
  Future<bool> testConnection() async {
    try {
      final workingUrl = await _findWorkingBackend();
      return workingUrl != null;
    } catch (e) {
      print('‚ùå L·ªói k·∫øt n·ªëi backend: $e');
      return false;
    }
  }

  /// Test connection t·ªõi m·ªôt URL c·ª• th·ªÉ
  Future<bool> testSpecificUrl(String url) async {
    try {
      print('üîç Testing connection to: $url');

      final response = await http.get(
        Uri.parse('$url/ai-price/health'),
        headers: _headers,
      ).timeout(Duration(seconds: 30));

      final isWorking = response.statusCode == 200;
      print(isWorking ? '‚úÖ Connection successful' : '‚ùå Connection failed: ${response.statusCode}');

      return isWorking;
    } catch (e) {
      print('‚ùå Connection error: $e');
      return false;
    }
  }

  // Fallback methods khi backend kh√¥ng ho·∫°t ƒë·ªông
  Map<String, dynamic> _getFallbackTrendAnalysis() {
    return {
      'analysis_date': DateTime.now().toIso8601String(),
      'category': 'T·∫•t c·∫£',
      'period_days': 30,
      'trend': 'stable',
      'insights': [
        {
          'title': 'D·ªØ li·ªáu ƒëang c·∫≠p nh·∫≠t',
          'description': 'H·ªá th·ªëng AI ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.',
          'confidence': 0.5,
          'category': 'info'
        }
      ],
      'recommendations': ['Theo d√µi gi√° th∆∞·ªùng xuy√™n', 'Mua theo nhu c·∫ßu th·ª±c t·∫ø'],
      'price_alerts': []
    };
  }

  Map<String, dynamic> _getFallbackPrediction(String foodName) {
    return {
      'food_name': foodName,
      'current_price': 0,
      'predicted_price': 0,
      'prediction_days': 7,
      'confidence': 0,
      'trend': 'unknown',
      'factors': ['C·∫ßn k·∫øt n·ªëi backend ƒë·ªÉ d·ª± ƒëo√°n'],
      'recommendation': 'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i',
      'price_range': {'min': 0, 'max': 0},
      'generated_at': DateTime.now().toIso8601String(),
    };
  }

  Map<String, dynamic> _getFallbackSeasonalAnalysis() {
    return {
      'current_season': _getCurrentSeason(DateTime.now().month),
      'seasonal_foods': ['D·ªØ li·ªáu ƒëang c·∫≠p nh·∫≠t'],
      'price_predictions': {},
      'buying_recommendations': ['Mua theo nhu c·∫ßu th·ª±c t·∫ø'],
      'avoid_buying': [],
      'best_deals': [],
      'analysis_date': DateTime.now().toIso8601String(),
    };
  }

  /// Ph√¢n t√≠ch local n√¢ng cao khi kh√¥ng c√≥ backend
  Map<String, dynamic> _getEnhancedLocalAnalysis(
    List<Map<String, dynamic>> groceryItems,
    double? budgetLimit
  ) {
    final totalItems = groceryItems.length;
    final categories = <String, List<Map<String, dynamic>>>{};

    // Ph√¢n lo·∫°i theo danh m·ª•c
    for (final item in groceryItems) {
      final category = item['category'] ?? 'Kh√°c';
      categories.putIfAbsent(category, () => []).add(item);
    }

    // T·∫°o g·ª£i √Ω th√¥ng minh d·ª±a tr√™n d·ªØ li·ªáu
    final suggestions = <String>[];

    if (categories.containsKey('ü•© Th·ªãt t∆∞∆°i s·ªëng') && categories['ü•© Th·ªãt t∆∞∆°i s·ªëng']!.length > 3) {
      suggestions.add('B·∫°n c√≥ nhi·ªÅu lo·∫°i th·ªãt, h√£y xem x√©t mua ·ªü ch·ª£ ƒë·∫ßu m·ªëi ƒë·ªÉ ti·∫øt ki·ªám');
    }

    if (categories.containsKey('ü•¨ Rau c·ªß qu·∫£') && categories['ü•¨ Rau c·ªß qu·∫£']!.length > 5) {
      suggestions.add('Mua rau c·ªß v√†o bu·ªïi s√°ng s·ªõm ƒë·ªÉ c√≥ gi√° t·ªët v√† ƒë·ªô t∆∞∆°i cao');
    }

    if (totalItems > 15) {
      suggestions.add('Danh s√°ch kh√° d√†i, h√£y chia th√†nh 2 l·∫ßn mua ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô t∆∞∆°i');
    }

    // Ph√¢n t√≠ch ng√¢n s√°ch
    final budgetAdvice = budgetLimit != null && budgetLimit > 0
        ? 'V·ªõi ng√¢n s√°ch ${budgetLimit.toStringAsFixed(0)} VND, h√£y ∆∞u ti√™n th·ª±c ph·∫©m thi·∫øt y·∫øu'
        : 'H√£y ƒë·∫∑t ng√¢n s√°ch c·ª• th·ªÉ ƒë·ªÉ qu·∫£n l√Ω chi ti√™u hi·ªáu qu·∫£';

    return {
      'total_items': totalItems,
      'category_count': categories.length,
      'optimization_suggestions': suggestions.isNotEmpty ? suggestions : [
        'L·∫≠p danh s√°ch theo th·ª© t·ª± ∆∞u ti√™n',
        'So s√°nh gi√° ·ªü nhi·ªÅu n∆°i kh√°c nhau',
        'Mua theo m√πa ƒë·ªÉ c√≥ gi√° t·ªët nh·∫•t'
      ],
      'substitution_recommendations': _getSmartSubstitutions(categories),
      'timing_advice': _getTimingAdvice(),
      'budget_optimization': budgetAdvice,
      'health_insights': _getHealthInsights(categories),
      'sustainability_tips': _getSustainabilityTips(categories),
      'category_analysis': _analyzeCategoriesLocally(categories),
      'generated_at': DateTime.now().toIso8601String(),
      'analysis_type': 'enhanced_local',
    };
  }

  Map<String, dynamic> _getSmartSubstitutions(Map<String, List<Map<String, dynamic>>> categories) {
    final substitutions = <String, String>{};

    // G·ª£i √Ω thay th·∫ø th√¥ng minh
    if (categories.containsKey('ü•© Th·ªãt t∆∞∆°i s·ªëng')) {
      substitutions['Th·ªãt b√≤'] = 'Th·ªãt heo ho·∫∑c g√† ƒë·ªÉ ti·∫øt ki·ªám chi ph√≠';
    }

    if (categories.containsKey('üêü H·∫£i s·∫£n')) {
      substitutions['T√¥m s√∫'] = 'T√¥m th·∫ª c√≥ gi√° r·∫ª h∆°n nh∆∞ng v·∫´n ngon';
    }

    return substitutions;
  }

  String _getTimingAdvice() {
    final hour = DateTime.now().hour;
    if (hour < 8) {
      return 'Th·ªùi ƒëi·ªÉm tuy·ªát v·ªùi! Ch·ª£ s√°ng c√≥ h√†ng t∆∞∆°i v√† gi√° t·ªët';
    } else if (hour < 12) {
      return 'Bu·ªïi s√°ng v·∫´n l√† th·ªùi ƒëi·ªÉm t·ªët ƒë·ªÉ mua s·∫Øm';
    } else if (hour < 17) {
      return 'Bu·ªïi chi·ªÅu c√≥ th·ªÉ c√≥ khuy·∫øn m√£i ·ªü si√™u th·ªã';
    } else {
      return 'Bu·ªïi t·ªëi c√≥ th·ªÉ c√≥ gi·∫£m gi√° cho th·ª±c ph·∫©m t∆∞∆°i s·ªëng';
    }
  }

  String _getHealthInsights(Map<String, List<Map<String, dynamic>>> categories) {
    final insights = <String>[];

    if (!categories.containsKey('ü•¨ Rau c·ªß qu·∫£')) {
      insights.add('Thi·∫øu rau c·ªß qu·∫£ trong danh s√°ch');
    }

    if (!categories.containsKey('ü•© Th·ªãt t∆∞∆°i s·ªëng') && !categories.containsKey('üêü H·∫£i s·∫£n')) {
      insights.add('C·∫ßn b·ªï sung protein t·ª´ th·ªãt ho·∫∑c h·∫£i s·∫£n');
    }

    return insights.isNotEmpty
        ? insights.join(', ')
        : 'Danh s√°ch c√¢n b·∫±ng dinh d∆∞·ª°ng t·ªët';
  }

  String _getSustainabilityTips(Map<String, List<Map<String, dynamic>>> categories) {
    return '∆Øu ti√™n s·∫£n ph·∫©m ƒë·ªãa ph∆∞∆°ng, gi·∫£m t√∫i nilon, mua ƒë√∫ng nhu c·∫ßu';
  }

  Map<String, dynamic> _analyzeCategoriesLocally(Map<String, List<Map<String, dynamic>>> categories) {
    final analysis = <String, dynamic>{};

    for (final entry in categories.entries) {
      analysis[entry.key] = {
        'item_count': entry.value.length,
        'priority': _getCategoryPriority(entry.key),
        'tips': _getCategoryTips(entry.key),
      };
    }

    return analysis;
  }

  int _getCategoryPriority(String category) {
    switch (category) {
      case 'ü•¨ Rau c·ªß qu·∫£': return 5;
      case 'ü•© Th·ªãt t∆∞∆°i s·ªëng': return 4;
      case 'üåæ Ng≈© c·ªëc & G·∫°o': return 4;
      case 'ü•õ S·ªØa & Tr·ª©ng': return 3;
      default: return 2;
    }
  }

  String _getCategoryTips(String category) {
    switch (category) {
      case 'ü•¨ Rau c·ªß qu·∫£': return 'Mua v√†o bu·ªïi s√°ng, ch·ªçn theo m√πa';
      case 'ü•© Th·ªãt t∆∞∆°i s·ªëng': return 'Ki·ªÉm tra ƒë·ªô t∆∞∆°i, b·∫£o qu·∫£n l·∫°nh ngay';
      case 'üêü H·∫£i s·∫£n': return 'Mua t·∫°i ch·ª£ h·∫£i s·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°i';
      case 'üåæ Ng≈© c·ªëc & G·∫°o': return 'Mua s·ªë l∆∞·ª£ng l·ªõn ƒë·ªÉ ti·∫øt ki·ªám';
      default: return 'Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng';
    }
  }

  Map<String, dynamic> _getFallbackGroceryAnalysis() {
    return {
      'total_items': 0,
      'optimization_suggestions': ['K·∫øt n·ªëi backend ƒë·ªÉ nh·∫≠n g·ª£i √Ω t·ªëi ∆∞u'],
      'substitution_recommendations': {},
      'timing_advice': 'Mua s√°ng s·ªõm th∆∞·ªùng c√≥ gi√° t·ªët',
      'budget_optimization': 'L·∫≠p k·∫ø ho·∫°ch mua s·∫Øm chi ti·∫øt',
      'health_insights': 'C√¢n b·∫±ng c√°c nh√≥m th·ª±c ph·∫©m',
      'sustainability_tips': '∆Øu ti√™n s·∫£n ph·∫©m ƒë·ªãa ph∆∞∆°ng',
      'generated_at': DateTime.now().toIso8601String(),
    };
  }

  Map<String, dynamic> _getFallbackMarketInsights() {
    return {
      'market_overview': 'ƒêang thu th·∫≠p d·ªØ li·ªáu th·ªã tr∆∞·ªùng t·ª´ backend',
      'trending_foods': ['D·ªØ li·ªáu ƒëang c·∫≠p nh·∫≠t'],
      'price_volatility': {},
      'regional_differences': 'C·∫ßn k·∫øt n·ªëi backend ƒë·ªÉ ph√¢n t√≠ch',
      'consumer_behavior': 'ƒêang ph√¢n t√≠ch h√†nh vi ng∆∞·ªùi ti√™u d√πng',
      'economic_factors': 'Theo d√µi c√°c y·∫øu t·ªë kinh t·∫ø',
      'recommendations': ['Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng', 'Th·ª≠ l·∫°i sau'],
      'generated_at': DateTime.now().toIso8601String(),
    };
  }

  String _getCurrentSeason(int month) {
    if (month >= 3 && month <= 5) return 'M√πa xu√¢n';
    if (month >= 6 && month <= 8) return 'M√πa h√®';
    if (month >= 9 && month <= 11) return 'M√πa thu';
    return 'M√πa ƒë√¥ng';
  }
}
