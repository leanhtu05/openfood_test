import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import '../models/grocery_cost_analysis.dart';
import '../screens/grocery_list_screen.dart';
import 'shopping_firestore_service.dart';
import 'price_ai_analysis_service.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Service t√≠ch h·ª£p AI Finance Agent ƒë·ªÉ ph√¢n t√≠ch chi ph√≠ th·ª±c ph·∫©m
class FinanceAgentService {
  static const String _baseUrl = 'https://backend-openfood.onrender.com';
  static final PriceAIAnalysisService _aiService = PriceAIAnalysisService();

  // Database gi√° c·∫£ th·ª±c ph·∫©m Vi·ªát Nam (m·∫´u)
  static final Map<String, Map<String, dynamic>> _vietnamFoodPrices = {
    // Th·ªãt t∆∞∆°i s·ªëng
    'th·ªãt b√≤': {'price_per_kg': 350000, 'unit': 'kg', 'category': 'ü•© Th·ªãt t∆∞∆°i s·ªëng'},
    'th·ªãt heo': {'price_per_kg': 180000, 'unit': 'kg', 'category': 'ü•© Th·ªãt t∆∞∆°i s·ªëng'},
    'th·ªãt g√†': {'price_per_kg': 120000, 'unit': 'kg', 'category': 'ü•© Th·ªãt t∆∞∆°i s·ªëng'},
    'c√°': {'price_per_kg': 200000, 'unit': 'kg', 'category': 'ü•© Th·ªãt t∆∞∆°i s·ªëng'},
    't√¥m': {'price_per_kg': 400000, 'unit': 'kg', 'category': 'ü•© Th·ªãt t∆∞∆°i s·ªëng'},

    // Rau c·ªß qu·∫£
    'c√† chua': {'price_per_kg': 25000, 'unit': 'kg', 'category': 'ü•¨ Rau c·ªß qu·∫£'},
    'h√†nh t√¢y': {'price_per_kg': 20000, 'unit': 'kg', 'category': 'ü•¨ Rau c·ªß qu·∫£'},
    '·ªõt chu√¥ng': {'price_per_kg': 35000, 'unit': 'kg', 'category': 'ü•¨ Rau c·ªß qu·∫£'},
    'rau x√† l√°ch': {'price_per_kg': 30000, 'unit': 'kg', 'category': 'ü•¨ Rau c·ªß qu·∫£'},
    'b√≠ ƒë·ªè': {'price_per_kg': 15000, 'unit': 'kg', 'category': 'ü•¨ Rau c·ªß qu·∫£'},
    'chu·ªëi': {'price_per_kg': 25000, 'unit': 'kg', 'category': 'ü•¨ Rau c·ªß qu·∫£'},

    // Th·ª±c ph·∫©m kh√¥
    'g·∫°o': {'price_per_kg': 25000, 'unit': 'kg', 'category': 'üåæ Th·ª±c ph·∫©m kh√¥'},
    'b√°nh m√¨': {'price_per_piece': 8000, 'unit': 'l√°t', 'category': 'üåæ Th·ª±c ph·∫©m kh√¥'},
    'y·∫øn m·∫°ch': {'price_per_kg': 80000, 'unit': 'kg', 'category': 'üåæ Th·ª±c ph·∫©m kh√¥'},

    // S·∫£n ph·∫©m t·ª´ s·ªØa
    'tr·ª©ng g√†': {'price_per_piece': 4000, 'unit': 'qu·∫£', 'category': 'ü•õ S·∫£n ph·∫©m t·ª´ s·ªØa'},
    's·ªØa chua hy l·∫°p': {'price_per_kg': 120000, 'unit': 'kg', 'category': 'ü•õ S·∫£n ph·∫©m t·ª´ s·ªØa'},
    'ph√¥ mai': {'price_per_kg': 200000, 'unit': 'kg', 'category': 'ü•õ S·∫£n ph·∫©m t·ª´ s·ªØa'},

    // Gia v·ªã & N∆∞·ªõc ch·∫•m
    'd·∫ßu oliu': {'price_per_liter': 150000, 'unit': 'mu·ªóng canh', 'category': 'üßÇ Gia v·ªã & N∆∞·ªõc ch·∫•m'},
    'm·∫≠t ong': {'price_per_kg': 300000, 'unit': 'mu·ªóng canh', 'category': 'üßÇ Gia v·ªã & N∆∞·ªõc ch·∫•m'},
  };

  /// Ph√¢n t√≠ch chi ph√≠ danh s√°ch mua s·∫Øm v·ªõi AI v√† l∆∞u v√†o Firebase
  static Future<GroceryCostAnalysis> analyzeCosts(
    Map<String, GroceryItem> groceryItems,
    {double? budgetLimit, bool saveToFirebase = true, bool useAI = true}
  ) async {
    try {
      // Th·ª≠ s·ª≠ d·ª•ng AI tr∆∞·ªõc
      if (useAI) {
        try {
          return await _analyzeWithAI(groceryItems, budgetLimit: budgetLimit, saveToFirebase: saveToFirebase);
        } catch (e) {
          print('‚ö†Ô∏è AI analysis failed, falling back to local analysis: $e');
        }
      }

      // Fallback: T√≠nh to√°n local
      return await _analyzeLocally(groceryItems, budgetLimit: budgetLimit, saveToFirebase: saveToFirebase);

    } catch (e) {
      print('‚ùå L·ªói khi ph√¢n t√≠ch chi ph√≠: $e');
      // Tr·∫£ v·ªÅ ph√¢n t√≠ch m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
      return _getDefaultAnalysis(budgetLimit);
    }
  }

  /// Ph√¢n t√≠ch v·ªõi AI backend
  static Future<GroceryCostAnalysis> _analyzeWithAI(
    Map<String, GroceryItem> groceryItems,
    {double? budgetLimit, bool saveToFirebase = true}
  ) async {
    print('ü§ñ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch AI cho ${groceryItems.length} items...');

    // Chuy·ªÉn ƒë·ªïi groceryItems th√†nh format cho AI
    final groceryItemsList = groceryItems.values.map((item) => {
      'name': item.name,
      'amount': item.amount,
      'unit': item.unit,
      'category': item.category,
    }).toList();

    print('üì§ G·ª≠i d·ªØ li·ªáu t·ªõi AI service...');

    // G·ªçi AI service
    final aiAnalysis = await _aiService.analyzeGroceryListIntelligently(
      groceryItemsList,
      budgetLimit: budgetLimit,
    );

    print('üì• Nh·∫≠n ƒë∆∞·ª£c ph√¢n t√≠ch t·ª´ AI: ${aiAnalysis.keys.join(", ")}');

    // Convert AI response th√†nh GroceryCostAnalysis
    final result = _convertAIResponseToAnalysis(aiAnalysis, groceryItems, budgetLimit);

    // L∆∞u v√†o Firebase n·∫øu c·∫ßn
    if (saveToFirebase) {
      await _saveAnalysisToFirebase(groceryItems, result);
    }

    return result;
  }

  /// Ph√¢n t√≠ch local (fallback)
  static Future<GroceryCostAnalysis> _analyzeLocally(
    Map<String, GroceryItem> groceryItems,
    {double? budgetLimit, bool saveToFirebase = true}
  ) async {
    try {
      // T√≠nh to√°n chi ph√≠ cho t·ª´ng item
      final itemsWithCost = <GroceryItemWithCost>[];
      double totalCost = 0.0;
      final categoryTotals = <String, double>{};
      final categoryItemCounts = <String, int>{};

      for (final item in groceryItems.values) {
        final cost = calculateItemCost(item);
        final itemWithCost = GroceryItemWithCost(
          name: item.name,
          amount: item.amount,
          unit: item.unit,
          category: item.category,
          estimatedCost: cost,
          pricePerUnit: _getPricePerUnit(item),
        );

        itemsWithCost.add(itemWithCost);
        totalCost += cost;

        categoryTotals[item.category] = (categoryTotals[item.category] ?? 0) + cost;
        categoryItemCounts[item.category] = (categoryItemCounts[item.category] ?? 0) + 1;
      }

      // T·∫°o ph√¢n t√≠ch theo danh m·ª•c
      final categoryBreakdown = <String, CategoryCostBreakdown>{};
      for (final category in categoryTotals.keys) {
        final categoryTotal = categoryTotals[category]!;
        final itemCount = categoryItemCounts[category]!;

        categoryBreakdown[category] = CategoryCostBreakdown(
          categoryName: category,
          totalCost: categoryTotal,
          percentage: totalCost > 0 ? (categoryTotal / totalCost) * 100 : 0,
          itemCount: itemCount,
          averageCostPerItem: categoryTotal / itemCount,
          topExpensiveItems: _getTopExpensiveItemsInCategoryWithCost(itemsWithCost, category),
        );
      }

      // T·∫°o m·∫πo ti·∫øt ki·ªám
      final savingTips = _generateSavingTips(itemsWithCost, categoryBreakdown);

      // So s√°nh ng√¢n s√°ch
      final budgetComparison = BudgetComparison(
        budgetLimit: budgetLimit ?? 500000, // M·∫∑c ƒë·ªãnh 500k VND
        actualCost: totalCost,
        difference: totalCost - (budgetLimit ?? 500000),
        isOverBudget: totalCost > (budgetLimit ?? 500000),
        percentageUsed: (budgetLimit ?? 500000) > 0 ? (totalCost / (budgetLimit ?? 500000)) * 100 : 0,
      );

      // T·∫°o c·∫£nh b√°o gi√° c·∫£
      final priceAlerts = _generatePriceAlerts(itemsWithCost);

      final analysis = GroceryCostAnalysis(
        totalCost: totalCost,
        averageCostPerItem: groceryItems.isNotEmpty ? totalCost / groceryItems.length : 0,
        categoryBreakdown: categoryBreakdown,
        savingTips: savingTips,
        budgetComparison: budgetComparison,
        priceAlerts: priceAlerts,
        analysisDate: DateTime.now(),
      );

      // L∆∞u v√†o Firebase n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p
      if (saveToFirebase) {
        await _saveAnalysisToFirebase(groceryItems, analysis);
      }

      return analysis;

    } catch (e) {
      print('‚ùå L·ªói local analysis: $e');
      return _getDefaultAnalysis(budgetLimit);
    }
  }

  /// T√≠nh to√°n chi ph√≠ cho m·ªôt item
  static double calculateItemCost(GroceryItem item) {
    final itemName = item.name.toLowerCase();
    final amount = _parseAmount(item.amount);
    
    // T√¨m gi√° trong database
    for (final foodName in _vietnamFoodPrices.keys) {
      if (itemName.contains(foodName)) {
        final priceInfo = _vietnamFoodPrices[foodName]!;
        
        // T√≠nh to√°n d·ª±a tr√™n ƒë∆°n v·ªã
        if (item.unit.toLowerCase().contains('kg') || item.unit.toLowerCase().contains('g')) {
          final amountInKg = item.unit.toLowerCase().contains('g') ? amount / 1000 : amount;
          return (priceInfo['price_per_kg'] ?? 0) * amountInKg;
        } else if (item.unit.toLowerCase().contains('qu·∫£') || item.unit.toLowerCase().contains('l√°t')) {
          return (priceInfo['price_per_piece'] ?? 0) * amount;
        } else if (item.unit.toLowerCase().contains('mu·ªóng')) {
          // ∆Ø·ªõc t√≠nh 1 mu·ªóng canh = 15ml, 1 l√≠t = 1000ml
          final amountInLiter = amount * 0.015;
          return (priceInfo['price_per_liter'] ?? 0) * amountInLiter;
        }
      }
    }
    
    // Gi√° ∆∞·ªõc t√≠nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
    return _getDefaultPrice(item.category) * amount;
  }

  /// Parse s·ªë l∆∞·ª£ng t·ª´ chu·ªói
  static double _parseAmount(String amountStr) {
    final regex = RegExp(r'(\d+(?:\.\d+)?)');
    final match = regex.firstMatch(amountStr);
    return match != null ? double.tryParse(match.group(1)!) ?? 1.0 : 1.0;
  }

  /// L·∫•y gi√° m·∫∑c ƒë·ªãnh theo danh m·ª•c
  static double _getDefaultPrice(String category) {
    switch (category) {
      case 'ü•© Th·ªãt t∆∞∆°i s·ªëng': return 200000; // 200k/kg
      case 'ü•¨ Rau c·ªß qu·∫£': return 25000; // 25k/kg
      case 'üåæ Th·ª±c ph·∫©m kh√¥': return 30000; // 30k/kg
      case 'ü•õ S·∫£n ph·∫©m t·ª´ s·ªØa': return 50000; // 50k/kg
      case 'üßÇ Gia v·ªã & N∆∞·ªõc ch·∫•m': return 100000; // 100k/kg
      default: return 20000; // 20k/kg
    }
  }

  /// L·∫•y gi√° per unit
  static double _getPricePerUnit(GroceryItem item) {
    final totalCost = calculateItemCost(item);
    final amount = _parseAmount(item.amount);
    return amount > 0 ? totalCost / amount : 0;
  }

  /// L·∫•y top items ƒë·∫Øt nh·∫•t trong danh m·ª•c (overload cho GroceryItem)
  static List<String> _getTopExpensiveItemsInCategory(
    List<GroceryItem> items,
    String category
  ) {
    final categoryItems = items.where((item) => item.category == category).toList();
    categoryItems.sort((a, b) => calculateItemCost(b).compareTo(calculateItemCost(a)));
    return categoryItems.take(3).map((item) => item.name).toList();
  }

  /// L·∫•y top items ƒë·∫Øt nh·∫•t trong danh m·ª•c (original method)
  static List<String> _getTopExpensiveItemsInCategoryWithCost(
    List<GroceryItemWithCost> items,
    String category
  ) {
    final categoryItems = items.where((item) => item.category == category).toList();
    categoryItems.sort((a, b) => b.estimatedCost.compareTo(a.estimatedCost));
    return categoryItems.take(3).map((item) => item.name).toList();
  }

  /// T·∫°o m·∫πo ti·∫øt ki·ªám
  static List<CostSavingTip> _generateSavingTips(
    List<GroceryItemWithCost> items,
    Map<String, CategoryCostBreakdown> categoryBreakdown
  ) {
    final tips = <CostSavingTip>[];

    // M·∫πo d·ª±a tr√™n danh m·ª•c ƒë·∫Øt nh·∫•t
    final sortedCategories = categoryBreakdown.entries.toList()
      ..sort((a, b) => b.value.totalCost.compareTo(a.value.totalCost));

    if (sortedCategories.isNotEmpty) {
      final mostExpensiveCategory = sortedCategories.first;
      tips.add(CostSavingTip(
        title: 'T·ªëi ∆∞u danh m·ª•c ${mostExpensiveCategory.key}',
        description: 'Danh m·ª•c n√†y chi·∫øm ${mostExpensiveCategory.value.percentage.toStringAsFixed(1)}% t·ªïng chi ph√≠. H√£y xem x√©t mua ·ªü ch·ª£ truy·ªÅn th·ªëng ho·∫∑c t√¨m khuy·∫øn m√£i.',
        potentialSaving: mostExpensiveCategory.value.totalCost * 0.15, // Ti·∫øt ki·ªám 15%
        category: mostExpensiveCategory.key,
        priority: 5,
      ));
    }

    // M·∫πo chung
    tips.add(CostSavingTip(
      title: 'Mua theo m√πa',
      description: 'Ch·ªçn rau c·ªß qu·∫£ theo m√πa ƒë·ªÉ c√≥ gi√° t·ªët nh·∫•t v√† ch·∫•t l∆∞·ª£ng cao nh·∫•t.',
      potentialSaving: 50000,
      category: 'ü•¨ Rau c·ªß qu·∫£',
      priority: 4,
    ));

    tips.add(CostSavingTip(
      title: 'So s√°nh gi√° nhi·ªÅu n∆°i',
      description: 'Ki·ªÉm tra gi√° ·ªü si√™u th·ªã, ch·ª£ truy·ªÅn th·ªëng v√† c√°c ·ª©ng d·ª•ng giao h√†ng.',
      potentialSaving: 30000,
      category: 'T·ªïng qu√°t',
      priority: 3,
    ));

    return tips;
  }

  /// T·∫°o c·∫£nh b√°o gi√° c·∫£
  static List<PriceAlert> _generatePriceAlerts(List<GroceryItemWithCost> items) {
    final alerts = <PriceAlert>[];
    
    for (final item in items) {
      if (item.estimatedCost > 100000) { // Items tr√™n 100k
        alerts.add(PriceAlert(
          itemName: item.name,
          currentPrice: item.estimatedCost,
          averagePrice: item.estimatedCost * 0.8,
          priceChange: item.estimatedCost * 0.2,
          alertType: 'high',
          message: '${item.name} c√≥ gi√° cao h∆°n b√¨nh th∆∞·ªùng 20%',
        ));
      }
    }
    
    return alerts;
  }

  /// Ph√¢n t√≠ch m·∫∑c ƒë·ªãnh khi c√≥ l·ªói
  static GroceryCostAnalysis _getDefaultAnalysis(double? budgetLimit) {
    return GroceryCostAnalysis(
      totalCost: 0,
      averageCostPerItem: 0,
      categoryBreakdown: {},
      savingTips: [],
      budgetComparison: BudgetComparison(
        budgetLimit: budgetLimit ?? 500000,
        actualCost: 0,
        difference: -(budgetLimit ?? 500000),
        isOverBudget: false,
        percentageUsed: 0,
      ),
      priceAlerts: [],
      analysisDate: DateTime.now(),
    );
  }

  /// L∆∞u analysis v√†o Firebase
  static Future<void> _saveAnalysisToFirebase(
    Map<String, GroceryItem> groceryItems,
    GroceryCostAnalysis analysis,
  ) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print('‚ö†Ô∏è User ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng l∆∞u v√†o Firebase');
        return;
      }

      // L∆∞u grocery list tr∆∞·ªõc
      final groceryListId = await ShoppingFirestoreService.saveGroceryList(
        userId: user.uid,
        groceryItems: groceryItems,
        listName: 'Ph√¢n t√≠ch ${DateTime.now().day}/${DateTime.now().month}',
      );

      // L∆∞u cost analysis
      await ShoppingFirestoreService.saveCostAnalysis(
        userId: user.uid,
        groceryListId: groceryListId,
        analysis: analysis,
      );

      // Track gi√° c√°c s·∫£n ph·∫©m
      for (final item in groceryItems.values) {
        final cost = calculateItemCost(item);
        await ShoppingFirestoreService.trackItemPrice(
          itemName: item.name,
          price: cost,
          storeName: '∆Ø·ªõc t√≠nh AI',
          location: 'Vi·ªát Nam',
        );
      }

      print('‚úÖ ƒê√£ l∆∞u analysis v√†o Firebase th√†nh c√¥ng');
    } catch (e) {
      print('‚ùå L·ªói l∆∞u analysis v√†o Firebase: $e');
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng UX
    }
  }

  /// L·∫•y l·ªãch s·ª≠ ph√¢n t√≠ch c·ªßa user
  static Future<List<GroceryCostAnalysis>> getUserAnalysisHistory() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) return [];

      return await ShoppingFirestoreService.getUserCostAnalyses(user.uid);
    } catch (e) {
      print('‚ùå L·ªói l·∫•y analysis history: $e');
      return [];
    }
  }

  /// L·∫•y th·ªëng k√™ mua s·∫Øm c·ªßa user
  static Future<Map<String, dynamic>> getUserShoppingStats() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) return {};

      return await ShoppingFirestoreService.getUserShoppingStats(user.uid);
    } catch (e) {
      print('‚ùå L·ªói l·∫•y shopping stats: $e');
      return {};
    }
  }

  /// Convert AI response th√†nh GroceryCostAnalysis
  static GroceryCostAnalysis _convertAIResponseToAnalysis(
    Map<String, dynamic> aiResponse,
    Map<String, GroceryItem> groceryItems,
    double? budgetLimit,
  ) {
    try {
      print('üîÑ Converting AI response to analysis...');

      // Ki·ªÉm tra xem c√≥ ph·∫£i enhanced local analysis kh√¥ng
      final isLocalAnalysis = aiResponse['analysis_type'] == 'enhanced_local';

      // T√≠nh to√°n chi ph√≠ t·ª´ local data n·∫øu AI kh√¥ng tr·∫£ v·ªÅ
      double totalCost = 0.0;
      final categoryTotals = <String, double>{};
      final categoryItemCounts = <String, int>{};

      for (final item in groceryItems.values) {
        final cost = calculateItemCost(item);
        totalCost += cost;
        categoryTotals[item.category] = (categoryTotals[item.category] ?? 0) + cost;
        categoryItemCounts[item.category] = (categoryItemCounts[item.category] ?? 0) + 1;
      }

      final averageCostPerItem = groceryItems.isNotEmpty ? totalCost / groceryItems.length : 0.0;

      print('üí∞ T·ªïng chi ph√≠ t√≠nh to√°n: ${totalCost.toStringAsFixed(0)} VND');

      // Parse category breakdown (∆∞u ti√™n t·ª´ AI, fallback v·ªÅ local calculation)
      final categoryBreakdown = <String, CategoryCostBreakdown>{};
      final aiCategoryData = aiResponse['category_breakdown'] as Map<String, dynamic>? ?? {};

      if (aiCategoryData.isNotEmpty && !isLocalAnalysis) {
        // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ AI
        print('üìä S·ª≠ d·ª•ng category breakdown t·ª´ AI');
        for (final entry in aiCategoryData.entries) {
          final data = entry.value as Map<String, dynamic>;
          categoryBreakdown[entry.key] = CategoryCostBreakdown(
            categoryName: data['category_name'] ?? entry.key,
            totalCost: (data['total_cost'] ?? 0.0).toDouble(),
            percentage: (data['percentage'] ?? 0.0).toDouble(),
            itemCount: data['item_count'] ?? 0,
            averageCostPerItem: (data['average_cost_per_item'] ?? 0.0).toDouble(),
            topExpensiveItems: List<String>.from(data['top_expensive_items'] ?? []),
          );
        }
      } else {
        // T·∫°o category breakdown t·ª´ local calculation
        print('üìä T·∫°o category breakdown t·ª´ local calculation');
        for (final category in categoryTotals.keys) {
          final categoryTotal = categoryTotals[category]!;
          final itemCount = categoryItemCounts[category]!;

          categoryBreakdown[category] = CategoryCostBreakdown(
            categoryName: category,
            totalCost: categoryTotal,
            percentage: totalCost > 0 ? (categoryTotal / totalCost) * 100 : 0,
            itemCount: itemCount,
            averageCostPerItem: categoryTotal / itemCount,
            topExpensiveItems: _getTopExpensiveItemsInCategory(
              groceryItems.values.where((item) => item.category == category).toList(),
              category
            ),
          );
        }
      }

      // Parse saving tips (∆∞u ti√™n t·ª´ AI, fallback v·ªÅ local generation)
      final savingTips = <CostSavingTip>[];
      final aiTipsData = aiResponse['saving_tips'] as List<dynamic>? ?? [];
      final aiOptimizationSuggestions = aiResponse['optimization_suggestions'] as List<dynamic>? ?? [];

      if (aiTipsData.isNotEmpty && !isLocalAnalysis) {
        // S·ª≠ d·ª•ng tips t·ª´ AI
        print('üí° S·ª≠ d·ª•ng saving tips t·ª´ AI');
        for (final tipData in aiTipsData) {
          final tip = tipData as Map<String, dynamic>;
          savingTips.add(CostSavingTip(
            title: tip['title'] ?? '',
            description: tip['description'] ?? '',
            potentialSaving: (tip['potential_saving'] ?? 0.0).toDouble(),
            category: tip['category'] ?? '',
            priority: tip['priority'] ?? 3,
          ));
        }
      } else if (aiOptimizationSuggestions.isNotEmpty) {
        // Chuy·ªÉn ƒë·ªïi optimization suggestions th√†nh saving tips
        print('üí° Chuy·ªÉn ƒë·ªïi optimization suggestions th√†nh saving tips');
        for (int i = 0; i < aiOptimizationSuggestions.length && i < 5; i++) {
          final suggestion = aiOptimizationSuggestions[i].toString();
          savingTips.add(CostSavingTip(
            title: 'G·ª£i √Ω AI #${i + 1}',
            description: suggestion,
            potentialSaving: totalCost * 0.1, // ∆Ø·ªõc t√≠nh ti·∫øt ki·ªám 10%
            category: 'AI Analysis',
            priority: 4,
          ));
        }
      } else {
        // T·∫°o saving tips local
        print('üí° T·∫°o saving tips t·ª´ local analysis');
        final itemsWithCost = groceryItems.values.map((item) => GroceryItemWithCost(
          name: item.name,
          amount: item.amount,
          unit: item.unit,
          category: item.category,
          estimatedCost: calculateItemCost(item),
          pricePerUnit: _getPricePerUnit(item),
        )).toList();

        savingTips.addAll(_generateSavingTips(itemsWithCost, categoryBreakdown));
      }

      // Parse budget comparison
      final budgetData = aiResponse['budget_comparison'] as Map<String, dynamic>? ?? {};
      final budgetComparison = BudgetComparison(
        budgetLimit: budgetLimit ?? 500000,
        actualCost: totalCost,
        difference: totalCost - (budgetLimit ?? 500000),
        isOverBudget: totalCost > (budgetLimit ?? 500000),
        percentageUsed: (budgetLimit ?? 500000) > 0 ? (totalCost / (budgetLimit ?? 500000)) * 100 : 0,
      );

      // Parse price alerts
      final priceAlerts = <PriceAlert>[];
      final alertsData = aiResponse['price_alerts'] as List<dynamic>? ?? [];
      for (final alertData in alertsData) {
        final alert = alertData as Map<String, dynamic>;
        priceAlerts.add(PriceAlert(
          itemName: alert['item_name'] ?? '',
          currentPrice: (alert['current_price'] ?? 0.0).toDouble(),
          averagePrice: (alert['average_price'] ?? 0.0).toDouble(),
          priceChange: (alert['price_change'] ?? 0.0).toDouble(),
          alertType: alert['alert_type'] ?? 'info',
          message: alert['message'] ?? '',
        ));
      }

      return GroceryCostAnalysis(
        totalCost: totalCost,
        averageCostPerItem: averageCostPerItem,
        categoryBreakdown: categoryBreakdown,
        savingTips: savingTips,
        budgetComparison: budgetComparison,
        priceAlerts: priceAlerts,
        analysisDate: DateTime.now(),
      );

    } catch (e) {
      print('‚ùå L·ªói convert AI response: $e');
      // Fallback to local analysis
      throw Exception('Failed to convert AI response');
    }
  }
}
