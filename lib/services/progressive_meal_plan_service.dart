import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/meal_plan.dart';
import '../utils/config.dart' as app_config;
import '../services/api_service.dart';

class ProgressiveMealPlanService {
  static const int DAYS_PER_BATCH = 2; // T·∫°o 2 ng√†y m·ªôt l·∫ßn
  static const int MAX_DAYS_AHEAD = 7; // T·ªëi ƒëa 7 ng√†y
  
  /// Ki·ªÉm tra v√† t·∫°o k·∫ø ho·∫°ch ƒÉn theo t·ª´ng batch s·ª≠ d·ª•ng replace_day endpoint
  static Future<MealPlan?> checkAndGenerateProgressivePlan({
    required String userId,
    required double caloriesTarget,
    required double proteinTarget,
    required double fatTarget,
    required double carbsTarget,
    Map<String, dynamic>? userPreferences,
  }) async {
    try {
      print('üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra k·∫ø ho·∫°ch ƒÉn progressive v·ªõi replace_day...');
      
      // 1. Ki·ªÉm tra k·∫ø ho·∫°ch hi·ªán t·∫°i
      final existingPlan = await _getExistingMealPlan(userId);
      final today = DateTime.now();
      
      if (existingPlan == null) {
        // Ng∆∞·ªùi d√πng m·ªõi - t·∫°o 2 ng√†y ƒë·∫ßu ti√™n
        print('üë§ Ng∆∞·ªùi d√πng m·ªõi - t·∫°o k·∫ø ho·∫°ch 2 ng√†y ƒë·∫ßu b·∫±ng replace_day');
        return await _generateDaysRangeWithReplaceDay(
          userId: userId,
          startDate: today,
          daysCount: DAYS_PER_BATCH,
          caloriesTarget: caloriesTarget,
          proteinTarget: proteinTarget,
          fatTarget: fatTarget,
          carbsTarget: carbsTarget,
          userPreferences: userPreferences,
          isFirstTime: true,
        );
      }
      
      // 2. Ki·ªÉm tra ng√†y n√†o c·∫ßn t·∫°o th√™m
      final missingDays = _getMissingDays(existingPlan, today);
      
      if (missingDays.isNotEmpty) {
        print('üìÖ C·∫ßn t·∫°o th√™m ${missingDays.length} ng√†y: ${missingDays.map((d) => d.toString().split(' ')[0]).join(', ')}');
        
        // T·∫°o t·ª´ng batch 2 ng√†y b·∫±ng replace_day
        return await _generateMissingDaysWithReplaceDay(
          userId: userId,
          existingPlan: existingPlan,
          missingDays: missingDays,
          caloriesTarget: caloriesTarget,
          proteinTarget: proteinTarget,
          fatTarget: fatTarget,
          carbsTarget: carbsTarget,
          userPreferences: userPreferences,
        );
      }
      
      print('‚úÖ K·∫ø ho·∫°ch ƒÉn ƒë√£ ƒë·∫ßy ƒë·ªß');
      return existingPlan;
      
    } catch (e) {
      print('‚ùå L·ªói trong progressive meal planning: $e');
      return null;
    }
  }
  
  /// L·∫•y k·∫ø ho·∫°ch ƒÉn hi·ªán t·∫°i t·ª´ Firestore
  static Future<MealPlan?> _getExistingMealPlan(String userId) async {
    try {
      // Ki·ªÉm tra latest_meal_plans tr∆∞·ªõc
      final latestDoc = await FirebaseFirestore.instance
          .collection('latest_meal_plans')
          .doc(userId)
          .get();
          
      if (latestDoc.exists && latestDoc.data() != null) {
        return MealPlan.fromJson(latestDoc.data()!);
      }
      
      // N·∫øu kh√¥ng c√≥, ki·ªÉm tra meal_plans
      final doc = await FirebaseFirestore.instance
          .collection('meal_plans')
          .doc(userId)
          .get();
          
      if (doc.exists && doc.data() != null) {
        return MealPlan.fromJson(doc.data()!);
      }
      
      return null;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y k·∫ø ho·∫°ch ƒÉn hi·ªán t·∫°i: $e');
      return null;
    }
  }
  
  /// T√¨m nh·ªØng ng√†y c√≤n thi·∫øu trong k·∫ø ho·∫°ch
  static List<DateTime> _getMissingDays(MealPlan existingPlan, DateTime today) {
    final missingDays = <DateTime>[];
    
    // Ki·ªÉm tra 7 ng√†y t·ªõi
    for (int i = 0; i < MAX_DAYS_AHEAD; i++) {
      final checkDate = today.add(Duration(days: i));
      final dayName = _getDayName(checkDate);
      
      // Ki·ªÉm tra xem ng√†y n√†y c√≥ trong k·∫ø ho·∫°ch kh√¥ng
      if (!existingPlan.weeklyPlan.containsKey(dayName) || 
          existingPlan.weeklyPlan[dayName] == null ||
          existingPlan.weeklyPlan[dayName]!.meals.isEmpty) {
        missingDays.add(checkDate);
      }
    }
    
    return missingDays;
  }
  
  /// T·∫°o k·∫ø ho·∫°ch cho m·ªôt kho·∫£ng ng√†y s·ª≠ d·ª•ng replace_day endpoint
  static Future<MealPlan?> _generateDaysRangeWithReplaceDay({
    required String userId,
    required DateTime startDate,
    required int daysCount,
    required double caloriesTarget,
    required double proteinTarget,
    required double fatTarget,
    required double carbsTarget,
    Map<String, dynamic>? userPreferences,
    bool isFirstTime = false,
  }) async {
    try {
      final headers = await ApiService.getAuthHeaders();
      
      // T·∫°o danh s√°ch ng√†y c·∫ßn generate
      final targetDays = <String>[];
      for (int i = 0; i < daysCount; i++) {
        final date = startDate.add(Duration(days: i));
        targetDays.add(_getDayName(date));
      }
      
      print('üîÑ T·∫°o k·∫ø ho·∫°ch ${daysCount} ng√†y: ${targetDays.join(', ')} b·∫±ng replace_day endpoint');
      
      // S·ª≠ d·ª•ng replace_day endpoint cho t·ª´ng ng√†y
      for (final dayName in targetDays) {
        final replaceUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.replaceDay}');
        
        final requestData = {
          'user_id': userId,
          'day_of_week': dayName,
          'calories_target': caloriesTarget.round(),
          'protein_target': proteinTarget.round(),
          'fat_target': fatTarget.round(),
          'carbs_target': carbsTarget.round(),
          'use_ai': true,
        };
        
        // Th√™m preferences n·∫øu c√≥
        if (userPreferences != null) {
          userPreferences.forEach((key, value) {
            requestData[key] = value;
          });
        }
        
        print('üîÑ T·∫°o ng√†y $dayName: ${jsonEncode(requestData)}');
        
        final response = await http.post(
          replaceUrl,
          headers: {
            ...headers,
            'Content-Type': 'application/json',
          },
          body: jsonEncode(requestData),
        ).timeout(
          Duration(seconds: 30),
          onTimeout: () {
            print('‚è±Ô∏è Timeout khi t·∫°o ng√†y $dayName');
            return http.Response('{"error": "Timeout"}', 408);
          },
        );
        
        if (response.statusCode == 200) {
          print('‚úÖ T·∫°o th√†nh c√¥ng ng√†y $dayName');
          // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c request ƒë·ªÉ tr√°nh overload
          await Future.delayed(Duration(seconds: 1));
        } else {
          print('‚ùå L·ªói khi t·∫°o ng√†y $dayName: ${response.statusCode} - ${response.body}');
        }
      }
      
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ API l∆∞u v√†o Firestore
      await Future.delayed(Duration(seconds: 3));
      
      // L·∫•y k·∫ø ho·∫°ch m·ªõi t·ª´ Firestore
      return await _getExistingMealPlan(userId);
      
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o k·∫ø ho·∫°ch ${daysCount} ng√†y: $e');
      return null;
    }
  }
  
  /// T·∫°o nh·ªØng ng√†y c√≤n thi·∫øu s·ª≠ d·ª•ng replace_day
  static Future<MealPlan?> _generateMissingDaysWithReplaceDay({
    required String userId,
    required MealPlan existingPlan,
    required List<DateTime> missingDays,
    required double caloriesTarget,
    required double proteinTarget,
    required double fatTarget,
    required double carbsTarget,
    Map<String, dynamic>? userPreferences,
  }) async {
    // T·∫°o t·ª´ng batch 2 ng√†y
    final batches = <List<DateTime>>[];
    for (int i = 0; i < missingDays.length; i += DAYS_PER_BATCH) {
      final end = (i + DAYS_PER_BATCH < missingDays.length) 
          ? i + DAYS_PER_BATCH 
          : missingDays.length;
      batches.add(missingDays.sublist(i, end));
    }
    
    // T·∫°o batch ƒë·∫ßu ti√™n (∆∞u ti√™n cao nh·∫•t)
    if (batches.isNotEmpty) {
      final firstBatch = batches.first;
      print('üîÑ T·∫°o batch ƒë·∫ßu ti√™n: ${firstBatch.length} ng√†y b·∫±ng replace_day');
      
      return await _generateDaysRangeWithReplaceDay(
        userId: userId,
        startDate: firstBatch.first,
        daysCount: firstBatch.length,
        caloriesTarget: caloriesTarget,
        proteinTarget: proteinTarget,
        fatTarget: fatTarget,
        carbsTarget: carbsTarget,
        userPreferences: userPreferences,
      );
    }
    
    return existingPlan;
  }
  
  /// Thay th·∫ø m·ªôt ng√†y c·ª• th·ªÉ trong k·∫ø ho·∫°ch ƒÉn s·ª≠ d·ª•ng replace_day endpoint
  static Future<MealPlan?> replaceDayInPlan({
    required String userId,
    required String dayOfWeek,
    required double caloriesTarget,
    required double proteinTarget,
    required double fatTarget,
    required double carbsTarget,
    Map<String, dynamic>? userPreferences,
  }) async {
    try {
      print('üîÑ Thay th·∫ø ng√†y $dayOfWeek trong k·∫ø ho·∫°ch b·∫±ng replace_day...');
      
      final headers = await ApiService.getAuthHeaders();
      final replaceUrl = Uri.parse('${app_config.apiBaseUrl}${app_config.ApiEndpoints.replaceDay}');
      
      final requestData = {
        'user_id': userId,
        'day_of_week': dayOfWeek,
        'calories_target': caloriesTarget.round(),
        'protein_target': proteinTarget.round(),
        'fat_target': fatTarget.round(),
        'carbs_target': carbsTarget.round(),
        'use_ai': true,
      };
      
      // Th√™m preferences n·∫øu c√≥
      if (userPreferences != null) {
        userPreferences.forEach((key, value) {
          requestData[key] = value;
        });
      }
      
      print('üîÑ G·ª≠i y√™u c·∫ßu thay th·∫ø ng√†y: ${jsonEncode(requestData)}');
      
      final response = await http.post(
        replaceUrl,
        headers: {
          ...headers,
          'Content-Type': 'application/json',
        },
        body: jsonEncode(requestData),
      ).timeout(
        Duration(seconds: 30),
        onTimeout: () {
          print('‚è±Ô∏è Timeout khi thay th·∫ø ng√†y $dayOfWeek');
          return http.Response('{"error": "Timeout"}', 408);
        },
      );
      
      if (response.statusCode == 200) {
        print('‚úÖ Thay th·∫ø ng√†y $dayOfWeek th√†nh c√¥ng');
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ API l∆∞u v√†o Firestore
        await Future.delayed(Duration(seconds: 2));
        
        // L·∫•y k·∫ø ho·∫°ch m·ªõi t·ª´ Firestore
        return await _getExistingMealPlan(userId);
      } else {
        print('‚ùå L·ªói API khi thay th·∫ø ng√†y: ${response.statusCode} - ${response.body}');
        return null;
      }
      
    } catch (e) {
      print('‚ùå L·ªói khi thay th·∫ø ng√†y $dayOfWeek: $e');
      return null;
    }
  }
  
  /// L·∫•y t√™n ng√†y theo ƒë·ªãnh d·∫°ng ti·∫øng Anh
  static String _getDayName(DateTime date) {
    const days = [
      'Monday', 'Tuesday', 'Wednesday', 'Thursday', 
      'Friday', 'Saturday', 'Sunday'
    ];
    return days[date.weekday - 1];
  }
  
  /// Ki·ªÉm tra xem c√≥ c·∫ßn t·∫°o th√™m k·∫ø ho·∫°ch kh√¥ng
  static bool shouldGenerateMore(MealPlan? currentPlan) {
    if (currentPlan == null) return true;
    
    final today = DateTime.now();
    final missingDays = _getMissingDays(currentPlan, today);
    
    return missingDays.isNotEmpty;
  }
  
  /// L·∫•y th√¥ng b√°o tr·∫°ng th√°i cho UI
  static String getStatusMessage(MealPlan? currentPlan) {
    if (currentPlan == null) {
      return 'ƒêang t·∫°o k·∫ø ho·∫°ch ƒÉn cho b·∫°n...';
    }
    
    final today = DateTime.now();
    final missingDays = _getMissingDays(currentPlan, today);
    
    if (missingDays.isEmpty) {
      return 'K·∫ø ho·∫°ch ƒÉn ƒë√£ s·∫µn s√†ng cho 7 ng√†y t·ªõi!';
    } else {
      return 'ƒêang chu·∫©n b·ªã th√™m ${missingDays.length} ng√†y...';
    }
  }
}
