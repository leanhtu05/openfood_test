import 'dart:convert';
import 'dart:typed_data';
import 'package:http/http.dart' as http;

/// YouTube Backend Service - Secure proxy to backend YouTube API
/// 
/// Benefits:
/// - API key secured in backend
/// - Caching reduces quota usage
/// - Quality filtering on server
/// - Rate limiting protection
class YouTubeBackendService {
  // static const String _baseUrl = 'http://localhost:8000'; // Local backend for testing
  static const String _baseUrl = 'https://backend-openfood.onrender.com'; // Production backend - CORRECTED URL
  
  // Singleton pattern
  static final YouTubeBackendService _instance = YouTubeBackendService._internal();
  factory YouTubeBackendService() => _instance;
  YouTubeBackendService._internal();

  /// Search for cooking videos via backend proxy
  /// 
  /// Benefits:
  /// - Server-side caching (24h)
  /// - Quality filtering
  /// - Vietnamese query optimization
  /// - Secure API key handling
  Future<List<Map<String, String>>> searchVideos(
    String dishName, {
    int maxResults = 5,
    String duration = 'medium',
    String order = 'relevance',
  }) async {
    try {
      print('üîç Searching videos via backend for: $dishName');
      
      final url = Uri.parse('$_baseUrl/youtube/search');
      
      // Ensure proper UTF-8 encoding for Vietnamese text
      final requestBody = {
        'query': dishName.trim(), // Remove any whitespace
        'max_results': maxResults,
        'duration': duration,
        'order': order,
      };

      print('üì° Making request to: $url');
      print('üì¶ Request body: ${json.encode(requestBody, toEncodable: (obj) => obj.toString())}');
      
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept': 'application/json',
          'Accept-Charset': 'utf-8',
        },
        body: utf8.encode(json.encode(requestBody)),
      ).timeout(Duration(seconds: 30));
      
      print('üì° Response status: ${response.statusCode}');
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final videos = List<Map<String, String>>.from(
          data['videos'].map((video) => Map<String, String>.from(video))
        );
        
        final cached = data['cached'] ?? false;
        print('‚úÖ Found ${videos.length} videos (cached: $cached)');
        
        return videos;
      } else {
        print('‚ùå Backend error: ${response.statusCode} - ${response.body}');
        throw Exception('Backend search failed: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error searching videos via backend: $e');
      
      // Fallback to local mock data
      return _createFallbackVideos(dishName);
    }
  }

  /// Get trending cooking videos via backend
  Future<List<Map<String, String>>> getTrendingVideos({int maxResults = 10}) async {
    try {
      print('üî• Getting trending videos via backend');
      
      final url = Uri.parse('$_baseUrl/youtube/trending?max_results=$maxResults');
      
      final response = await http.get(
        url,
        headers: {
          'Accept': 'application/json',
        },
      ).timeout(Duration(seconds: 30));
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final videos = List<Map<String, String>>.from(
          data['videos'].map((video) => Map<String, String>.from(video))
        );
        
        final cached = data['cached'] ?? false;
        print('‚úÖ Found ${videos.length} trending videos (cached: $cached)');
        
        return videos;
      } else {
        print('‚ùå Backend trending error: ${response.statusCode}');
        throw Exception('Backend trending failed: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error getting trending videos: $e');
      return [];
    }
  }

  /// Get cache statistics from backend
  Future<Map<String, dynamic>?> getCacheStats() async {
    try {
      final url = Uri.parse('$_baseUrl/youtube/cache/stats');
      
      final response = await http.get(
        url,
        headers: {'Accept': 'application/json'},
      ).timeout(Duration(seconds: 10));
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      }
    } catch (e) {
      print('‚ùå Error getting cache stats: $e');
    }
    return null;
  }

  /// Clear backend cache (admin function)
  Future<bool> clearCache() async {
    try {
      final url = Uri.parse('$_baseUrl/youtube/cache/clear');
      
      final response = await http.delete(
        url,
        headers: {'Accept': 'application/json'},
      ).timeout(Duration(seconds: 10));
      
      if (response.statusCode == 200) {
        print('‚úÖ Cache cleared successfully');
        return true;
      }
    } catch (e) {
      print('‚ùå Error clearing cache: $e');
    }
    return false;
  }

  /// Create fallback videos when backend is unavailable
  List<Map<String, String>> _createFallbackVideos(String dishName) {
    print('üîÑ Creating fallback videos for: $dishName');
    
    return [
      {
        'title': 'T√¨m ki·∫øm video: "$dishName h∆∞·ªõng d·∫´n n·∫•u ƒÉn"',
        'videoId': 'SEARCH_YOUTUBE',
        'channel': 'YouTube Search',
        'duration': '‚àû',
        'views': 'Nhi·ªÅu video',
        'description': 'T√¨m ki·∫øm video h∆∞·ªõng d·∫´n n·∫•u $dishName tr√™n YouTube',
        'thumbnail': 'https://via.placeholder.com/480x360/FF6B35/FFFFFF?text=Search+YouTube',
      },
      {
        'title': 'Kh√°m ph√° video n·∫•u ƒÉn: "$dishName"',
        'videoId': 'SEARCH_YOUTUBE_ALT',
        'channel': 'Cooking Videos',
        'duration': '‚àû',
        'views': 'K·∫øt qu·∫£ t√¨m ki·∫øm',
        'description': 'Kh√°m ph√° c√°c video h∆∞·ªõng d·∫´n n·∫•u $dishName t·ª´ c√°c chef chuy√™n nghi·ªáp',
        'thumbnail': 'https://via.placeholder.com/480x360/4CAF50/FFFFFF?text=Cooking+Videos',
      },
    ];
  }

  /// Test backend connection
  Future<bool> testConnection() async {
    try {
      print('üîç Testing backend connection...');
      
      final url = Uri.parse('$_baseUrl/youtube/cache/stats');
      
      final response = await http.get(
        url,
        headers: {'Accept': 'application/json'},
      ).timeout(Duration(seconds: 5));
      
      final isConnected = response.statusCode == 200;
      print(isConnected ? '‚úÖ Backend connected' : '‚ùå Backend not available');
      
      return isConnected;
    } catch (e) {
      print('‚ùå Backend connection failed: $e');
      return false;
    }
  }

  /// Get video details by IDs (batch request)
  Future<List<Map<String, String>>> getVideoDetails(List<String> videoIds) async {
    try {
      print('üìπ Getting video details for ${videoIds.length} videos');
      
      final url = Uri.parse('$_baseUrl/youtube/details');
      
      final requestBody = {
        'video_ids': videoIds,
      };
      
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: json.encode(requestBody),
      ).timeout(Duration(seconds: 20));
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final videos = List<Map<String, String>>.from(
          data['videos'].map((video) => Map<String, String>.from(video))
        );
        
        print('‚úÖ Got details for ${videos.length} videos');
        return videos;
      } else {
        print('‚ùå Video details error: ${response.statusCode}');
        throw Exception('Video details failed: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error getting video details: $e');
      return [];
    }
  }

  /// Create Vietnamese cooking query
  String createVietnameseQuery(String dishName) {
    final Map<String, String> vietnameseQueries = {
      'Ph·ªü B√≤': 'c√°ch n·∫•u ph·ªü b√≤ H√† N·ªôi ngon',
      'Ph·ªü G√†': 'c√°ch n·∫•u ph·ªü g√† ngon',
      'Ph·ªü G√† N·∫•u D·ª´a Mi·ªÅn T√¢y': 'c√°ch n·∫•u ph·ªü g√† d·ª´a mi·ªÅn T√¢y',
      'B√∫n Ch·∫£': 'c√°ch l√†m b√∫n ch·∫£ H√† N·ªôi',
      'C∆°m T·∫•m': 'c√°ch l√†m c∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng S√†i G√≤n',
      'B√°nh M√¨': 'c√°ch l√†m b√°nh m√¨ Vi·ªát Nam',
      'G·ªèi Cu·ªën': 'c√°ch cu·ªën g·ªèi cu·ªën t√¥m th·ªãt',
      'Canh Chua': 'c√°ch n·∫•u canh chua c√° mi·ªÅn T√¢y',
      'B√∫n B√≤ Hu·∫ø': 'c√°ch n·∫•u b√∫n b√≤ Hu·∫ø chu·∫©n v·ªã',
      'B√°nh X√®o': 'c√°ch l√†m b√°nh x√®o mi·ªÅn T√¢y',
      'Ch·∫£ C√°': 'c√°ch l√†m ch·∫£ c√° L√£ V·ªçng H√† N·ªôi',
      'Nem N∆∞·ªõng': 'c√°ch l√†m nem n∆∞·ªõng Nha Trang',
      'B√°nh M√¨ Ch·∫£ C√° Nha Trang': 'c√°ch l√†m b√°nh m√¨ ch·∫£ c√° Nha Trang',
      'C√° h·ªìi n∆∞·ªõng v·ªõi khoai lang v√† rau c·ªß': 'c√°ch n∆∞·ªõng c√° h·ªìi v·ªõi khoai lang rau c·ªß',
    };

    if (vietnameseQueries.containsKey(dishName)) {
      return vietnameseQueries[dishName]!;
    }

    return 'c√°ch n·∫•u $dishName ngon ti·∫øng Vi·ªát';
  }

  /// Get backend health status
  Future<Map<String, dynamic>?> getHealthStatus() async {
    try {
      final url = Uri.parse('$_baseUrl/health');
      
      final response = await http.get(
        url,
        headers: {'Accept': 'application/json'},
      ).timeout(Duration(seconds: 5));
      
      if (response.statusCode == 200) {
        return json.decode(response.body);
      }
    } catch (e) {
      print('‚ùå Error getting health status: $e');
    }
    return null;
  }
}

/// YouTube Backend Service instance
final youtubeBackendService = YouTubeBackendService();
