import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:openfood/screens/home_screen.dart';
import 'package:openfood/screens/meal_screen.dart';
import 'package:openfood/screens/exercise_log_screen.dart';
import 'package:openfood/screens/exercise_history_screen.dart';
import 'package:openfood/screens/water_history_screen.dart';
import 'package:openfood/screens/combined_history_screen.dart';
import 'package:openfood/providers/exercise_provider.dart';
import 'package:openfood/providers/water_provider.dart';
import 'package:openfood/providers/food_provider.dart';
import 'package:openfood/routes.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'package:openfood/services/food_recognition_service.dart';
import 'package:openfood/services/food_database_service.dart';
import 'package:openfood/services/onboarding_service.dart';
import 'screens/onboarding/onboarding_screen.dart';
import 'providers/user_data_provider.dart';
import 'providers/meal_plan_provider.dart';
import 'package:openfood/providers/user_auth_provider.dart';
import 'firebase_options.dart';
import 'services/auth_service.dart';
import 'screens/settings_screen.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'package:openfood/services/api_service.dart';
import 'screens/admin/firestore_admin_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';

bool isFirebaseInitialized = false;
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

Future<void> main() async {
  // ƒê·∫£m b·∫£o WidgetsFlutterBinding ƒë∆∞·ª£c kh·ªüi t·∫°o
  WidgetsFlutterBinding.ensureInitialized();

  // Kh·ªüi t·∫°o Hive tr∆∞·ªõc Firebase ƒë·ªÉ ƒë·∫£m b·∫£o ·ª©ng d·ª•ng lu√¥n ho·∫°t ƒë·ªông ngay c·∫£ khi Firebase g·∫∑p l·ªói
  try {
    final appDocumentDir = await getApplicationDocumentsDirectory();
    await Hive.initFlutter(appDocumentDir.path);
    print('Hive ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
  } catch (e) {
    print('L·ªói khi kh·ªüi t·∫°o Hive: $e');
  }

  // Kh·ªüi t·∫°o ng√¥n ng·ªØ ti·∫øng Vi·ªát cho ƒë·ªãnh d·∫°ng ng√†y th√°ng
  await initializeDateFormatting('vi_VN', null);

  // Kh·ªüi t·∫°o Firebase v·ªõi error handling c·∫£i ti·∫øn
  try {
    // Th√™m timeout cho vi·ªác kh·ªüi t·∫°o Firebase
    bool initializationComplete = false;
    
    // T·∫°o m·ªôt Future v·ªõi timeout
    await Future.any([
      Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      ).then((_) {
        isFirebaseInitialized = true;
        initializationComplete = true;
        print('Firebase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
      }),
      
      // Timeout sau 5 gi√¢y
      Future.delayed(Duration(seconds: 5)).then((_) {
        if (!initializationComplete) {
          print('‚ö†Ô∏è Timeout khi kh·ªüi t·∫°o Firebase, ti·∫øp t·ª•c v·ªõi ch·∫ø ƒë·ªô offline');
          isFirebaseInitialized = false;
          throw Exception('Firebase initialization timeout');
        }
      })
    ]);
    
    // Th√™m ƒëƒÉng nh·∫≠p ·∫©n danh t·ª± ƒë·ªông - ch·ªâ th·ª±c hi·ªán khi Firebase ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng
    if (isFirebaseInitialized) {
      try {
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
        User? currentUser = FirebaseAuth.instance.currentUser;
        
        if (currentUser == null) {
          // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, th·ª±c hi·ªán ƒëƒÉng nh·∫≠p ·∫©n danh v·ªõi timeout
          bool loginComplete = false;
          
          await Future.any([
            FirebaseAuth.instance.signInAnonymously().then((userCredential) {
              loginComplete = true;
              print('ƒêƒÉng nh·∫≠p ·∫©n danh th√†nh c√¥ng: ${userCredential.user?.uid}');
            }),
            
            // Timeout sau 3 gi√¢y
            Future.delayed(Duration(seconds: 3)).then((_) {
              if (!loginComplete) {
                print('‚ö†Ô∏è Timeout khi ƒëƒÉng nh·∫≠p ·∫©n danh, ti·∫øp t·ª•c v·ªõi ch·∫ø ƒë·ªô offline');
                throw Exception('Anonymous login timeout');
              }
            })
          ]);
        } else {
          print('Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi ID: ${currentUser.uid}');
        }
      } catch (authError) {
        print('L·ªói ƒëƒÉng nh·∫≠p ·∫©n danh: $authError');
        // Th·ª≠ ƒëƒÉng nh·∫≠p l·∫°i m·ªôt l·∫ßn n·ªØa sau khi g·∫∑p l·ªói
        try {
          await Future.delayed(Duration(seconds: 1));
          
          bool retryComplete = false;
          await Future.any([
            FirebaseAuth.instance.signInAnonymously().then((userCredential) {
              retryComplete = true;
              print('ƒêƒÉng nh·∫≠p ·∫©n danh l·∫ßn 2 th√†nh c√¥ng: ${userCredential.user?.uid}');
            }),
            
            // Timeout sau 3 gi√¢y
            Future.delayed(Duration(seconds: 3)).then((_) {
              if (!retryComplete) {
                print('‚ö†Ô∏è Timeout khi ƒëƒÉng nh·∫≠p ·∫©n danh l·∫ßn 2, ti·∫øp t·ª•c v·ªõi ch·∫ø ƒë·ªô offline');
                throw Exception('Anonymous login retry timeout');
              }
            })
          ]);
        } catch (retryError) {
          print('L·ªói ƒëƒÉng nh·∫≠p ·∫©n danh l·∫ßn 2: $retryError');
          // ƒê·∫∑t l·∫°i tr·∫°ng th√°i firebase ƒë·ªÉ ·ª©ng d·ª•ng bi·∫øt r·∫±ng ch√∫ng ta kh√¥ng c√≥ firebase
          isFirebaseInitialized = false;
        }
      }
    }
  } catch (e) {
    isFirebaseInitialized = false;
    print('L·ªói khi kh·ªüi t·∫°o Firebase: $e');
    // Ti·∫øp t·ª•c th·ª±c thi ƒë·ªÉ app c√≥ th·ªÉ kh·ªüi ƒë·ªông m√† kh√¥ng c·∫ßn Firebase
  }

  // Kh·ªüi t·∫°o c√°c service
  await initializeServices();

  runApp(
    MultiProvider(
      providers: [
        // ƒê·∫∑t UserAuthProvider v√† firebase flag tr∆∞·ªõc ƒë·ªÉ UserDataProvider c√≥ th·ªÉ truy c·∫≠p
        ChangeNotifierProvider(create: (_) => UserAuthProvider()),
        Provider<bool>.value(value: isFirebaseInitialized),
        
        // C√°c provider kh√°c
        ChangeNotifierProvider(create: (_) => ExerciseProvider()),
        ChangeNotifierProvider(create: (_) => WaterProvider()),
        ChangeNotifierProvider(create: (_) => FoodProvider()),
        
        // UserDataProvider c·∫ßn truy c·∫≠p ƒë·∫øn isFirebaseInitialized
        ChangeNotifierProxyProvider<bool, UserDataProvider>(
          create: (_) => UserDataProvider(),
          update: (_, firebaseInitialized, previousProvider) {
            return previousProvider ?? UserDataProvider();
          },
        ),
        
        ChangeNotifierProvider(create: (_) => MealPlanProvider()),
        ChangeNotifierProvider(create: (_) => AuthService()),
      ],
      child: MyApp(),
    ),
  );

  // Sau khi app kh·ªüi ƒë·ªông, t·ª± ƒë·ªông ƒë·ªìng b·ªô d·ªØ li·ªáu
  // C·∫ßn delay ƒë·ªÉ context v√† provider s·∫µn s√†ng
  Future.delayed(Duration(seconds: 2), () async {
    final context = navigatorKey.currentContext;
    if (context != null) {
      // L·∫•y UserDataProvider
      final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
      
      // Ki·ªÉm tra gi√° tr·ªã TDEE tr∆∞·ªõc
      print('üîç Ki·ªÉm tra TDEE: ${userDataProvider.tdeeCalories} kcal');
      
      // Ki·ªÉm tra gi√° tr·ªã TDEE v√† kh·∫Øc ph·ª•c n·∫øu kh√¥ng h·ª£p l·ªá
      bool needRecalculation = false;
      
      // Ki·ªÉm tra xem TDEE c√≥ b·∫±ng gi√° tr·ªã m·∫∑c ƒë·ªãnh ho·∫∑c gi√° tr·ªã c·ªë ƒë·ªãnh kh√¥ng
      double tdeeCalories = userDataProvider.tdeeCalories;
      double nutritionGoalsCalories = userDataProvider.nutritionGoals['calories'] ?? 0.0;
      
      if (tdeeCalories <= 0 || 
          (tdeeCalories - 2000.0).abs() < 1.0 || 
          (tdeeCalories - 2468.0).abs() < 1.0 ||
          nutritionGoalsCalories <= 0 ||
          (nutritionGoalsCalories - 2000.0).abs() < 1.0 || 
          (nutritionGoalsCalories - 2468.0).abs() < 1.0) {
        
        print('‚ö†Ô∏è Ph√°t hi·ªán TDEE kh√¥ng h·ª£p l·ªá ($tdeeCalories kcal), c·ªë g·∫Øng kh·∫Øc ph·ª•c t·ª± ƒë·ªông...');
        needRecalculation = true;
      }
      
      if (needRecalculation) {
        try {
          // B∆∞·ªõc 1: ƒê·∫∑t l·∫°i c·ªù ƒë·ªìng b·ªô
          final prefs = await SharedPreferences.getInstance();
          await prefs.remove('data_loaded_from_firestore');
          await prefs.setBool('data_loaded_from_firestore', false);
          await prefs.setBool('use_firebase_data', false);
          await prefs.setBool('data_changed', true);
          await prefs.setString('last_local_update', DateTime.now().toIso8601String());
          
          // B∆∞·ªõc 2: T√≠nh to√°n l·∫°i TDEE
          await userDataProvider.forceRecalculateTDEE();
          
          // B∆∞·ªõc 3: T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ local
          await userDataProvider.loadUserData();
          
          // B∆∞·ªõc 4: L∆∞u gi√° tr·ªã m·ªõi v√†o local storage
          await userDataProvider.saveUserData();
          
          print('‚úÖ ƒê√£ t·ª± ƒë·ªông kh·∫Øc ph·ª•c TDEE. Gi√° tr·ªã m·ªõi: ${userDataProvider.tdeeCalories} kcal');
        } catch (e) {
          print('‚ùå L·ªói khi kh·∫Øc ph·ª•c TDEE: $e');
        }
      } else {
        print('‚úÖ TDEE h·ª£p l·ªá: $tdeeCalories kcal');
        
        // C·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã trong SharedPreferences ƒë·ªÉ ƒë·∫£m b·∫£o
        try {
          await userDataProvider.saveUserData();
        } catch (e) {
          print('‚ùå L·ªói khi l∆∞u TDEE h·ª£p l·ªá: $e');
        }
      }
      
      // T·ª± ƒë·ªông t√≠nh to√°n TDEE n·∫øu c·∫ßn
      await userDataProvider.autoCalculateTDEE();
      
      // ƒê·ªìng b·ªô d·ªØ li·ªáu v·ªõi server
      syncAllDataToServer(context);
    }
  });
}

// Kh·ªüi t·∫°o c√°c service c·∫ßn thi·∫øt
Future<void> initializeServices() async {
  try {
    // Kh·ªüi t·∫°o Food Recognition Service
    final foodRecognitionService = FoodRecognitionService();
    await foodRecognitionService.initialize();

    // Kh·ªüi t·∫°o Food Database Service
    final foodDatabaseService = FoodDatabaseService();
    await foodDatabaseService.initialize();
    
    // C·∫≠p nh·∫≠t URL server cho API calls
    try {
      // N·∫øu b·∫°n ƒëang g·∫∑p v·∫•n ƒë·ªÅ v·ªõi k·∫øt n·ªëi, c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ IP server ·ªü ƒë√¢y
      // ApiService.baseUrl = 'http://192.168.1.5:8000';
      // ApiService.authBaseUrl = 'http://192.168.1.5:8000';
      print('S·ª≠ d·ª•ng ƒë·ªãa ch·ªâ server m·∫∑c ƒë·ªãnh');
    } catch (e) {
      print('L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ server: $e');
    }
    
    print('ƒê√£ kh·ªüi t·∫°o c√°c service th√†nh c√¥ng');
  } catch (e) {
    print('L·ªói khi kh·ªüi t·∫°o c√°c service: $e');
  }
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // L·∫•y tr·∫°ng th√°i kh·ªüi t·∫°o Firebase
    final firebaseInitialized = Provider.of<bool>(context);
    
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'DietAI',
      theme: ThemeData(
        primarySwatch: Colors.green,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      navigatorKey: navigatorKey,
      routes: routes,
      onGenerateRoute: generateRoute,
      home: FutureBuilder<bool>(
        future: OnboardingService.hasCompletedOnboarding(),
        builder: (context, snapshot) {
          // Hi·ªÉn th·ªã m√†n h√¨nh loading trong khi ƒëang ki·ªÉm tra
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Scaffold(
              body: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text('ƒêang kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...'),
                    if (!firebaseInitialized)
                      Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Text(
                          'ƒêang ch·∫°y ·ªü ch·∫ø ƒë·ªô offline',
                          style: TextStyle(color: Colors.orange),
                        ),
                      ),
                  ],
                ),
              ),
            );
          }
          
          // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh onboarding ch∆∞a
          final hasCompletedOnboarding = snapshot.data ?? false;
          
          // N·∫øu ƒë√£ ho√†n th√†nh, chuy·ªÉn ƒë·∫øn m√†n h√¨nh ch√≠nh
          // N·∫øu ch∆∞a, chuy·ªÉn ƒë·∫øn m√†n h√¨nh onboarding
          print('üè† Kh·ªüi t·∫°o m√†n h√¨nh ch√≠nh: ${hasCompletedOnboarding ? "HomeScreen" : "OnboardingScreen"}');
          return hasCompletedOnboarding ? HomeScreen() : const OnboardingScreen();
        },
      ),
      // H·ªó tr·ª£ hi·ªÉn th·ªã ti·∫øng Vi·ªát
      localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: [
        const Locale('vi', 'VN'),
        const Locale('en', 'US'),
      ],
      locale: const Locale('vi', 'VN'),
    );
  }
}

// Th√™m m·ªôt v√≠ d·ª• v·ªÅ c√°ch ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn MealScreen v·ªõi tham s·ªë mealId
// ƒê·∫∑t ƒëo·∫°n code n√†y trong m·ªôt h√†m ho·∫∑c s·ª± ki·ªán n√†o ƒë√≥ trong ·ª©ng d·ª•ng c·ªßa b·∫°n

void navigateToMealDetail(BuildContext context, String mealId) {
  // C√°ch 1: S·ª≠ d·ª•ng named route v·ªõi arguments
  Navigator.pushNamed(
    context,
    '/meal_detail',
    arguments: mealId,
  );
  
  // C√°ch 2: S·ª≠ d·ª•ng MaterialPageRoute tr·ª±c ti·∫øp
  // Navigator.push(
  //   context,
  //   MaterialPageRoute(
  //     builder: (context) => MealScreen(mealId: mealId),
  //   ),
  // );
}

Future<void> syncAllDataToServer(BuildContext context) async {
  final foodProvider = Provider.of<FoodProvider>(context, listen: false);
  final userDataProvider = Provider.of<UserDataProvider>(context, listen: false);
  final exerciseProvider = Provider.of<ExerciseProvider>(context, listen: false);
  final waterProvider = Provider.of<WaterProvider>(context, listen: false);

  final foodData = foodProvider.getAllEntriesAsJson();
  final userData = userDataProvider.toJson();
  final exerciseData = exerciseProvider.getAllExercisesAsJson();
  final waterData = waterProvider.getAllWaterLogsAsJson();

  final data = {
    'user': userData,
    'meals': foodData,
    'exercises': exerciseData,
    'water_logs': waterData,
  };

  try {
    // L·∫•y user ID t·ª´ Firebase n·∫øu c√≥
    String userId = "default";
    try {
      final firebaseUser = FirebaseAuth.instance.currentUser;
      if (firebaseUser != null) {
        userId = firebaseUser.uid;
      }
    } catch (e) {
      print('Kh√¥ng th·ªÉ l·∫•y Firebase user ID: $e');
    }
    
    // S·ª≠ d·ª•ng URL t·ª´ ApiService n·∫øu c√≥, ng∆∞·ª£c l·∫°i s·ª≠ d·ª•ng URL m·∫∑c ƒë·ªãnh
    final apiUrl = '${ApiService.baseUrl}/sync?user_id=$userId';
    
    final response = await http.post(
      Uri.parse(apiUrl),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(data),
    ).timeout(
      Duration(seconds: 8), // Timeout sau 8 gi√¢y
      onTimeout: () {
        print('‚è±Ô∏è Timeout khi ƒë·ªìng b·ªô d·ªØ li·ªáu');
        throw TimeoutException('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      },
    );
    
    if (response.statusCode == 200) {
      print('ƒê·ªìng b·ªô d·ªØ li·ªáu local l√™n server th√†nh c√¥ng!');
      print('Response: ${response.body}');
    } else {
      print('L·ªói ƒë·ªìng b·ªô (${response.statusCode}): ${response.body}');
    }
  } catch (e) {
    print('L·ªói khi g·ª≠i d·ªØ li·ªáu l√™n server: $e');
  }
}
