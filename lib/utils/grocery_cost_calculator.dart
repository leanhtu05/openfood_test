import '../models/grocery_cost_analysis.dart';
import '../services/vietnamese_food_price_service.dart';

/// Utility class ƒë·ªÉ t√≠nh to√°n chi ph√≠ grocery d·ª±a tr√™n d·ªØ li·ªáu Firebase
class GroceryCostCalculator {
  final VietnameseFoodPriceService _priceService = VietnameseFoodPriceService();

  /// T√≠nh to√°n ph√¢n t√≠ch chi ph√≠ cho danh s√°ch grocery
  Future<GroceryCostAnalysis> calculateCostAnalysis({
    required List<GroceryItemWithCost> groceryItems,
    double? budgetLimit,
  }) async {
    try {
      // C·∫≠p nh·∫≠t gi√° cho c√°c items t·ª´ Firebase
      final updatedItems = await _updateItemPrices(groceryItems);
      
      // T√≠nh to√°n t·ªïng chi ph√≠
      final totalCost = updatedItems.fold<double>(
        0.0, 
        (sum, item) => sum + item.estimatedCost,
      );
      
      // T√≠nh to√°n chi ph√≠ trung b√¨nh m·ªói item
      final averageCostPerItem = updatedItems.isNotEmpty 
          ? totalCost / updatedItems.length 
          : 0.0;
      
      // Ph√¢n t√≠ch theo danh m·ª•c
      final categoryBreakdown = _calculateCategoryBreakdown(updatedItems, totalCost);
      
      // T·∫°o m·∫πo ti·∫øt ki·ªám
      final savingTips = await _generateSavingTips(updatedItems, categoryBreakdown);
      
      // So s√°nh ng√¢n s√°ch
      final budgetComparison = _calculateBudgetComparison(
        totalCost, 
        budgetLimit ?? 0.0,
      );
      
      // T·∫°o c·∫£nh b√°o gi√°
      final priceAlerts = await _generatePriceAlerts(updatedItems);
      
      return GroceryCostAnalysis(
        totalCost: totalCost,
        averageCostPerItem: averageCostPerItem,
        categoryBreakdown: categoryBreakdown,
        savingTips: savingTips,
        budgetComparison: budgetComparison,
        priceAlerts: priceAlerts,
        analysisDate: DateTime.now(),
      );
    } catch (e) {
      print('‚ùå L·ªói t√≠nh to√°n ph√¢n t√≠ch chi ph√≠: $e');
      rethrow;
    }
  }

  /// C·∫≠p nh·∫≠t gi√° cho c√°c items t·ª´ Firebase
  Future<List<GroceryItemWithCost>> _updateItemPrices(
    List<GroceryItemWithCost> items,
  ) async {
    final List<GroceryItemWithCost> updatedItems = [];
    
    for (final item in items) {
      try {
        final priceData = await _priceService.getFoodPrice(item.name);
        
        if (priceData != null) {
          // T√≠nh gi√° m·ªõi d·ª±a tr√™n d·ªØ li·ªáu Firebase
          double pricePerUnit = 0.0;
          if (priceData.containsKey('price_per_kg')) {
            pricePerUnit = (priceData['price_per_kg'] as num).toDouble();
          } else if (priceData.containsKey('price_per_liter')) {
            pricePerUnit = (priceData['price_per_liter'] as num).toDouble();
          } else if (priceData.containsKey('price_per_unit')) {
            pricePerUnit = (priceData['price_per_unit'] as num).toDouble();
          }
          
          final amount = double.tryParse(item.amount) ?? 1.0;
          final estimatedCost = pricePerUnit * amount;
          
          updatedItems.add(GroceryItemWithCost(
            name: item.name,
            amount: item.amount,
            unit: priceData['unit'] ?? item.unit,
            category: priceData['category'] ?? item.category,
            estimatedCost: estimatedCost,
            pricePerUnit: pricePerUnit,
            isChecked: item.isChecked,
          ));
        } else {
          // Gi·ªØ nguy√™n item n·∫øu kh√¥ng t√¨m th·∫•y gi√°
          updatedItems.add(item);
        }
      } catch (e) {
        print('‚ùå L·ªói c·∫≠p nh·∫≠t gi√° cho ${item.name}: $e');
        updatedItems.add(item);
      }
    }
    
    return updatedItems;
  }

  /// T√≠nh to√°n ph√¢n t√≠ch theo danh m·ª•c
  Map<String, CategoryCostBreakdown> _calculateCategoryBreakdown(
    List<GroceryItemWithCost> items,
    double totalCost,
  ) {
    final Map<String, List<GroceryItemWithCost>> categoryItems = {};
    
    // Nh√≥m items theo danh m·ª•c
    for (final item in items) {
      final category = item.category.isNotEmpty ? item.category : 'Kh√°c';
      if (!categoryItems.containsKey(category)) {
        categoryItems[category] = [];
      }
      categoryItems[category]!.add(item);
    }
    
    // T√≠nh to√°n breakdown cho t·ª´ng danh m·ª•c
    final Map<String, CategoryCostBreakdown> breakdown = {};
    
    categoryItems.forEach((category, categoryItemList) {
      final categoryTotalCost = categoryItemList.fold<double>(
        0.0,
        (sum, item) => sum + item.estimatedCost,
      );
      
      final percentage = totalCost > 0 ? (categoryTotalCost / totalCost) * 100 : 0.0;
      final averageCostPerItem = categoryItemList.isNotEmpty 
          ? categoryTotalCost / categoryItemList.length 
          : 0.0;
      
      // T√¨m top 3 items ƒë·∫Øt nh·∫•t trong danh m·ª•c
      final sortedItems = List<GroceryItemWithCost>.from(categoryItemList)
        ..sort((a, b) => b.estimatedCost.compareTo(a.estimatedCost));
      final topExpensiveItems = sortedItems
          .take(3)
          .map((item) => '${item.name} (${_formatCurrency(item.estimatedCost)})')
          .toList();
      
      breakdown[category] = CategoryCostBreakdown(
        categoryName: category,
        totalCost: categoryTotalCost,
        percentage: percentage,
        itemCount: categoryItemList.length,
        averageCostPerItem: averageCostPerItem,
        topExpensiveItems: topExpensiveItems,
      );
    });
    
    return breakdown;
  }

  /// T·∫°o m·∫πo ti·∫øt ki·ªám chi ph√≠
  Future<List<CostSavingTip>> _generateSavingTips(
    List<GroceryItemWithCost> items,
    Map<String, CategoryCostBreakdown> categoryBreakdown,
  ) async {
    final List<CostSavingTip> tips = [];
    
    // M·∫πo d·ª±a tr√™n danh m·ª•c ƒë·∫Øt nh·∫•t
    final sortedCategories = categoryBreakdown.entries.toList()
      ..sort((a, b) => b.value.totalCost.compareTo(a.value.totalCost));
    
    if (sortedCategories.isNotEmpty) {
      final mostExpensiveCategory = sortedCategories.first;
      tips.add(CostSavingTip(
        title: 'Gi·∫£m chi ph√≠ ${mostExpensiveCategory.key}',
        description: 'Danh m·ª•c ${mostExpensiveCategory.key} chi·∫øm ${mostExpensiveCategory.value.percentage.toStringAsFixed(1)}% t·ªïng chi ph√≠. H√£y xem x√©t gi·∫£m b·ªõt ho·∫∑c t√¨m thay th·∫ø r·∫ª h∆°n.',
        potentialSaving: mostExpensiveCategory.value.totalCost * 0.2,
        category: mostExpensiveCategory.key,
        priority: 5,
      ));
    }
    
    // M·∫πo v·ªÅ items ƒë·∫Øt nh·∫•t
    final sortedItems = List<GroceryItemWithCost>.from(items)
      ..sort((a, b) => b.estimatedCost.compareTo(a.estimatedCost));
    
    if (sortedItems.isNotEmpty) {
      final mostExpensiveItem = sortedItems.first;
      tips.add(CostSavingTip(
        title: 'Xem x√©t thay th·∫ø ${mostExpensiveItem.name}',
        description: '${mostExpensiveItem.name} l√† m·∫∑t h√†ng ƒë·∫Øt nh·∫•t trong danh s√°ch (${_formatCurrency(mostExpensiveItem.estimatedCost)}). H√£y t√¨m ki·∫øm c√°c l·ª±a ch·ªçn thay th·∫ø.',
        potentialSaving: mostExpensiveItem.estimatedCost * 0.3,
        category: mostExpensiveItem.category,
        priority: 4,
      ));
    }
    
    // M·∫πo chung
    tips.addAll([
      CostSavingTip(
        title: 'Mua theo m√πa',
        description: 'Mua rau c·ªß qu·∫£ theo m√πa ƒë·ªÉ c√≥ gi√° t·ªët nh·∫•t v√† ch·∫•t l∆∞·ª£ng t∆∞∆°i ngon.',
        potentialSaving: items.where((item) => item.category.contains('Rau c·ªß qu·∫£')).fold<double>(0.0, (sum, item) => sum + item.estimatedCost) * 0.15,
        category: 'ü•¨ Rau c·ªß qu·∫£',
        priority: 3,
      ),
      CostSavingTip(
        title: 'So s√°nh gi√° nhi·ªÅu n∆°i',
        description: 'So s√°nh gi√° ·ªü c√°c ch·ª£, si√™u th·ªã kh√°c nhau ƒë·ªÉ t√¨m ƒë∆∞·ª£c gi√° t·ªët nh·∫•t.',
        potentialSaving: items.fold<double>(0.0, (sum, item) => sum + item.estimatedCost) * 0.1,
        category: 'T·ªïng qu√°t',
        priority: 2,
      ),
      CostSavingTip(
        title: 'Mua s·ªë l∆∞·ª£ng l·ªõn',
        description: 'V·ªõi c√°c m·∫∑t h√†ng kh√¥ng d·ªÖ h·ªèng, mua s·ªë l∆∞·ª£ng l·ªõn th∆∞·ªùng c√≥ gi√° t·ªët h∆°n.',
        potentialSaving: items.fold<double>(0.0, (sum, item) => sum + item.estimatedCost) * 0.05,
        category: 'T·ªïng qu√°t',
        priority: 1,
      ),
    ]);
    
    return tips;
  }

  /// T√≠nh to√°n so s√°nh ng√¢n s√°ch
  BudgetComparison _calculateBudgetComparison(double actualCost, double budgetLimit) {
    final difference = actualCost - budgetLimit;
    final isOverBudget = difference > 0;
    final percentageUsed = budgetLimit > 0 ? (actualCost / budgetLimit) * 100 : 0;
    
    return BudgetComparison(
      budgetLimit: budgetLimit,
      actualCost: actualCost,
      difference: difference,
      isOverBudget: isOverBudget,
      percentageUsed: percentageUsed,
    );
  }

  /// T·∫°o c·∫£nh b√°o gi√° c·∫£
  Future<List<PriceAlert>> _generatePriceAlerts(
    List<GroceryItemWithCost> items,
  ) async {
    final List<PriceAlert> alerts = [];
    
    try {
      final stats = await _priceService.getPriceStatistics();
      final categoryStats = stats['category_stats'] as Map<String, dynamic>? ?? {};
      
      for (final item in items) {
        final categoryData = categoryStats[item.category] as Map<String, dynamic>?;
        if (categoryData != null) {
          final averagePrice = categoryData['average'] as double? ?? 0.0;
          final currentPrice = item.pricePerUnit;
          final priceChange = ((currentPrice - averagePrice) / averagePrice) * 100;
          
          String alertType = 'normal';
          String message = '';
          
          if (priceChange > 20) {
            alertType = 'high';
            message = '${item.name} c√≥ gi√° cao h∆°n trung b√¨nh ${priceChange.toStringAsFixed(1)}%';
          } else if (priceChange < -20) {
            alertType = 'low';
            message = '${item.name} c√≥ gi√° th·∫•p h∆°n trung b√¨nh ${priceChange.abs().toStringAsFixed(1)}% - c∆° h·ªôi t·ªët!';
          }
          
          if (alertType != 'normal') {
            alerts.add(PriceAlert(
              itemName: item.name,
              currentPrice: currentPrice,
              averagePrice: averagePrice,
              priceChange: priceChange,
              alertType: alertType,
              message: message,
            ));
          }
        }
      }
    } catch (e) {
      print('‚ùå L·ªói t·∫°o c·∫£nh b√°o gi√°: $e');
    }
    
    return alerts;
  }

  /// Format currency
  String _formatCurrency(double amount) {
    return '${amount.toStringAsFixed(0).replaceAllMapped(
      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
      (Match m) => '${m[1]},',
    )}‚Ç´';
  }

  /// T·∫°o grocery list v·ªõi cost t·ª´ meal plan
  Future<List<GroceryItemWithCost>> createGroceryListFromMealPlan(
    Map<String, List<String>> mealPlan,
  ) async {
    final Map<String, double> ingredientAmounts = {};
    final Map<String, String> ingredientUnits = {};
    final Map<String, String> ingredientCategories = {};
    
    // T·ªïng h·ª£p ingredients t·ª´ meal plan
    for (final meals in mealPlan.values) {
      for (final meal in meals) {
        // TODO: Parse meal ƒë·ªÉ l·∫•y ingredients
        // ƒê√¢y l√† placeholder logic
        final ingredients = _parseMealIngredients(meal);
        for (final ingredient in ingredients.entries) {
          final name = ingredient.key;
          final amount = ingredient.value['amount'] as double;
          final unit = ingredient.value['unit'] as String;
          
          ingredientAmounts[name] = (ingredientAmounts[name] ?? 0.0) + amount;
          ingredientUnits[name] = unit;
          
          // L·∫•y category t·ª´ Firebase
          final priceData = await _priceService.getFoodPrice(name);
          if (priceData != null) {
            ingredientCategories[name] = priceData['category'] ?? 'Kh√°c';
          }
        }
      }
    }
    
    // T·∫°o grocery items v·ªõi cost
    final List<GroceryItemWithCost> groceryItems = [];
    for (final ingredient in ingredientAmounts.entries) {
      final name = ingredient.key;
      final amount = ingredient.value;
      final unit = ingredientUnits[name] ?? 'kg';
      final category = ingredientCategories[name] ?? 'Kh√°c';
      
      final estimatedCost = await _priceService.calculateEstimatedCost(name, amount);
      final priceData = await _priceService.getFoodPrice(name);
      
      double pricePerUnit = 0.0;
      if (priceData != null) {
        if (priceData.containsKey('price_per_kg')) {
          pricePerUnit = (priceData['price_per_kg'] as num).toDouble();
        } else if (priceData.containsKey('price_per_liter')) {
          pricePerUnit = (priceData['price_per_liter'] as num).toDouble();
        } else if (priceData.containsKey('price_per_unit')) {
          pricePerUnit = (priceData['price_per_unit'] as num).toDouble();
        }
      }
      
      groceryItems.add(GroceryItemWithCost(
        name: name,
        amount: amount.toString(),
        unit: unit,
        category: category,
        estimatedCost: estimatedCost,
        pricePerUnit: pricePerUnit,
      ));
    }
    
    return groceryItems;
  }

  /// Parse meal ƒë·ªÉ l·∫•y ingredients (placeholder)
  Map<String, Map<String, dynamic>> _parseMealIngredients(String meal) {
    // TODO: Implement proper meal parsing logic
    // ƒê√¢y l√† placeholder tr·∫£ v·ªÅ m·ªôt s·ªë ingredients m·∫´u
    return {
      'th·ªãt b√≤': {'amount': 0.5, 'unit': 'kg'},
      'c√† chua': {'amount': 0.3, 'unit': 'kg'},
      'h√†nh t√¢y': {'amount': 0.2, 'unit': 'kg'},
    };
  }
}
