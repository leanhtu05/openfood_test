import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/user_data_provider.dart' as udp;

/// Utility class ƒë·ªÉ debug v√† test gi√° tr·ªã c√¢n n·∫∑ng
class WeightDebugTester {
  
  /// Test v√† hi·ªÉn th·ªã t·∫•t c·∫£ gi√° tr·ªã c√¢n n·∫∑ng li√™n quan
  static void debugWeightValues(BuildContext context) {
    final userDataProvider = Provider.of<udp.UserDataProvider>(context, listen: false);
    
    print('=== üîç WEIGHT DEBUG TEST ===');
    print('UserDataProvider.weightKg: ${userDataProvider.weightKg} kg');
    print('UserDataProvider.targetWeightKg: ${userDataProvider.targetWeightKg} kg');
    print('UserDataProvider.goal: ${userDataProvider.goal}');
    print('UserDataProvider.pace: ${userDataProvider.pace} kg/tu·∫ßn');
    print('UserDataProvider.name: ${userDataProvider.name}');
    print('UserDataProvider.age: ${userDataProvider.age}');
    print('UserDataProvider.heightCm: ${userDataProvider.heightCm} cm');
    print('UserDataProvider.gender: ${userDataProvider.gender}');
    print('UserDataProvider.activityLevel: ${userDataProvider.activityLevel}');
    print('UserDataProvider.tdeeCalories: ${userDataProvider.tdeeCalories} kcal');
    print('=== END WEIGHT DEBUG ===');
  }
  
  /// Ki·ªÉm tra xem c√≥ s·ª± kh√°c bi·ªát gi·ªØa d·ªØ li·ªáu l∆∞u tr·ªØ v√† hi·ªÉn th·ªã kh√¥ng
  static Future<void> compareStoredVsDisplayedWeight(BuildContext context) async {
    final userDataProvider = Provider.of<udp.UserDataProvider>(context, listen: false);
    
    print('=== üîç WEIGHT COMPARISON TEST ===');
    
    // L·∫•y d·ªØ li·ªáu t·ª´ SharedPreferences
    await userDataProvider.loadUserData();
    
    print('Sau khi load t·ª´ SharedPreferences:');
    print('- weightKg: ${userDataProvider.weightKg} kg');
    print('- targetWeightKg: ${userDataProvider.targetWeightKg} kg');
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i 63.1 kg kh√¥ng
    if (userDataProvider.weightKg == 63.1) {
      print('‚úÖ C√¢n n·∫∑ng ƒê√öNG: 63.1 kg');
    } else {
      print('‚ùå C√¢n n·∫∑ng SAI: Expected 63.1 kg, Got ${userDataProvider.weightKg} kg');
    }
    
    print('=== END COMPARISON ===');
  }
  
  /// C·∫≠p nh·∫≠t c√¢n n·∫∑ng th√†nh 63.1 kg n·∫øu c·∫ßn
  static Future<void> fixWeightTo63Point1(BuildContext context) async {
    final userDataProvider = Provider.of<udp.UserDataProvider>(context, listen: false);
    
    print('=== üîß FIXING WEIGHT TO 63.1 KG ===');
    
    // C·∫≠p nh·∫≠t c√¢n n·∫∑ng
    userDataProvider.setWeight(63.1);
    
    // L∆∞u d·ªØ li·ªáu
    await userDataProvider.saveUserData();
    
    print('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c√¢n n·∫∑ng th√†nh 63.1 kg');
    print('Ki·ªÉm tra l·∫°i: ${userDataProvider.weightKg} kg');
    
    print('=== END FIX ===');
  }
  
  /// Widget ƒë·ªÉ hi·ªÉn th·ªã debug info tr·ª±c ti·∫øp tr√™n UI
  static Widget buildDebugWidget(BuildContext context) {
    return Consumer<udp.UserDataProvider>(
      builder: (context, userDataProvider, child) {
        return Container(
          padding: EdgeInsets.all(16),
          margin: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.yellow[100],
            border: Border.all(color: Colors.orange),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'üîç WEIGHT DEBUG INFO',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                  color: Colors.red[700],
                ),
              ),
              SizedBox(height: 8),
              Text('Current Weight: ${userDataProvider.weightKg} kg'),
              Text('Target Weight: ${userDataProvider.targetWeightKg} kg'),
              Text('Goal: ${userDataProvider.goal}'),
              Text('Pace: ${userDataProvider.pace} kg/week'),
              Text('TDEE: ${userDataProvider.tdeeCalories} kcal'),
              SizedBox(height: 8),
              Row(
                children: [
                  ElevatedButton(
                    onPressed: () => debugWeightValues(context),
                    child: Text('Debug Log'),
                  ),
                  SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () => compareStoredVsDisplayedWeight(context),
                    child: Text('Compare'),
                  ),
                  SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: () => fixWeightTo63Point1(context),
                    child: Text('Fix to 63.1'),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }
}
