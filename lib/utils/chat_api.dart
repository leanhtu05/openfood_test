import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';

class ChatMessage {
  String id; // ƒê√£ b·ªè final ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã
  final String text;
  final bool isUser;
  final String timestamp;
  String chatId; // ƒê√£ b·ªè final ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã

  ChatMessage({
    required this.id,
    required this.text,
    required this.isUser,
    required this.timestamp,
    required this.chatId,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'text': text,
      'isUser': isUser,
      'timestamp': timestamp,
      'chatId': chatId,
    };
  }

  factory ChatMessage.fromJson(Map<String, dynamic> json) {
    return ChatMessage(
      id: json['id'],
      text: json['text'],
      isUser: json['isUser'],
      timestamp: json['timestamp'],
      chatId: json['chatId'],
    );
  }
}

class ChatConversation {
  String id; // ƒê√£ b·ªè final ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã
  String title;
  final String createdAt;
  final String userId;
  final List<ChatMessage> messages;

  ChatConversation({
    required this.id,
    required this.title,
    required this.createdAt,
    required this.userId,
    required this.messages,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'createdAt': createdAt,
      'userId': userId,
      'messages': messages.map((m) => m.toJson()).toList(),
    };
  }

  factory ChatConversation.fromJson(Map<String, dynamic> json) {
    return ChatConversation(
      id: json['id'],
      title: json['title'],
      createdAt: json['createdAt'],
      userId: json['userId'],
      messages: (json['messages'] as List)
          .map((m) => ChatMessage.fromJson(m))
          .toList(),
    );
  }
}

class ChatApi {
  static const String baseUrl = 'https://backend-openfood.onrender.com';
  static const String localStorageKey = 'chat_conversations';
  static const String currentConversationKey = 'current_conversation_id';
  static const String authTokenKey = 'firebase_id_token';
  
  /// L·∫•y token x√°c th·ª±c t·ª´ SharedPreferences ho·∫∑c Firebase Auth
  static Future<String?> _getAuthToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString(authTokenKey);
      
      // N·∫øu kh√¥ng c√≥ token ho·∫∑c token qu√° c≈©, l·∫•y token m·ªõi
      if (token == null) {
        // L·∫•y token m·ªõi t·ª´ Firebase n·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
        final currentUser = FirebaseAuth.instance.currentUser;
        if (currentUser != null) {
          token = await currentUser.getIdToken(true);
          // L∆∞u token m·ªõi
          await prefs.setString(authTokenKey, token ?? '');
        }
      }
      
      return token;
    } catch (e) {
      print('L·ªói khi l·∫•y auth token: $e');
      return null;
    }
  }
  
  /// L∆∞u token x√°c th·ª±c v√†o SharedPreferences
  static Future<void> saveAuthToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(authTokenKey, token);
      print('ƒê√£ l∆∞u auth token');
    } catch (e) {
      print('L·ªói khi l∆∞u auth token: $e');
    }
  }

  /// L√†m m·ªõi token x√°c th·ª±c n·∫øu token hi·ªán t·∫°i ƒë√£ h·∫øt h·∫°n
  static Future<String?> _refreshAuthToken() async {
    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser != null) {
        // C·∫ßn l√†m m·ªõi token
        final newToken = await currentUser.getIdToken(true);
        if (newToken != null && newToken.isNotEmpty) {
          // L∆∞u token m·ªõi
          await saveAuthToken(newToken);
          print('‚úÖ ƒê√£ l√†m m·ªõi token x√°c th·ª±c');
          return newToken;
        }
      }
      return null;
    } catch (e) {
      print('‚ùå L·ªói khi l√†m m·ªõi token: $e');
      return null;
    }
  }
  
  /// X·ª≠ l√Ω ph·∫£n h·ªìi API v·ªõi kh·∫£ nƒÉng l√†m m·ªõi token
  static Future<http.Response> _handleApiResponse({
    required Future<http.Response> Function() apiCall,
    required Future<http.Response> Function(String) retryWithToken,
  }) async {
    try {
      // G·ªçi API v·ªõi token hi·ªán t·∫°i
      final response = await apiCall();
      
      // Ki·ªÉm tra n·∫øu token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
      if (response.statusCode == 401 || response.statusCode == 403) {
        print('üîë Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá, ƒëang l√†m m·ªõi...');
        final newToken = await _refreshAuthToken();
        
        if (newToken != null) {
          // Th·ª≠ l·∫°i v·ªõi token m·ªõi
          return await retryWithToken(newToken);
        }
      }
      
      return response;
    } catch (e) {
      print('‚ùå L·ªói khi x·ª≠ l√Ω API: $e');
      rethrow;
    }
  }

  /// G·ª≠i tin nh·∫Øn ƒë·∫øn server v√† nh·∫≠n ph·∫£n h·ªìi
  static Future<Map<String, dynamic>> sendMessage(String message, String userId) async {
    final String messageId = const Uuid().v4();
    final DateTime now = DateTime.now();
    final String timestamp = now.toIso8601String();
    
    // L·∫•y ho·∫∑c t·∫°o cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
    final currentConversation = await _getCurrentConversation(userId);
    final String chatId = currentConversation.id;
    
    // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o cu·ªôc tr√≤ chuy·ªán c·ª•c b·ªô
    final userMessage = ChatMessage(
      id: messageId,
      text: message,
      isUser: true,
      timestamp: timestamp,
      chatId: chatId,
    );
    
    await _addMessageToLocalConversation(currentConversation, userMessage);
    
    try {
      // L·∫•y token x√°c th·ª±c
      final String? authToken = await _getAuthToken();
      
      // Chu·∫©n b·ªã headers
      final Map<String, String> headers = {
        'Content-Type': 'application/json; charset=UTF-8',
      };
      
      // Th√™m token v√†o header n·∫øu c√≥
      if (authToken != null && authToken.isNotEmpty) {
        headers['Authorization'] = 'Bearer $authToken';
        print('ƒê√£ th√™m token x√°c th·ª±c v√†o request');
      } else {
        print('Kh√¥ng c√≥ token x√°c th·ª±c');
      }
      
      print('üî∑ G·ª≠i request ƒë·∫øn $baseUrl/chat v·ªõi message: ${message.substring(0, message.length > 20 ? 20 : message.length)}...');
      
      // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω API v·ªõi kh·∫£ nƒÉng l√†m m·ªõi token
      final response = await _handleApiResponse(
        apiCall: () => http.post(
          Uri.parse('$baseUrl/chat'),
          headers: headers,
          body: jsonEncode({
            'message': message,
            'user_id': userId,
            'chat_id': chatId,
          }),
        ).timeout(const Duration(seconds: 90)),  // TƒÉng timeout l√™n 90 gi√¢y
        retryWithToken: (newToken) => http.post(
          Uri.parse('$baseUrl/chat'),
          headers: {
            'Content-Type': 'application/json; charset=UTF-8',
            'Authorization': 'Bearer $newToken',
          },
          body: jsonEncode({
            'message': message,
            'user_id': userId,
            'chat_id': chatId,
          }),
        ).timeout(const Duration(seconds: 90)),  // TƒÉng timeout l√™n 90 gi√¢y
      );

      print('üî∑ Nh·∫≠n response v·ªõi status: ${response.statusCode}');
      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        print('üî∑ Response data: $data');
        
        final String botReply = data['reply'] ?? 'Kh√¥ng c√≥ ph·∫£n h·ªìi';
        final String serverChatId = data['chat_id'] ?? messageId;
        
        print('üì© Nh·∫≠n ph·∫£n h·ªìi t·ª´ server v·ªõi chat_id: $serverChatId');
        print('üì© N·ªôi dung ph·∫£n h·ªìi: ${botReply.substring(0, botReply.length > 50 ? 50 : botReply.length)}...');
        
        // Th√™m ph·∫£n h·ªìi bot v√†o cu·ªôc tr√≤ chuy·ªán c·ª•c b·ªô
        final botMessage = ChatMessage(
          id: const Uuid().v4(),
          text: botReply,
          isUser: false,
          timestamp: DateTime.now().toIso8601String(),
          chatId: serverChatId,
        );
        
        await _addMessageToLocalConversation(currentConversation, botMessage);
        
        return {
          'reply': botReply,
          'chat_id': serverChatId,
          'error': false,
        };
      } else {
        print('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn: ${response.statusCode}');
        print('üìÉ N·ªôi dung ph·∫£n h·ªìi: ${response.body}');
        
        return {
          'reply': 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau.',
          'error': true,
          'error_code': response.statusCode,
          'error_message': response.body,
        };
      }
    } catch (e) {
      print('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn: $e');
      
      return {
        'reply': 'Xin l·ªói, c√≥ l·ªói x·∫£y ra: $e',
        'error': true,
        'error_message': e.toString(),
      };
    }
  }

  /// L·∫•y l·ªãch s·ª≠ chat t·ª´ server
  static Future<List<dynamic>> getChatHistory(String userId, {int limit = 20}) async {
    try {
      // L·∫•y token x√°c th·ª±c
      final String? authToken = await _getAuthToken();
      
      // Chu·∫©n b·ªã headers
      final Map<String, String> headers = {};
      
      // Th√™m token v√†o header n·∫øu c√≥
      if (authToken != null && authToken.isNotEmpty) {
        headers['Authorization'] = 'Bearer $authToken';
      }
      
      // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω API v·ªõi kh·∫£ nƒÉng l√†m m·ªõi token
      final response = await _handleApiResponse(
        apiCall: () => http.get(
          Uri.parse('$baseUrl/chat/history?user_id=$userId&limit=$limit'),
          headers: headers,
        ).timeout(const Duration(seconds: 10)),
        retryWithToken: (newToken) => http.get(
          Uri.parse('$baseUrl/chat/history?user_id=$userId&limit=$limit'),
          headers: {'Authorization': 'Bearer $newToken'},
        ).timeout(const Duration(seconds: 10)),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        return data['history'] ?? [];
      } else {
        print('L·ªói API l·ªãch s·ª≠: ${response.statusCode} - ${response.body.substring(0, response.body.length > 200 ? 200 : response.body.length)}...');
        // N·∫øu server l·ªói, l·∫•y l·ªãch s·ª≠ t·ª´ local storage
        return await _getLocalHistory(userId);
      }
    } catch (e) {
      print('L·ªói khi l·∫•y l·ªãch s·ª≠: $e');
      // N·∫øu c√≥ l·ªói k·∫øt n·ªëi, l·∫•y l·ªãch s·ª≠ t·ª´ local storage
      return await _getLocalHistory(userId);
    }
  }
  
  /// L·∫•y l·ªãch s·ª≠ chat m·ªõi nh·∫•t t·ª´ Firebase v√† ƒë·ªìng b·ªô v·ªõi local storage
  static Future<List<Map<String, dynamic>>> getLatestChatHistory(String userId) async {
    try {
      print('üîç L·∫•y l·ªãch s·ª≠ chat t·ª´ Firebase cho ng∆∞·ªùi d√πng: $userId');
      
      // Truy c·∫≠p Firestore
      final FirebaseFirestore firestore = FirebaseFirestore.instance;
      
      // Truy v·∫•n collection chat_history, l·ªçc theo user_id
      final QuerySnapshot querySnapshot = await firestore
          .collection('chat_history')
          .where('user_id', isEqualTo: userId)
          .orderBy('timestamp', descending: true)
          .limit(20)
          .get();
      
      // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh danh s√°ch
      final List<Map<String, dynamic>> history = querySnapshot.docs
          .map((doc) {
            final data = doc.data() as Map<String, dynamic>;
            // Th√™m id c·ªßa document v√†o d·ªØ li·ªáu
            return {
              'id': doc.id,
              'user_message': data['user_message'] ?? '',
              'ai_reply': data['ai_reply'] ?? '',
              'timestamp': data['timestamp'] ?? DateTime.now().toIso8601String(),
            };
          })
          .toList();
      
      print('üì• Nh·∫≠n ƒë∆∞·ª£c ${history.length} tin nh·∫Øn t·ª´ Firebase');
      
      if (history.isEmpty) {
        print('‚ö†Ô∏è Kh√¥ng c√≥ l·ªãch s·ª≠ chat t·ª´ Firebase');
        return [];
      }
      
      // L·∫•y cu·ªôc tr√≤ chuy·ªán local
      final List<ChatConversation> localConversations = await _getLocalConversations();
      
      // ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ Firebase v√†o local storage
      final Map<String, ChatConversation> conversationMap = {};
      
      // T·∫°o m·ªôt map c·ªßa c√°c cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
      for (final conv in localConversations) {
        if (conv.userId == userId) {
          conversationMap[conv.id] = conv;
        }
      }
      
      // ƒê·ªìng b·ªô t·ª´ng tin nh·∫Øn t·ª´ Firebase
      for (final item in history) {
        final String chatId = item['id'];
        final String userMessage = item['user_message'];
        final String aiReply = item['ai_reply'];
        final String timestamp = item['timestamp'];
        
        // Ki·ªÉm tra xem c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë√£ c√≥ chatId n√†y kh√¥ng
        bool foundConversation = false;
        
        // T√¨m ki·∫øm trong c√°c cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
        for (final conv in localConversations) {
          if (conv.userId != userId) continue;
          
          // T√¨m ki·∫øm tin nh·∫Øn c√≥ ID kh·ªõp
          bool foundMessage = false;
          for (final msg in conv.messages) {
            if (msg.chatId == chatId) {
              foundMessage = true;
              foundConversation = true;
              break;
            }
          }
          
          if (foundMessage) break;
        }
        
        // N·∫øu ch∆∞a c√≥, t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
        if (!foundConversation) {
          print('üÜï T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi t·ª´ chatId: $chatId');
          
          final newConversation = ChatConversation(
            id: chatId,
            title: userMessage.length > 40 ? userMessage.substring(0, 37) + '...' : userMessage,
            createdAt: timestamp,
            userId: userId,
            messages: [
              // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
              ChatMessage(
                id: const Uuid().v4(),
                text: userMessage,
                isUser: true,
                timestamp: timestamp,
                chatId: chatId,
              ),
              // Th√™m ph·∫£n h·ªìi AI
              ChatMessage(
                id: const Uuid().v4(),
                text: aiReply,
                isUser: false,
                timestamp: timestamp,
                chatId: chatId,
              ),
            ],
          );
          
          // Th√™m v√†o danh s√°ch local
          localConversations.add(newConversation);
          print('‚úÖ ƒê√£ th√™m cu·ªôc tr√≤ chuy·ªán m·ªõi: $chatId');
        }
      }
      
      // L∆∞u l·∫°i v√†o local storage
      await _saveLocalConversations(localConversations);
      print('üíæ ƒê√£ l∆∞u ${localConversations.length} cu·ªôc tr√≤ chuy·ªán v√†o local storage');
      
      return history;
    } catch (e) {
      print('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat t·ª´ Firebase: $e');
      return [];
    }
  }
  
  /// L∆∞u cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
  static Future<void> _saveCurrentConversationId(String conversationId) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(currentConversationKey, conversationId);
  }
  
  /// L·∫•y ID cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
  static Future<String?> getCurrentConversationId() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(currentConversationKey);
  }
  
  /// L·∫•y ho·∫∑c t·∫°o cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i
  static Future<ChatConversation> _getCurrentConversation(String userId) async {
    final String? currentId = await getCurrentConversationId();
    final List<ChatConversation> conversations = await _getLocalConversations();
    
    print('üîç ƒêang t√¨m cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i v·ªõi ID: $currentId');
    
    // L·ªçc theo userId
    final List<ChatConversation> userConversations = conversations
        .where((conv) => conv.userId == userId)
        .toList();
    
    print('üìä T√¨m th·∫•y ${userConversations.length} cu·ªôc tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng $userId');
    
    // T√¨m cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i n·∫øu c√≥
    if (currentId != null && currentId.isNotEmpty) {
      final List<ChatConversation> existingConversation = userConversations
          .where((conv) => conv.id == currentId)
          .toList();
      
      if (existingConversation.isNotEmpty) {
        print('‚úÖ ƒê√£ t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i v·ªõi ID: $currentId');
        return existingConversation.first;
      } else {
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán v·ªõi ID: $currentId');
        
        // Ki·ªÉm tra xem c√≥ tin nh·∫Øn n√†o c√≥ chatId tr√πng v·ªõi currentId kh√¥ng
        for (final conversation in userConversations) {
          for (final message in conversation.messages) {
            if (message.chatId == currentId) {
              print('üîÑ T√¨m th·∫•y tin nh·∫Øn c√≥ chatId = $currentId trong cu·ªôc tr√≤ chuy·ªán ${conversation.id}');
              print('üîÑ ƒê·ªìng b·ªô ID cu·ªôc tr√≤ chuy·ªán...');
              
              // C·∫≠p nh·∫≠t ID cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ kh·ªõp v·ªõi chatId t·ª´ server
              conversation.id = currentId;
              
              // C·∫≠p nh·∫≠t t·∫•t c·∫£ tin nh·∫Øn ƒë·ªÉ c√≥ c√πng chatId
              for (var msg in conversation.messages) {
                msg.chatId = currentId;
              }
              
              // L∆∞u l·∫°i thay ƒë·ªïi
              await _saveLocalConversations(conversations);
              print('‚úÖ ƒê√£ ƒë·ªìng b·ªô ID cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng');
              
              return conversation;
            }
          }
        }
      }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i nh∆∞ng c√≥ cu·ªôc tr√≤ chuy·ªán c·ªßa ng∆∞·ªùi d√πng, l·∫•y cu·ªôc tr√≤ chuy·ªán m·ªõi nh·∫•t
    if (userConversations.isNotEmpty) {
      // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
      userConversations.sort((a, b) => 
          DateTime.parse(b.createdAt).compareTo(DateTime.parse(a.createdAt)));
      
      final newestConversation = userConversations.first;
      print('üîÑ S·ª≠ d·ª•ng cu·ªôc tr√≤ chuy·ªán m·ªõi nh·∫•t: ${newestConversation.id}');
      
      // L∆∞u ID cu·ªôc tr√≤ chuy·ªán m·ªõi nh·∫•t
      await _saveCurrentConversationId(newestConversation.id);
      
      return newestConversation;
    }
    
    // T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y
    final DateTime now = DateTime.now();
    final String chatId = 'chat_${now.millisecondsSinceEpoch}';
    
    print('üÜï T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi v·ªõi ID: $chatId');
    
    final newConversation = ChatConversation(
      id: chatId,
      title: 'Cu·ªôc tr√≤ chuy·ªán m·ªõi',
      createdAt: now.toIso8601String(),
      userId: userId,
      messages: [],
    );
    
    // L∆∞u ID cu·ªôc tr√≤ chuy·ªán m·ªõi
    await _saveCurrentConversationId(chatId);
    
    // Th√™m v√†o danh s√°ch v√† l∆∞u
    conversations.add(newConversation);
    await _saveLocalConversations(conversations);
    
    return newConversation;
  }
  
  /// T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
  static Future<ChatConversation> createNewConversation(String userId, {String? title}) async {
    final DateTime now = DateTime.now();
    final String chatId = 'chat_${now.millisecondsSinceEpoch}';
    
    final newConversation = ChatConversation(
      id: chatId,
      title: title ?? 'Cu·ªôc tr√≤ chuy·ªán m·ªõi',
      createdAt: now.toIso8601String(),
      userId: userId,
      messages: [],
    );
    
    // L∆∞u ID cu·ªôc tr√≤ chuy·ªán m·ªõi
    await _saveCurrentConversationId(chatId);
    
    // Th√™m v√†o danh s√°ch v√† l∆∞u
    final conversations = await _getLocalConversations();
    conversations.add(newConversation);
    await _saveLocalConversations(conversations);
    
    return newConversation;
  }
  
  /// Ch·ªçn cu·ªôc tr√≤ chuy·ªán
  static Future<void> selectConversation(String conversationId) async {
    await _saveCurrentConversationId(conversationId);
  }
  
  /// Th√™m tin nh·∫Øn v√†o cu·ªôc tr√≤ chuy·ªán c·ª•c b·ªô
  static Future<void> _addMessageToLocalConversation(
    ChatConversation conversation,
    ChatMessage message,
  ) async {
    // L∆∞u l·∫°i ID c≈© ƒë·ªÉ ki·ªÉm tra s·ª± thay ƒë·ªïi
    final String oldChatId = conversation.id;
    
    // C·∫≠p nh·∫≠t danh s√°ch tin nh·∫Øn
    conversation.messages.add(message);
    
    // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c tin nh·∫Øn trong cu·ªôc h·ªôi tho·∫°i c√≥ c√πng chatId
    if (conversation.messages.length > 1 && message.chatId != conversation.id) {
      print('‚ö†Ô∏è Ph√°t hi·ªán chatId kh√¥ng kh·ªõp: ${message.chatId} vs ${conversation.id}');
      print('‚úÖ ƒê·ªìng b·ªô h√≥a chatId cho t·∫•t c·∫£ tin nh·∫Øn trong cu·ªôc h·ªôi tho·∫°i');
      // D√πng chatId t·ª´ server cho t·∫•t c·∫£ tin nh·∫Øn
      for (var msg in conversation.messages) {
        msg.chatId = message.chatId;
      }
      // C·∫≠p nh·∫≠t ID c·ªßa cu·ªôc tr√≤ chuy·ªán
      if (!message.isUser) { // Ch·ªâ c·∫≠p nh·∫≠t khi l√† tin nh·∫Øn t·ª´ AI (ƒë√£ c√≥ chatId t·ª´ server)
        conversation.id = message.chatId;
        // C·∫≠p nh·∫≠t ID hi·ªán t·∫°i
        _saveCurrentConversationId(message.chatId);
      }
    }
    
    // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ cu·ªôc tr√≤ chuy·ªán n·∫øu l√† tin nh·∫Øn ƒë·∫ßu ti√™n v√† l√† tin nh·∫Øn ng∆∞·ªùi d√πng
    if (conversation.messages.length == 1 && message.isUser) {
      final String newTitle = message.text.length > 40 
          ? message.text.substring(0, 37) + '...'
          : message.text;
      
      conversation.title = newTitle;
    }
    
    // L∆∞u l·∫°i v√†o storage
    final List<ChatConversation> conversations = await _getLocalConversations();
    
    // T√¨m v√† c·∫≠p nh·∫≠t cu·ªôc tr√≤ chuy·ªán
    final int index = conversations.indexWhere((c) => c.id == oldChatId);
    if (index >= 0) {
      conversations[index] = conversation;
    } else {
      conversations.add(conversation);
    }
    
    await _saveLocalConversations(conversations);
    print('‚úÖ ƒê√£ l∆∞u cu·ªôc tr√≤ chuy·ªán v·ªõi ID: ${conversation.id}');
    
    // Th√¥ng b√°o n·∫øu chatId ƒë√£ thay ƒë·ªïi
    if (oldChatId != conversation.id) {
      print('üîÑ ChatID ƒë√£ thay ƒë·ªïi t·ª´ $oldChatId th√†nh ${conversation.id}');
    }
  }
  
  /// L·∫•y t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán t·ª´ local storage
  static Future<List<ChatConversation>> _getLocalConversations() async {
    final prefs = await SharedPreferences.getInstance();
    final String? data = prefs.getString(localStorageKey);
    
    if (data == null) {
      return [];
    }
    
    try {
      final List<dynamic> jsonList = jsonDecode(data);
      return jsonList.map((json) => ChatConversation.fromJson(json)).toList();
    } catch (e) {
      print('L·ªói khi ƒë·ªçc l·ªãch s·ª≠ chat t·ª´ local storage: $e');
      return [];
    }
  }
  
  /// L∆∞u t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán v√†o local storage
  static Future<void> _saveLocalConversations(List<ChatConversation> conversations) async {
    final prefs = await SharedPreferences.getInstance();
    final jsonList = conversations.map((conv) => conv.toJson()).toList();
    await prefs.setString(localStorageKey, jsonEncode(jsonList));
  }
  
  /// L·∫•y l·ªãch s·ª≠ chat t·ª´ local storage theo ƒë·ªãnh d·∫°ng t∆∞∆°ng th√≠ch v·ªõi API
  static Future<List<dynamic>> _getLocalHistory(String userId) async {
    final List<ChatConversation> conversations = await _getLocalConversations();
    
    if (conversations.isEmpty) {
      return [];
    }
    
    // L·ªçc cu·ªôc h·ªôi tho·∫°i theo userId
    final userConversations = conversations
        .where((conv) => conv.userId == userId)
        .toList();
    
    if (userConversations.isEmpty) {
      return [];
    }
    
    // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng
    final List<Map<String, dynamic>> result = [];
    
    for (final conversation in userConversations) {
      for (int i = 0; i < conversation.messages.length; i += 2) {
        if (i + 1 < conversation.messages.length) {
          final userMsg = conversation.messages[i];
          final botMsg = conversation.messages[i + 1];
          
          result.add({
            'user_message': userMsg.text,
            'ai_reply': botMsg.text,
            'timestamp': userMsg.timestamp,
            'id': userMsg.id,
          });
        }
      }
    }
    
    return result;
  }
  
  /// L·∫•y t·∫•t c·∫£ cu·ªôc tr√≤ chuy·ªán
  static Future<List<ChatConversation>> getAllConversations(String userId) async {
    final List<ChatConversation> conversations = await _getLocalConversations();
    
    // L·ªçc theo userId
    return conversations
        .where((conv) => conv.userId == userId)
        .toList()
        // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
        ..sort((a, b) => 
            DateTime.parse(b.createdAt).compareTo(DateTime.parse(a.createdAt)));
  }
  
  /// X√≥a cu·ªôc tr√≤ chuy·ªán
  static Future<void> deleteConversation(String conversationId) async {
    final List<ChatConversation> conversations = await _getLocalConversations();
    
    // L·ªçc b·ªè cu·ªôc tr√≤ chuy·ªán c·∫ßn x√≥a
    final filteredConversations = conversations
        .where((conv) => conv.id != conversationId)
        .toList();
    
    await _saveLocalConversations(filteredConversations);
    
    // N·∫øu x√≥a cu·ªôc tr√≤ chuy·ªán hi·ªán t·∫°i, t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
    final currentId = await getCurrentConversationId();
    if (currentId == conversationId && filteredConversations.isNotEmpty) {
      await _saveCurrentConversationId(filteredConversations.first.id);
    }
  }
  
  /// Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn server
  static Future<bool> checkConnection() async {
    try {
      final response = await http.get(Uri.parse('$baseUrl/api-status'))
          .timeout(const Duration(seconds: 5));
      return response.statusCode >= 200 && response.statusCode < 300;
    } catch (e) {
      print('L·ªói khi ki·ªÉm tra k·∫øt n·ªëi: $e');
      return false;
    }
  }

  /// Stream ƒë·ªÉ l·∫Øng nghe c√°c tin nh·∫Øn chat m·ªõi t·ª´ Firestore
  static Stream<List<Map<String, dynamic>>> streamChatMessages(String userId) {
    try {
      final FirebaseFirestore firestore = FirebaseFirestore.instance;
      
      // T·∫°o query l·∫Øng nghe collection chat_history, l·ªçc theo user_id
      return firestore
          .collection('chat_history')
          .where('user_id', isEqualTo: userId)
          .orderBy('timestamp', descending: true)
          .limit(20)
          .snapshots()
          .map((snapshot) {
            // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ snapshot th√†nh danh s√°ch Map
            return snapshot.docs.map((doc) {
              final data = doc.data() as Map<String, dynamic>;
              return {
                'id': doc.id,
                'user_message': data['user_message'] ?? '',
                'ai_reply': data['ai_reply'] ?? '',
                'timestamp': data['timestamp'] ?? DateTime.now().toIso8601String(),
                'user_id': data['user_id'] ?? userId,
              };
            }).toList();
          });
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o stream chat messages: $e');
      // Tr·∫£ v·ªÅ stream r·ªóng trong tr∆∞·ªùng h·ª£p l·ªói
      return Stream.value([]);
    }
  }
  
  /// Stream ƒë·ªÉ l·∫Øng nghe m·ªôt cu·ªôc tr√≤ chuy·ªán c·ª• th·ªÉ
  static Stream<Map<String, dynamic>?> streamChatById(String chatId) {
    try {
      final FirebaseFirestore firestore = FirebaseFirestore.instance;
      
      // L·∫Øng nghe document c·ª• th·ªÉ v·ªõi ID l√† chatId
      return firestore
          .collection('chat_history')
          .doc(chatId)
          .snapshots()
          .map((snapshot) {
            if (snapshot.exists) {
              final data = snapshot.data() as Map<String, dynamic>;
              return {
                'id': snapshot.id,
                'user_message': data['user_message'] ?? '',
                'ai_reply': data['ai_reply'] ?? '',
                'timestamp': data['timestamp'] ?? DateTime.now().toIso8601String(),
                'user_id': data['user_id'] ?? '',
              };
            } else {
              return null;
            }
          });
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o stream chat by ID: $e');
      // Tr·∫£ v·ªÅ stream r·ªóng trong tr∆∞·ªùng h·ª£p l·ªói
      return Stream.value(null);
    }
  }

  /// Ph∆∞∆°ng th·ª©c public ƒë·ªÉ l∆∞u cu·ªôc tr√≤ chuy·ªán
  static Future<void> saveConversations(List<ChatConversation> conversations) async {
    await _saveLocalConversations(conversations);
  }
} 