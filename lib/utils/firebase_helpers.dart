import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';

/// Helper class ƒë·ªÉ x·ª≠ l√Ω c√°c v·∫•n ƒë·ªÅ ph·ªï bi·∫øn v·ªõi Firebase
class FirebaseHelpers {
  /// Chuy·ªÉn ƒë·ªïi an to√†n gi√° tr·ªã sang Timestamp
  /// H·ªó tr·ª£: Timestamp, String, DateTime, int (milliseconds)
  static Timestamp? toTimestamp(dynamic value) {
    if (value == null) {
      return null;
    }
    
    try {
      if (value is Timestamp) {
        return value;
      } else if (value is String) {
        try {
          final dateTime = DateTime.parse(value);
          return Timestamp.fromDate(dateTime);
        } catch (e) {
          debugPrint('‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi String sang Timestamp: $e');
          return null;
        }
      } else if (value is DateTime) {
        return Timestamp.fromDate(value);
      } else if (value is int) {
        // Gi·∫£ s·ª≠ ƒë√¢y l√† milliseconds since epoch
        return Timestamp.fromMillisecondsSinceEpoch(value);
      } else {
        debugPrint('‚ùå Kh√¥ng h·ªó tr·ª£ ki·ªÉu d·ªØ li·ªáu ${value.runtimeType} cho chuy·ªÉn ƒë·ªïi sang Timestamp');
        return null;
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi sang Timestamp: $e');
      return null;
    }
  }
  
  /// Chuy·ªÉn ƒë·ªïi an to√†n gi√° tr·ªã sang DateTime
  /// H·ªó tr·ª£: Timestamp, String, DateTime, int (milliseconds)
  static DateTime? toDateTime(dynamic value) {
    if (value == null) {
      return null;
    }
    
    try {
      if (value is DateTime) {
        return value;
      } else if (value is Timestamp) {
        return value.toDate();
      } else if (value is String) {
        try {
          return DateTime.parse(value);
        } catch (e) {
          debugPrint('‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi String sang DateTime: $e');
          return null;
        }
      } else if (value is int) {
        // Gi·∫£ s·ª≠ ƒë√¢y l√† milliseconds since epoch
        return DateTime.fromMillisecondsSinceEpoch(value);
      } else {
        debugPrint('‚ùå Kh√¥ng h·ªó tr·ª£ ki·ªÉu d·ªØ li·ªáu ${value.runtimeType} cho chuy·ªÉn ƒë·ªïi sang DateTime');
        return null;
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi sang DateTime: $e');
      return null;
    }
  }
  
  /// Chuy·ªÉn ƒë·ªïi an to√†n gi√° tr·ªã sang String ISO8601
  /// H·ªó tr·ª£: Timestamp, String, DateTime, int (milliseconds)
  static String? toISOString(dynamic value) {
    if (value == null) {
      return null;
    }
    
    final dateTime = toDateTime(value);
    return dateTime?.toIso8601String();
  }
  
  /// Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu Firebase tr∆∞·ªõc khi s·ª≠ d·ª•ng
  /// X·ª≠ l√Ω c√°c v·∫•n ƒë·ªÅ ph·ªï bi·∫øn nh∆∞ Timestamp vs String
  static Map<String, dynamic> processFirestoreData(Map<String, dynamic> data) {
    final result = Map<String, dynamic>.from(data);
    
    // Danh s√°ch c√°c tr∆∞·ªùng th∆∞·ªùng l√† timestamp
    final timestampFields = [
      'created_at',
      'updated_at',
      'lastSyncTime',
      'last_login',
      'last_updated',
      'timestamp',
      'createdAt',
      'updatedAt',
      'lastLoginAt',
      'created_date',
      'update_date',
      'last_sync',
    ];
    
    // X·ª≠ l√Ω c√°c tr∆∞·ªùng th·ªùi gian
    for (final field in timestampFields) {
      if (result.containsKey(field)) {
        final dateTime = toDateTime(result[field]);
        if (dateTime != null) {
          // L∆∞u l·∫°i d∆∞·ªõi d·∫°ng DateTime ƒë·ªÉ d·ªÖ x·ª≠ l√Ω trong ·ª©ng d·ª•ng
          result[field] = dateTime;
        }
      }
    }
    
    return result;
  }
  
  /// Chu·∫©n b·ªã d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i l√™n Firestore
  /// Chuy·ªÉn ƒë·ªïi c√°c tr∆∞·ªùng th·ªùi gian th√†nh ƒë·ªãnh d·∫°ng chu·ªói ISO8601 ƒë·ªÉ c√≥ th·ªÉ encode JSON
  static Map<String, dynamic> prepareDataForFirestore(Map<String, dynamic> data) {
    final result = Map<String, dynamic>.from(data);
    
    // X·ª≠ l√Ω t·∫•t c·∫£ c√°c gi√° tr·ªã map l·ªìng nhau tr∆∞·ªõc
    result.forEach((key, value) {
      if (value is Map<String, dynamic>) {
        result[key] = prepareDataForFirestore(value);
      } else if (value is List) {
        result[key] = _prepareListForJson(value);
      }
    });
    
    // Danh s√°ch c√°c tr∆∞·ªùng th∆∞·ªùng l√† timestamp
    final timestampFields = [
      'created_at',
      'updated_at',
      'lastSyncTime',
      'last_login',
      'last_updated',
      'timestamp',
      'createdAt',
      'updatedAt',
      'lastLoginAt',
      'created_date',
      'update_date',
      'last_sync',
      'deleted_at',
    ];
    
    // X·ª≠ l√Ω c√°c tr∆∞·ªùng th·ªùi gian
    for (final field in timestampFields) {
      if (result.containsKey(field)) {
        // Chuy·ªÉn ƒë·ªïi sang chu·ªói ISO8601 ƒë·ªÉ c√≥ th·ªÉ encode JSON
        final isoString = toISOString(result[field]);
        if (isoString != null) {
          result[field] = isoString;
        }
      }
    }
    
    return result;
  }
  
  /// X·ª≠ l√Ω danh s√°ch ƒë·ªÉ chu·∫©n b·ªã cho vi·ªác encode JSON
  static List _prepareListForJson(List items) {
    return items.map((item) {
      if (item is Map<String, dynamic>) {
        return prepareDataForFirestore(item);
      } else if (item is List) {
        return _prepareListForJson(item);
      } else if (item is Timestamp) {
        return toISOString(item);
      } else {
        return item;
      }
    }).toList();
  }
  
  /// Duy·ªát ƒë·ªá quy to√†n b·ªô ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ t√¨m v√† chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ Timestamp
  static dynamic prepareAnyDataForJson(dynamic data) {
    if (data is Map<String, dynamic>) {
      return prepareDataForFirestore(data);
    } else if (data is List) {
      return _prepareListForJson(data);
    } else if (data is Timestamp) {
      return toISOString(data);
    } else {
      return data;
    }
  }
  
  /// Ki·ªÉm tra l·ªói Firebase v√† x·ª≠ l√Ω ph√π h·ª£p
  static String handleFirebaseError(dynamic error) {
    if (error is FirebaseException) {
      // X·ª≠ l√Ω l·ªói Firebase
      switch (error.code) {
        case 'admin-restricted-operation':
          return 'Thao t√°c n√†y b·ªã h·∫°n ch·∫ø. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng email v√† m·∫≠t kh·∫©u.';
        case 'network-request-failed':
          return 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n.';
        case 'permission-denied':
          return 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.';
        default:
          return 'L·ªói Firebase: ${error.code} - ${error.message}';
      }
    } else if (error is String && error.contains('com.google.android.gms')) {
      // L·ªói Google Play Services
      return 'L·ªói Google Play Services. Vui l√≤ng c·∫≠p nh·∫≠t Google Play Services v√† th·ª≠ l·∫°i.';
    } else {
      // L·ªói kh√°c
      return 'ƒê√£ x·∫£y ra l·ªói: $error';
    }
  }
  
  /// Ki·ªÉm tra xem Google Play Services c√≥ kh·∫£ d·ª•ng kh√¥ng
  static Future<bool> isGooglePlayServicesAvailable() async {
    try {
      // C√°ch an to√†n h∆°n ƒë·ªÉ ki·ªÉm tra Google Play Services
      // Ch·ªâ ki·ªÉm tra xem Firebase Auth ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o hay ch∆∞a
      if (FirebaseAuth.instance != null) {
        return true;
      }
      return true;
    } catch (e) {
      // B·ªè qua l·ªói v√† tr·∫£ v·ªÅ true ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng x·ª≠ l√Ω
      debugPrint('‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra Google Play Services: $e');
      return true;
    }
  }
  
  /// Chuy·ªÉn ƒë·ªïi an to√†n t·ª´ List sang Map
  /// H·ªØu √≠ch khi API tr·∫£ v·ªÅ List thay v√¨ Map nh∆∞ mong ƒë·ª£i
  static Map<String, dynamic>? safeListToMap(dynamic data) {
    try {
      if (data == null) {
        return null;
      }
      
      if (data is Map<String, dynamic>) {
        // ƒê√£ l√† Map, tr·∫£ v·ªÅ tr·ª±c ti·∫øp
        return data;
      } else if (data is List) {
        // L√† List, c·∫ßn chuy·ªÉn ƒë·ªïi
        if (data.isEmpty) {
          // Danh s√°ch tr·ªëng
          return {};
        }
        
        // L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
        final firstItem = data.first;
        if (firstItem is Map<String, dynamic>) {
          // Ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† Map, tr·∫£ v·ªÅ n√≥
          return firstItem;
        } else {
          // Ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n kh√¥ng ph·∫£i Map
          return {
            'data': data,
            'converted': true,
            'original_type': 'List'
          };
        }
      } else {
        // Ki·ªÉu d·ªØ li·ªáu kh√°c
        return {
          'value': data.toString(),
          'converted': true,
          'original_type': data.runtimeType.toString()
        };
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu: $e');
      return null;
    }
  }
  
  /// X·ª≠ l√Ω ph·∫£n h·ªìi API m·ªôt c√°ch an to√†n
  /// Tr·∫£ v·ªÅ Map<String, dynamic> trong m·ªçi tr∆∞·ªùng h·ª£p, kh√¥ng bao gi·ªù null
  static Map<String, dynamic> safeHandleApiResponse(dynamic responseData) {
    try {
      if (responseData == null) {
        return {'error': 'D·ªØ li·ªáu tr·ªëng'};
      }
      
      // Debug log ƒë·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu
      debugPrint('üîç Ki·ªÉu d·ªØ li·ªáu API response: ${responseData.runtimeType}');
      
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p PigeonUserDetails tr∆∞·ªõc ti√™n
      if (responseData.toString().contains('PigeonUserDetails')) {
        debugPrint('‚ö†Ô∏è Ph√°t hi·ªán PigeonUserDetails, tr·∫£ v·ªÅ Map an to√†n');
        return {
          'user_id': FirebaseAuth.instance.currentUser?.uid ?? 'unknown',
          'email': FirebaseAuth.instance.currentUser?.email ?? 'unknown',
          'display_name': FirebaseAuth.instance.currentUser?.displayName,
          'photo_url': FirebaseAuth.instance.currentUser?.photoURL,
          'is_authenticated': true,
          'converted_from_pigeonuserdetails': true
        };
      }
      
      if (responseData is Map<String, dynamic>) {
        return responseData;
      } else if (responseData is List) {
        debugPrint('‚ö†Ô∏è API tr·∫£ v·ªÅ List thay v√¨ Map, ƒëang chuy·ªÉn ƒë·ªïi');
        
        if (responseData.isEmpty) {
          return {'error': 'Danh s√°ch tr·ªëng'};
        }
        
        // Ki·ªÉm tra l·∫°i l·∫ßn n·ªØa cho tr∆∞·ªùng h·ª£p List<PigeonUserDetails>
        if (responseData.toString().contains('PigeonUserDetails')) {
          debugPrint('‚ö†Ô∏è Ph√°t hi·ªán List<PigeonUserDetails>, tr·∫£ v·ªÅ Map an to√†n');
          return {
            'user_id': FirebaseAuth.instance.currentUser?.uid ?? 'unknown',
            'email': FirebaseAuth.instance.currentUser?.email ?? 'unknown',
            'display_name': FirebaseAuth.instance.currentUser?.displayName,
            'photo_url': FirebaseAuth.instance.currentUser?.photoURL,
            'is_authenticated': true,
            'converted_from_list_pigeonuserdetails': true
          };
        }
        
        try {
          final firstItem = responseData.first;
          if (firstItem is Map<String, dynamic>) {
            return firstItem;
          } else {
            return {
              'data': responseData,
              'converted': true,
              'original_type': 'List'
            };
          }
        } catch (listError) {
          debugPrint('‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫ßn t·ª≠ trong List: $listError');
          return {
            'data': [],
            'converted': true,
            'original_type': 'List',
            'error': 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫ßn t·ª≠ trong List'
          };
        }
      } else {
        debugPrint('‚ö†Ô∏è API tr·∫£ v·ªÅ ki·ªÉu d·ªØ li·ªáu kh√¥ng x√°c ƒë·ªãnh: ${responseData.runtimeType}');
        return {
          'data': responseData.toString(),
          'converted': true,
          'original_type': responseData.runtimeType.toString()
        };
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu API: $e');
      
      // Ki·ªÉm tra n·∫øu l·ªói li√™n quan ƒë·∫øn PigeonUserDetails
      if (e.toString().contains('PigeonUserDetails')) {
        debugPrint('‚ö†Ô∏è Ph√°t hi·ªán l·ªói PigeonUserDetails trong x·ª≠ l√Ω, tr·∫£ v·ªÅ Map an to√†n');
        return {
          'user_id': FirebaseAuth.instance.currentUser?.uid ?? 'unknown',
          'email': FirebaseAuth.instance.currentUser?.email ?? 'unknown',
          'display_name': FirebaseAuth.instance.currentUser?.displayName,
          'photo_url': FirebaseAuth.instance.currentUser?.photoURL,
          'is_authenticated': true,
          'converted_from_error': true
        };
      }
      
      return {'error': 'L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: ${e.toString()}'};
    }
  }
} 