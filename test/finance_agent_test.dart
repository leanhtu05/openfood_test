import 'package:flutter_test/flutter_test.dart';
import 'package:openfood/services/finance_agent_service.dart';
import 'package:openfood/models/grocery_cost_analysis.dart';
import 'package:openfood/screens/grocery_list_screen.dart';
import 'package:openfood/utils/currency_formatter.dart';

void main() {
  group('AI Finance Agent Tests', () {
    test('T√≠nh to√°n chi ph√≠ th·ªãt b√≤ ch√≠nh x√°c', () {
      final item = GroceryItem(
        name: 'Th·ªãt b√≤',
        amount: '500',
        unit: 'g',
        category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
      );

      final cost = FinanceAgentService.calculateItemCost(item);
      
      // 500g th·ªãt b√≤ = 0.5kg * 350,000 VND/kg = 175,000 VND
      expect(cost, equals(175000.0));
    });

    test('T√≠nh to√°n chi ph√≠ rau c·ªß ch√≠nh x√°c', () {
      final item = GroceryItem(
        name: 'C√† chua',
        amount: '300',
        unit: 'g',
        category: 'ü•¨ Rau c·ªß qu·∫£',
      );

      final cost = FinanceAgentService.calculateItemCost(item);
      
      // 300g c√† chua = 0.3kg * 25,000 VND/kg = 7,500 VND
      expect(cost, equals(7500.0));
    });

    test('T√≠nh to√°n chi ph√≠ tr·ª©ng g√† ch√≠nh x√°c', () {
      final item = GroceryItem(
        name: 'Tr·ª©ng g√†',
        amount: '6',
        unit: 'qu·∫£',
        category: 'ü•õ S·∫£n ph·∫©m t·ª´ s·ªØa',
      );

      final cost = FinanceAgentService.calculateItemCost(item);
      
      // 6 qu·∫£ tr·ª©ng * 4,000 VND/qu·∫£ = 24,000 VND
      expect(cost, equals(24000.0));
    });

    test('Ph√¢n t√≠ch chi ph√≠ danh s√°ch mua s·∫Øm', () async {
      final groceryItems = <String, GroceryItem>{
        'th·ªãt b√≤': GroceryItem(
          name: 'Th·ªãt b√≤',
          amount: '500',
          unit: 'g',
          category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
        ),
        'c√† chua': GroceryItem(
          name: 'C√† chua',
          amount: '300',
          unit: 'g',
          category: 'ü•¨ Rau c·ªß qu·∫£',
        ),
        'tr·ª©ng g√†': GroceryItem(
          name: 'Tr·ª©ng g√†',
          amount: '6',
          unit: 'qu·∫£',
          category: 'ü•õ S·∫£n ph·∫©m t·ª´ s·ªØa',
        ),
      };

      final analysis = await FinanceAgentService.analyzeCosts(
        groceryItems,
        budgetLimit: 300000,
      );

      // Ki·ªÉm tra t·ªïng chi ph√≠
      final expectedTotal = 175000 + 7500 + 24000; // 206,500 VND
      expect(analysis.totalCost, equals(expectedTotal));

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng danh m·ª•c
      expect(analysis.categoryBreakdown.length, equals(3));

      // Ki·ªÉm tra ng√¢n s√°ch
      expect(analysis.budgetComparison.budgetLimit, equals(300000));
      expect(analysis.budgetComparison.isOverBudget, isFalse);

      // Ki·ªÉm tra c√≥ m·∫πo ti·∫øt ki·ªám
      expect(analysis.savingTips.isNotEmpty, isTrue);
    });

    test('C·∫£nh b√°o v∆∞·ª£t ng√¢n s√°ch', () async {
      final groceryItems = <String, GroceryItem>{
        'th·ªãt b√≤': GroceryItem(
          name: 'Th·ªãt b√≤',
          amount: '2',
          unit: 'kg',
          category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
        ),
      };

      final analysis = await FinanceAgentService.analyzeCosts(
        groceryItems,
        budgetLimit: 500000, // 500k VND
      );

      // 2kg th·ªãt b√≤ = 2 * 350,000 = 700,000 VND > 500,000 VND
      expect(analysis.budgetComparison.isOverBudget, isTrue);
      expect(analysis.budgetComparison.difference, greaterThan(0));
    });

    test('Ph√¢n t√≠ch danh m·ª•c ch√≠nh x√°c', () async {
      final groceryItems = <String, GroceryItem>{
        'th·ªãt b√≤': GroceryItem(
          name: 'Th·ªãt b√≤',
          amount: '500',
          unit: 'g',
          category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
        ),
        'th·ªãt g√†': GroceryItem(
          name: 'Th·ªãt g√†',
          amount: '500',
          unit: 'g',
          category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
        ),
        'c√† chua': GroceryItem(
          name: 'C√† chua',
          amount: '300',
          unit: 'g',
          category: 'ü•¨ Rau c·ªß qu·∫£',
        ),
      };

      final analysis = await FinanceAgentService.analyzeCosts(
        groceryItems,
        budgetLimit: 500000,
      );

      // Ki·ªÉm tra danh m·ª•c th·ªãt
      final meatCategory = analysis.categoryBreakdown['ü•© Th·ªãt t∆∞∆°i s·ªëng'];
      expect(meatCategory, isNotNull);
      expect(meatCategory!.itemCount, equals(2));
      
      // Th·ªãt b√≤ 500g = 175,000 + Th·ªãt g√† 500g = 60,000 = 235,000 VND
      expect(meatCategory.totalCost, equals(235000.0));

      // Ki·ªÉm tra danh m·ª•c rau c·ªß
      final vegetableCategory = analysis.categoryBreakdown['ü•¨ Rau c·ªß qu·∫£'];
      expect(vegetableCategory, isNotNull);
      expect(vegetableCategory!.itemCount, equals(1));
      expect(vegetableCategory.totalCost, equals(7500.0));
    });

    test('T·∫°o m·∫πo ti·∫øt ki·ªám ph√π h·ª£p', () async {
      final groceryItems = <String, GroceryItem>{
        'th·ªãt b√≤': GroceryItem(
          name: 'Th·ªãt b√≤',
          amount: '1',
          unit: 'kg',
          category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
        ),
      };

      final analysis = await FinanceAgentService.analyzeCosts(
        groceryItems,
        budgetLimit: 500000,
      );

      // Ki·ªÉm tra c√≥ m·∫πo ti·∫øt ki·ªám
      expect(analysis.savingTips.isNotEmpty, isTrue);
      
      // M·∫πo ƒë·∫ßu ti√™n n√™n li√™n quan ƒë·∫øn danh m·ª•c ƒë·∫Øt nh·∫•t
      final firstTip = analysis.savingTips.first;
      expect(firstTip.title.contains('ü•© Th·ªãt t∆∞∆°i s·ªëng'), isTrue);
      expect(firstTip.potentialSaving, greaterThan(0));
    });

    test('C·∫£nh b√°o gi√° cao', () async {
      final groceryItems = <String, GroceryItem>{
        'th·ªãt b√≤': GroceryItem(
          name: 'Th·ªãt b√≤',
          amount: '1',
          unit: 'kg',
          category: 'ü•© Th·ªãt t∆∞∆°i s·ªëng',
        ),
      };

      final analysis = await FinanceAgentService.analyzeCosts(
        groceryItems,
        budgetLimit: 500000,
      );

      // Th·ªãt b√≤ 1kg = 350,000 VND > 100,000 VND threshold
      expect(analysis.priceAlerts.isNotEmpty, isTrue);
      
      final alert = analysis.priceAlerts.first;
      expect(alert.itemName, equals('Th·ªãt b√≤'));
      expect(alert.alertType, equals('high'));
    });

    test('X·ª≠ l√Ω danh s√°ch r·ªóng', () async {
      final analysis = await FinanceAgentService.analyzeCosts(
        {},
        budgetLimit: 500000,
      );

      expect(analysis.totalCost, equals(0));
      expect(analysis.averageCostPerItem, equals(0));
      expect(analysis.categoryBreakdown.isEmpty, isTrue);
      expect(analysis.budgetComparison.isOverBudget, isFalse);
    });

    // Test n√†y s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán gi√°n ti·∫øp th√¥ng qua calculateItemCost
    test('T√≠nh to√°n v·ªõi s·ªë l∆∞·ª£ng kh√°c nhau', () {
      final item1 = GroceryItem(
        name: 'C√† chua',
        amount: '1.5',
        unit: 'kg',
        category: 'ü•¨ Rau c·ªß qu·∫£',
      );

      final cost1 = FinanceAgentService.calculateItemCost(item1);
      expect(cost1, equals(37500.0)); // 1.5kg * 25,000 = 37,500
    });
  });

  group('Currency Formatter Tests', () {
    test('Format VND ch√≠nh x√°c', () {
      expect(CurrencyFormatter.formatVND(175000), equals('175.000‚Ç´'));
      expect(CurrencyFormatter.formatVND(0), equals('0‚Ç´'));
      expect(CurrencyFormatter.formatVND(1000000), equals('1.000.000‚Ç´'));
    });

    test('Format VND compact', () {
      expect(CurrencyFormatter.formatVNDCompact(175000), contains('175'));
      expect(CurrencyFormatter.formatVNDCompact(1000000), contains('1M'));
    });

    test('Parse VND string', () {
      expect(CurrencyFormatter.parseVND('175.000‚Ç´'), equals(175000));
      expect(CurrencyFormatter.parseVND('1.000.000‚Ç´'), equals(1000000));
    });
  });
}
